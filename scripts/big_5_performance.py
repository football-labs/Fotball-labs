"""

Ceci est la page principale du projet, veuillez trouver ci dessous une br√®ve pr√©sentation du projet, ainsi que le code associ√©.
This is the main page of the project, please find below a brief presentation of the project, as well as the associated code.
Esta es la p√°gina principal del proyecto. A continuaci√≥n encontrar√° una breve presentaci√≥n del proyecto, as√≠ como el c√≥digo asociado
"""

# Import des librairies / Importing libraries
import matplotlib.pyplot as plt
import streamlit as st
from streamlit_option_menu import option_menu
import os
import pandas as pd
import plotly.graph_objects as go
import seaborn as sns
import numpy as np
from sklearn.preprocessing import StandardScaler
from sklearn.metrics.pairwise import cosine_similarity
from mplsoccer import PyPizza, FontManager
from matplotlib.patches import Patch
import base64
import re


# Affichage du titre et du logo de l'application web / Display of web application title and logo / Visualizaci√≥n del t√≠tulo y el logotipo de la aplicaci√≥n web
st.set_page_config(page_title="Big 5 Performance 25/26 ‚öΩ ", page_icon="üíØ", layout="centered")

# Langue dans session_state / Language in session_state / Idioma en session_state
if "lang" not in st.session_state:
    st.session_state["lang"] = "Fran√ßais"

lang = st.sidebar.selectbox(
    "Choisissez votre langue / Choose your language / Elige tu idioma", 
    ["Fran√ßais", "English", "Espa√±ol"]
)
st.session_state["lang"] = lang

### Fonction pour la partie Joueur / Function for the Player part / Funci√≥n para la parte Jugador

# Affichage de la valeur du joueur / Player value display / Visualizaci√≥n del valor del jugador
def format_market_value(eur):
    if pd.isna(eur):
        return "-"
    if eur >= 1_000_000:
        return f"{eur / 1_000_000:.1f}M ‚Ç¨"
    elif eur >= 1_000:
        return f"{eur / 1_000:.0f}K ‚Ç¨"
    else:
        return f"{int(eur)} ‚Ç¨"

# Dictionnaire de traduction des postes de joueurs et de leur pays / Translation dictionary for player positions and his country / Diccionario de traducci√≥n de posiciones de jugadores y sus pa√≠ses
position_translation = {
    "fr": {
        "Second Striker": "Second Attaquant",
        "Centre-Forward": "Attaquant-Centre",
        "Right-Back": "D√©fenseur Droit",
        "Left-Back": "D√©fenseur Gauche",
        "Right Winger": "Ailier Droit",
        "Left Winger": "Ailier Gauche",
        "Right Midfield": "Milieu Droit",
        "Left Midfield": "Milieu Gauche",
        "Attacking Midfield": "Milieu Attaquant",
        "Goalkeeper": "Gardien",
        "Defensive Midfield": "Milieu D√©fensif",
        "Central Midfield": "Milieu Central",
        "Centre-Back": "D√©fenseur Central",
    },
    "es": {
        "Second Striker": "Segundo delantero",
        "Centre-Forward": "Delantero centro",
        "Right-Back": "Lateral derecho",
        "Left-Back": "Lateral izquierdo",
        "Right Winger": "Extremo derecho",
        "Left Winger": "Extremo izquierdo",
        "Right Midfield": "Centrocampista derecho",
        "Left Midfield": "Centrocampista izquierdo",
        "Attacking Midfield": "Mediapunta",
        "Goalkeeper": "Portero",
        "Defensive Midfield": "Mediocentro defensivo",
        "Central Midfield": "Mediocentro",
        "Centre-Back": "Defensa central",
    }
}

country_translation = {
    "fr": {
        "Germany": "Allemagne",
        "Spain": "Espagne",
        "Italy": "Italie",
        "England": "Angleterre",
        "Netherlands": "Pays-Bas",
        "Brazil": "Br√©sil",
        "Argentina": "Argentine",
        "Belgium": "Belgique",
        "Croatia": "Croatie",
        "Switzerland": "Suisse",
        "Senegal": "S√©n√©gal",
        "Cameroon": "Cameroun",
        "Morocco": "Maroc",
        "Albania": "Albanie",
        "Algeria": "Alg√©rie",
        "Andorra": "Andorre",
        "Armenia": "Arm√©nie",
        "Australia": "Australie",
        "Austria": "Autriche",
        "Bosnia-Herzegovina": "Bosnie-Herz√©govine",
        "Cape Verde": "Cap-Vert",
        "Central African Republic": "R√©publique centrafricaine",
        "Chile": "Chili",
        "Colombia": "Colombie",
        "Czech Republic": "Tch√©quie",
        "Denmark": "Danemark",
        "DR Congo": "R√©publique d√©mocratique du Congo",
        "Ecuador": "√âquateur",
        "Egypt": "√âgypte",
        "Equatorial Guinea": "Guin√©e √©quatoriale",
        "Estonia": "Estonie",
        "Finland": "Finlande",
        "French Guiana": "Guyane fran√ßaise",
        "Georgia": "G√©orgie",
        "Greece": "Gr√®ce",
        "Guinea": "Guin√©e",
        "Guinea-Bissau": "Guin√©e-Bissau",
        "Hungary": "Hongrie",
        "Iceland": "Islande",
        "Indonesia": "Indon√©sie",
        "Ireland": "Irlande",
        "Jamaica": "Jama√Øque",
        "Japan": "Japon",
        "Jordan": "Jordanie",
        "Korea, South": "Cor√©e du Sud",
        "Libya": "Libye",
        "Lithuania": "Lituanie",
        "Malta": "Malte",
        "Mexico": "Mexique",
        "New Zealand": "Nouvelle-Z√©lande",
        "North Macedonia": "Mac√©doine du Nord",
        "Northern Ireland": "Irlande du Nord",
        "Norway": "Norv√®ge",
        "Peru": "P√©rou",
        "Poland": "Pologne",
        "Romania": "Roumanie",
        "Russia": "Russie",
        "Scotland": "√âcosse",
        "Serbia": "Serbie",
        "Slovakia": "Slovaquie",
        "Slovenia": "Slov√©nie",
        "Sweden": "Su√®de",
        "Syria": "Syrie",
        "The Gambia": "Gambie",
        "Tunisia": "Tunisie",
        "T√ºrkiye": "Turquie",
        "United States": "√âtats-Unis",
        "Uzbekistan": "Ouzb√©kistan",
        "Wales": "Pays de Galles",
        "Zambia": "Zambie",
    },
    "es": {
        "France": "Francia",
        "Canada": "Canad√°",
        "Germany": "Alemania",
        "Spain": "Espa√±a",
        "Italy": "Italia",
        "England": "Inglaterra",
        "Netherlands": "Pa√≠ses Bajos",
        "Brazil": "Brasil",
        "Argentina": "Argentina",
        "Belgium": "B√©lgica",
        "Croatia": "Croacia",
        "Switzerland": "Suiza",
        "Senegal": "Senegal",
        "Cameroon": "Camer√∫n",
        "Morocco": "Marruecos",
        "Albania": "Albania",
        "Algeria": "Argelia",
        "Andorra": "Andorra",
        "Armenia": "Armenia",
        "Australia": "Australia",
        "Austria": "Austria",
        "Bosnia-Herzegovina": "Bosnia y Herzegovina",
        "Cape Verde": "Cabo Verde",
        "Central African Republic": "Rep√∫blica Centroafricana",
        "Chile": "Chile",
        "Colombia": "Colombia",
        "Czech Republic": "Chequia",
        "Denmark": "Dinamarca",
        "DR Congo": "Rep√∫blica Democr√°tica del Congo",
        "Ecuador": "Ecuador",
        "Egypt": "Egipto",
        "Equatorial Guinea": "Guinea Ecuatorial",
        "Estonia": "Estonia",
        "Finland": "Finlandia",
        "French Guiana": "Guayana Francesa",
        "Georgia": "Georgia",
        "Greece": "Grecia",
        "Guinea": "Guinea",
        "Guinea-Bissau": "Guinea-Bis√°u",
        "Hungary": "Hungr√≠a",
        "Iceland": "Islandia",
        "Indonesia": "Indonesia",
        "Ireland": "Irlanda",
        "Jamaica": "Jamaica",
        "Japan": "Jap√≥n",
        "Jordan": "Jordania",
        "Korea, South": "Corea del Sur",
        "Libya": "Libia",
        "Lithuania": "Lituania",
        "Malta": "Malta",
        "Mexico": "M√©xico",
        "New Zealand": "Nueva Zelanda",
        "North Macedonia": "Macedonia del Norte",
        "Northern Ireland": "Irlanda del Norte",
        "Norway": "Noruega",
        "Peru": "Per√∫",
        "Poland": "Polonia",
        "Romania": "Ruman√≠a",
        "Russia": "Rusia",
        "Scotland": "Escocia",
        "Serbia": "Serbia",
        "Slovakia": "Eslovaquia",
        "Slovenia": "Eslovenia",
        "Sweden": "Suecia",
        "Syria": "Siria",
        "The Gambia": "Gambia",
        "Tunisia": "T√∫nez",
        "T√ºrkiye": "Turqu√≠a",
        "United States": "Estados Unidos",
        "Ukraine": "Ucrania",
        "Uzbekistan": "Uzbekist√°n",
        "Wales": "Gales",
        "Zambia": "Zambia",
        "Zimbabwe": "Zimbabue",
        "Panama": "Panam√°",
        "Haiti": "Hait√≠",
        "Guadeloupe": "Guadalupe",
        "Gabon": "Gab√≥n",
        "Cote d'Ivoire": "Costa de Marfil",

    }
}

base_stat_translation = {
    "fr": {
        "goal_scoring_created": "Cr√©ation de buts",
        "goal_scoring_conceded": "Occasions conc√©d√©es",
        "efficiency": "Efficacit√©",
        "error_fouls": "Erreurs et fautes",
        "short_clearance": "Relance courte",
        "long_clearance": "Relance longue",
        "positioning": "Positionnement",
        "aerial_defense": "Jeu a√©rien d√©fensif",
        "finish": "Finition",
        "building": "Construction du jeu",
        "creation": "Cr√©ation d'occasions",
        "dribble": "Dribbles",
        "projection": "Projection",
        "defensive_actions": "Actions d√©fensives",
        "waste": "Pertes de balle",
        "faults_committed": "Fautes commises",
        "provoked_fouls": "Fautes provoqu√©es",
        "aerial": "Jeu a√©rien",
    },
    "es": {
        "goal_scoring_created": "Creaci√≥n de goles",
        "goal_scoring_conceded": "Ocasiones concedidas",
        "efficiency": "Eficiencia",
        "error_fouls": "Errores y faltas",
        "short_clearance": "Salida en corto",
        "long_clearance": "Salida en largo",
        "positioning": "Posicionamiento",
        "aerial_defense": "Juego a√©reo defensivo",
        "finish": "Finalizaci√≥n",
        "building": "Construcci√≥n del juego",
        "creation": "Creaci√≥n de ocasiones",
        "dribble": "Regates",
        "projection": "Proyecci√≥n",
        "defensive_actions": "Acciones defensivas",
        "waste": "P√©rdidas de bal√≥n",
        "faults_committed": "Faltas cometidas",
        "provoked_fouls": "Faltas provocadas",
        "aerial": "Juego a√©reo",
    },
}

foot_translation = {
    "fr": {"right": "Droit", "left": "Gaucher", "both": "Ambidextre"},
    "es": {"right": "Diestro", "left": "Zurdo", "both": "Ambidiestro"},
}
foot_en_pretty = {"right": "Right", "left": "Left", "both": "Both"}


# Utilise la traduction si besoin selon la langue de l'application / Use translation if necessary depending on the language of the application
# Utiliza la traducci√≥n si es necesario seg√∫n el idioma de la aplicaci√≥n
def translate_position(sub_position: str, lang: str = "fr") -> str:
    return position_translation.get(lang, {}).get(sub_position, sub_position)

def translate_country(country_en: str, lang: str = "fr") -> str:
    lang_map = country_translation.get(lang, {})
    if country_en in lang_map:
        return lang_map[country_en]
    return country_translation.get("fr", {}).get(country_en, country_en)

def translate_base_stat(key: str, lang: str = "fr") -> str:
    if key in base_stat_translation.get(lang, {}):
        return base_stat_translation[lang][key]
    if key in base_stat_translation.get("fr", {}):
        return base_stat_translation["fr"][key]
    return key.replace("_", " ").capitalize()

def translate_foot(foot_raw: str | None, lang: str = "fr") -> str | None:
    if foot_raw is None:
        return None
    s = str(foot_raw).strip()
    if s == "" or (isinstance(foot_raw, float) and pd.isna(foot_raw)):
        return None
    key = s.lower()
    if lang in foot_translation:
        return foot_translation[lang].get(key, s)
    return foot_en_pretty.get(key, s)

def translate_position_list(pos_str: str | None, lang: str = "fr") -> str | None:
    if pos_str is None or (isinstance(pos_str, float) and pd.isna(pos_str)):
        return None
    s = str(pos_str).strip()
    if not s:
        return None
    items = [p.strip() for p in s.split(",") if p.strip()]
    if not items:
        return None
    translated = [translate_position(p, lang=lang) for p in items]
    return ", ".join(translated) if translated else None

# Mapping des noms d'√©quipe (fbref_opta_join -> database_player) / Mapping of teams name (fbref_opta_join -> database_player) / Asignaci√≥n de nombres de equipos (fbref_opta_join -> database_player)
df_to_info = {
    "Sevilla": "Sevilla FC",
    "Betis": "Real Betis",
    "RB Leipzig": "Leipzig",
    "Osasuna": "CA Osasuna",
    "Nott'ham Forest": "Nott'm Forest",
    "Newcastle Utd": "Newcastle",
    "Milan": "AC Milan",
    "Manchester Utd": "Man Utd",
    "Manchester City": "Man City",
    "Mallorca": "RCD Mallorca",
    "Mainz 05": "Mainz",
    "Leeds United": "Leeds",
    "K√∂ln": "1.FC K√∂ln",
    "Hamburger FC": "Hamburg",
    "Gladbach": "M√∂nchengladbach",
    "Elche": "Elche CF",
    "Eint Frankfurt": "Frankfurt",
    "Celta Vigo": "Celta de Vigo",
    "Atl√©tico Madrid": "Atl√©tico",
}

#  Cat√©gorie des postes pour le radar / Position category for the radar plot / Categor√≠a de posiciones para el radar plot
position_category = {
    "Goalkeeper": "Gardiens de but",
    "Centre-Back": "D√©fenseurs centraux",
    "Right-Back": "D√©fenseurs lat√©raux",
    "Left-Back": "D√©fenseurs lat√©raux",
    "Left Midfield": "Milieux de terrain",
    "Right Midfield": "Milieux de terrain",
    "Central Midfield": "Milieux de terrain",
    "Defensive Midfield": "Milieux de terrain",
    "Attacking Midfield": "Milieux offensifs / Ailiers",
    "Right Winger": "Milieux offensifs / Ailiers",
    "Left Winger": "Milieux offensifs / Ailiers",
    "Second Striker": "Attaquants",
    "Centre-Forward": "Attaquants"
}

# Statistiques par cat√©gorie pour le radar / Statistics by categorie for the radar plot / Estad√≠sticas por categor√≠a para el radar plot
category_stats = {
    "Gardiens de but": ["GA_per90", "PSxG_per90", "/90", "Save%", "PSxG+/-", "Err_per90","Launch%", "AvgLen", "Cmp%", "AvgDist", "#OPA_per90", "Stp%"],
    "D√©fenseurs centraux": ["G-PK_per90", "PrgP_per90","Cmp%","xAG_per90","PrgC_per90","Err_per90","Tkl%","Int_per90","Tkl_per90","CrdY_per90","Won_per90","Won%" ],
    "D√©fenseurs lat√©raux": ["G-PK_per90", "PrgP_per90", "Cmp%", "xAG_per90", "Succ_per90", "PrgC_per90", "Err_per90", "Tkl%", "Int_per90", "Tkl_per90", "CrdY_per90", "Won%"],
    "Milieux de terrain": ["G-PK_per90", "PrgP_per90", "PrgR_per90", "Cmp%", "xAG_per90", "PrgC_per90", "Fld_per90", "Err_per90", "Tkl%", "Int_per90", "CrdY_per90", "Won%"],
    "Milieux offensifs / Ailiers": ["npxG_per90","G-PK_per90", "G-xG_per90", "PrgP_per90", "PrgR_per90", "Cmp%", "xAG_per90", "Succ_per90", "Succ%", "PrgC_per90", "Fld_per90", "Dis_per90"],
    "Attaquants": ["npxG_per90","Sh_per90", "G-PK_per90", "G-xG_per90", "G/Sh", "PrgP_per90", "PrgR_per90", "Cmp%", "xAG_per90","Succ_per90", "PrgC_per90", "Dis_per90"    ]
}

invert_stats = {"GA_per90", "PSxG_per90","Err_per90", "CrdY_per90", "Dis_per90"}

# Fonction pour renommer les noms des cat√©gories / Function for renaming category names / Funci√≥n para renombrar los nombres de las categor√≠as
def format_stat_name(stat):
    if stat.startswith("score_"):
        return stat.replace("score_", "").replace("_", " ").capitalize()
    return stat.capitalize() if stat == "rating" else stat

# Fonction pour effectuer un radar plot avec les donn√©es / Radar plot function with data / Funci√≥n para realizar un radar plot con los datos
def plot_pizza_radar(labels, player_values, median_values, title="Radar",legend_labels=("Joueur", "M√©diane")):
    # Param√®tres de la pizza plot / Parameters of the pizza plot
    pizza = PyPizza(
        params=labels,
        background_color="#EFF0D1",
        straight_line_color="#000000",
        straight_line_lw=1,
        last_circle_lw=1,
        last_circle_color="#000000",
        other_circle_ls="--",
        other_circle_color="#000000",
        other_circle_lw=0.5
    )
    
    # Mise des couleurs et valeurs sur la pizza plot / Dislay colors and values on the pizza plot / Colores y valores en la pizza plot
    fig, ax = pizza.make_pizza(
        values=[round(v) for v in player_values],
        compare_values=[round(v) for v in median_values],
        figsize=(8, 8),
        kwargs_slices=dict(
            facecolor="#7FBFFF", edgecolor="#000000", zorder=2, linewidth=1
        ),
        kwargs_compare=dict(
            facecolor="#e63946", edgecolor="#000000", zorder=1, linewidth=1
        ),
        kwargs_params=dict(
            color="#000000", fontsize=11, va="center"
        ),
        kwargs_values=dict(
            color="#000000", fontsize=11, zorder=3,
            bbox=dict(edgecolor="#000000", facecolor="#7FBFFF", boxstyle="round,pad=0.2", lw=1)
        ),
        kwargs_compare_values=dict(
            color="#000000", fontsize=11, zorder=3,
            bbox=dict(edgecolor="#000000", facecolor="#f08080", boxstyle="round,pad=0.2", lw=1)
        )
    )

    # Ajustement si valeurs proches / Adjustment if values are close / Ajuste si los valores son cercanos
    threshold = 10
    params_offset = [
        abs(p - m) < threshold for p, m in zip(player_values, median_values)
    ]
    pizza.adjust_texts(params_offset, offset=-0.17, adj_comp_values=True)

    # Titre du radar / Radar title / T√≠tulo del radar
    fig.text(
        0.5, 1.00, title,
        ha="center", fontsize=14, fontweight="bold", color="#000000"
    )

    # L√©gende personnalis√©e / Custom legend / L√©gende personnalis√©e
    legend_elements = [
        Patch(facecolor="#7FBFFF", edgecolor='black', label=legend_labels[0]),
        Patch(facecolor="#e63946", edgecolor='black', label=legend_labels[1])
    ]
    ax.legend(
        handles=legend_elements,
        loc='lower center', bbox_to_anchor=(0.5, -0.15),
        ncol=2, fontsize=10, frameon=False
    )

    return fig

# Fonction pour trouver les joueurs similaires / Function to find similar players / Funci√≥n para encontrar jugadores similares
def find_similar_players(selected_player_name, df, filter_type=None, top_n=5):
    # Informations du joueur s√©lectionn√© / Selected player information / Informaci√≥n del jugador seleccionado
    try:
        selected_player_row = df[df['player_name'] == selected_player_name].iloc[0]
    except IndexError:
        return pd.DataFrame()

    sub_position = selected_player_row['position']
    age = selected_player_row['Age']
    competition = selected_player_row['Comp']
    country = selected_player_row['nationality']

    candidates_df = df[df['position'] == sub_position].copy() # Candidats = tous les joueurs du m√™me poste / Candidates = all players in the same position / Candidatos = todos los jugadores en la misma posici√≥n

    candidates_df = candidates_df[candidates_df['player_name'] != selected_player_name] # Retirer le joueur lui-m√™me du calcul / Remove the player himself from the calculation / Eliminar al jugador mismo del c√°lculo

    # Colonnes de stats √† comparer (sauf les informations de base) / Columns of statistics to compare (except base informations) / Columnas de estad√≠sticas para comparar (excepto informaci√≥n base)
    stats_cols = df.columns[14:]
    stats_df = candidates_df[stats_cols].apply(pd.to_numeric, errors='coerce').fillna(0)

    # Ajouter le joueur s√©lectionn√© au d√©but pour calculer les similarit√©s
    # Add the player selected at the beginning to calculate similarities
    # A√±adir el jugador seleccionado al principio para calcular las similitudes

    selected_stats = df[df['player_name'] == selected_player_name][stats_cols].apply(pd.to_numeric, errors='coerce').fillna(0)
    full_stats = pd.concat([selected_stats, stats_df], ignore_index=True)

    # Normalisation / Standardisation / Normalizaci√≥n
    scaler = StandardScaler()
    stats_scaled = scaler.fit_transform(full_stats)

    similarities = cosine_similarity(stats_scaled)[0][1:] # Calcul de similarit√© / Similarity calculation / C√°lculo de similitud

    # Ajouter les scores √† candidates_df / Add scores to candidates_df / A√±adir los scores a candidates_df
    candidates_df = candidates_df.reset_index(drop=True)
    candidates_df['percentage_similarity'] = [round(s * 100, 2) for s in similarities]

    # Appliquer un filtre si sp√©cifi√© / Apply a filter if specified / Aplicar un filtro si especificado
    if filter_type == "championnat":
        candidates_df = candidates_df[
            candidates_df['Comp'] == competition
        ]
    elif filter_type == "pays":
        candidates_df = candidates_df[
            candidates_df['nationality'] == country
        ]
    elif filter_type == "tranche_age":
        if pd.isna(age):
            pass
        elif age < 23:
            candidates_df = candidates_df[candidates_df['Age'] < 23]
        elif 24 <= age <= 29:
            candidates_df = candidates_df[candidates_df['Age'].between(24, 29)]
        else:
            candidates_df = candidates_df[candidates_df['Age'] >= 30]

    candidates_df = candidates_df.sort_values(by='percentage_similarity', ascending=False) # Trier par similarit√© / Sort by similarity / Ordenar por similitud
    
    candidates_df['marketValue'] = candidates_df['marketValue'].apply(format_market_value) # Formater la colonne de valeur marchande / Formatting market value column / Formatar la columna de valor de mercado

    # Colonnes √† afficher / Columns to display / Columnas a mostrar
    final_cols = [
        'player_name', 'percentage_similarity', 'Age', 'nationality',  'club_name', 'marketValue', 'contract'
    ]
    # Traduction du pays du joueur / Translation of the player's country / Traducci√≥n del pa√≠s del jugador
    if lang == "Fran√ßais":
        candidates_df['nationality'] = candidates_df['nationality'].apply(
            lambda x: translate_country(x, lang="fr")
        )
    elif lang == "Espa√±ol":
        candidates_df['nationality'] = candidates_df['nationality'].apply(
            lambda x: translate_country(x, lang="es")
        )


    return candidates_df[final_cols].head(top_n)

# Fonction pour trouver les √©quipes similaires / Function to find similar teams / Funci√≥n para encontrar equipos similares
def find_similar_teams(selected_team_name, df, filter_type=None, top_n=5):
    # Informations de l'√©quipe s√©lectionn√© / Selected team information / Informaci√≥n del equipo seleccionado
    try:
        selected_team_row = df[df['team_code'] == selected_team_name].iloc[0]
    except IndexError:
        return pd.DataFrame()

    competition = selected_team_row['championship_name'] 

    candidates_df = df[df['team_code'] != selected_team_name] # Retirer l'√©quipe lui-m√™me du calcul / Remove the team himself from the calculation / Eliminar al equipo mismo del c√°lculo

    # Colonnes de stats √† comparer / Columns of statistics to compare  / Columnas de estad√≠sticas para comparar
    stats_cols = [col for col in [
        "attacking_set_pieces__xg_pct",
        "passing__avg_poss",
        "passing__pass_direction__fwd",
        "passing__pass_direction__left",
        "passing__pass_direction__right",
        "passing__crosses__pct",
        "pressing__pressed_seqs",
        "pressing__ppda",
        "pressing__start_distance_m",
        "sequences__ten_plus_passes",
        "sequences__direct_speed",
        "sequences__passes_per_seq",
        "sequences__sequence_time",
        "sequences__build_ups__total",
        "sequences__direct_attacks__total",
        "misc.__fouled",
        "misc.__fouls",
        "defending_set_pieces__xg_pct",
        "defending_defensive_actions__clearances",
        "defending_defensive_actions__ground_duels_won",
        "defending_defensive_actions__aerial_duels_won",
        "defending_misc__offsides",
    ] if col in df.columns]

    stats_df = candidates_df[stats_cols].apply(pd.to_numeric, errors='coerce').fillna(0)

    # Ajouter l'√©quipe s√©lectionn√© au d√©but pour calculer les similarit√©s
    # Add the team selected at the beginning to calculate similarities
    # A√±adir el equipo seleccionado al principio para calcular las similitudes

    selected_stats = df[df['team_code'] == selected_team_name][stats_cols].apply(pd.to_numeric, errors='coerce').fillna(0)
    full_stats = pd.concat([selected_stats, stats_df], ignore_index=True)

    # Normalisation / Standardisation / Normalizaci√≥n
    scaler = StandardScaler()
    stats_scaled = scaler.fit_transform(full_stats)

    similarities = cosine_similarity(stats_scaled)[0][1:] # Calcul de similarit√© / Similarity calculation / C√°lculo de similitud

    # Ajouter les scores √† candidates_df / Add scores to candidates_df / A√±adir los scores a candidates_df
    candidates_df = candidates_df.reset_index(drop=True)
    candidates_df['percentage_similarity'] = [round(s * 100, 2) for s in similarities]

    # Appliquer un filtre si sp√©cifi√© / Apply a filter if specified / Aplicar un filtro si especificado
    if filter_type == "championnat":
        candidates_df = candidates_df[
            candidates_df['championship_name'] == competition
        ]

    candidates_df = candidates_df.sort_values(by='percentage_similarity', ascending=False) # Trier par similarit√© / Sort by similarity / Ordenar por similitud
    
    # Colonnes √† afficher / Columns to display / Columnas a mostrar
    final_cols = [
        'team_code', 'percentage_similarity', 'championship_name', 'country'
    ]
    # Traduction du pays du joueur / Translation of the player's country / Traducci√≥n del pa√≠s del jugador
    if lang == "Fran√ßais":
        candidates_df['country'] = candidates_df['country'].apply(
            lambda x: translate_country(x, lang="fr")
        )
    elif lang == "Espa√±ol":
        candidates_df['country'] = candidates_df['country'].apply(
            lambda x: translate_country(x, lang="es")
        )


    return candidates_df[final_cols].head(top_n)

# S√©lecteur de MODE (√âquipes / Joueurs) / Selector of MODE (Teams / Players) / Selector de MODE (Equipos / Jugadores)
mode_label = {
    "Fran√ßais": "Type d'analyse",
    "English": "Analysis type",
    "Espa√±ol": "Tipo de an√°lisis",
}[lang]

mode_options = {
    "Fran√ßais": ["√âquipes", "Joueurs"],
    "English": ["Teams", "Players"],
    "Espa√±ol": ["Equipos", "Jugadores"],
}[lang]

mode = option_menu(
    menu_title=None,
    options=mode_options,
    icons=["shield", "person-lines-fill"], 
    orientation="horizontal",
)

# Menus selon le MODE / Menus according to MODE /Men√∫s seg√∫n el MODO
if (mode in ["√âquipes", "Teams", "Equipos"]):
    # MENU √âQUIPE / MENU TEAM / MENU EQUIPO
    if lang == "Fran√ßais":
        menu_labels = ["Menu", "√âquipe", "Duel", "Stats +", "Stats", "Top"]
    elif lang == "English":
        menu_labels = ["Home", "Team", "F2F", "Stats +", "Stats", "Top"]
    else:
        menu_labels = ["Inicio", "Equipo", "Duelo", "Stats +", "Stats", "Top"]

    selected = option_menu(
        menu_title=None,
        options=menu_labels,
        icons=["house", "people", "crosshair", "trophy", "list-ol", "award"],
        orientation="horizontal",
    )

    # Code de la partie √âquipe / Code of the Team part / C√≥digo de la parte Equipo
    if selected in ["Menu", "Home", "Inicio"]:
        if lang == "Fran√ßais":
            # Titre de la page
            st.markdown(
                "<h3 style='text-align: center;'>Visualisation des performances des √©quipes sur la saison 25/26</h3>", 
                unsafe_allow_html=True)

            st.image("../image/logo_team_performance.png") # Utilisation de la 1er banni√®re en image

            # Sous-titre
            st.markdown(
                "<h4 style='text-align: center;'>Pr√©sentation</h4>", 
                unsafe_allow_html=True)

            # Description du projet
            st.markdown(
                """
                <p style="text-align: justify;">
                L'objectif est de <strong>visualiser les performances des √©quipes sur la saison 25/26</strong>.
                Les donn√©es des joueurs proviennent de Opta The Analyst, Fbref et Transfermarkt.
                </p>

                <p style="text-align: justify;">
                Ainsi, l'analyse portera sur la saison 25/26 pour les comp√©titions suivantes :
                <strong>Ligue 1, Bundesliga, Premier League, La Liga, Serie A</strong>.
                </p>

                <br>

                <ul>
                    <li><strong>üìä Analyse d'un √©quipes</strong> : Analyse de l'√©quipe de votre choix √† travers plusieurs statistiques</li>
                    <li><strong>ü•ä Comparaison entre √âquipes</strong> : Analyse comparative entre deux √©quipes</li>
                    <li><strong>üèÜ Classement des √©quipes (Stats Aggr√©g√©es par Cat√©gorie) </strong> : Classement des √©quipes par performance selon une statistique aggr√©g√©e par cat√©gorie choisie</li>
                    <li><strong>ü•á Classement des √©quipes (Stats Brutes) </strong> : Classement des √©quipes par performance selon une statistique brute choisie</li>
                    <li><strong>‚≠ê Top </strong> : √âtablissement d'une classement des √©quipes √† partir des statistiques</li>
                </ul>

                <br>

                Pour plus de d√©tails sur ce projet, vous avez √† votre disposition :
                <ul>
                    <li><em>La documentation du projet</em></li>
                    <li><a href="https://github.com/football-labs/Fotball-labs" target="_blank">Le code associ√© √† l'application</a></li>
                </ul>
                """,
                unsafe_allow_html=True
            )

        elif lang == "English":
            # Page title
            st.markdown(
                "<h3 style='text-align: center;'>Visualization of team performance over the 25/26 season</h3>", 
                unsafe_allow_html=True)

            st.image("../image/logo_team_performance.png") # Using the 1st image banner

            # Subtitle
            st.markdown(
                "<h4 style='text-align: center;'>Presentation</h4>", 
                unsafe_allow_html=True)

            # Project description
            st.markdown(
                """
                <p style="text-align: justify;">
                The goal is to <strong>visualize team performances during the 25/26 season</strong>.
                The data of players comes from Opta The Analyst, Fbref and Transfermarkt.
                </p>
                <p style="text-align: justify;">
                The analysis will cover the 25/26 season for the following competitions:
                <strong>Ligue 1, Bundesliga, Premier League, La Liga, Serie A</strong>.
                </p>

                <br>

                <ul>
                    <li><strong>üìä Team Analysis</strong>: Analyze the team of your choice through various statistics</li>
                    <li><strong>ü•ä Team Comparison</strong>: Compare two teams</li>
                    <li><strong>üèÜ Team Ranking (Aggregate Statistics by Category) </strong>: Rank teams based on a chosen aggregate statistic by category according to their position</li>
                    <li><strong>ü•á Team Ranking (Raw Statistics) </strong>: Rank teams based on a chosen raw statistic</li>
                    <li><strong>‚≠ê Top </strong> : Establishing a ranking of teams based on statistics</li>
                </ul>

                <br>

                For more details about this project, you can refer to:
                <ul>
                    <li><em>The project documentation</em></li>
                    <li><a href="https://github.com/football-labs/Fotball-labs" target="_blank">The code used to build the application</a></li>
                </ul>
                """, unsafe_allow_html=True
            )
        else :
            # T√≠tulo de la p√°gina
            st.markdown(
                "<h3 style='text-align: center;'>Visualizaci√≥n del rendimiento de los equipos durante la temporada 25/26</h3>", 
                unsafe_allow_html=True)

            st.image("../image/logo_team_performance.png") # Usando el primer banner de imagen

            # Subt√≠tulo
            st.markdown(
                "<h4 style='text-align: center;'>Presentaci√≥n</h4>", 
                unsafe_allow_html=True)

            # Descripci√≥n del proyecto
            st.markdown(
                """
                <p style="text-align: justify;">
                El objetivo es <strong>visualizar el rendimiento de los equipos durante la temporada 25/26</strong>.
                Los datos de los jugadores provienen de Opta The Analyst, Fbref y Transfermarkt.
                </p>
                <p style="text-align: justify;">
                El an√°lisis abarcar√° la temporada 25/26 para las siguientes competiciones:
                <strong>Ligue 1, Bundesliga, Premier League, La Liga, Serie A</strong>.
                </p>

                <br>

                <ul>
                    <li><strong>üìä An√°lisis de equipos</strong>: Analizar el equipo de tu elecci√≥n a trav√©s de varias estad√≠sticas</li>
                    <li><strong>ü•ä Comparaci√≥n de equipos</strong>: Comparar dos equipos</li>
                    <li><strong>üèÜ Clasificaci√≥n de equipos (Estad√≠sticas agregadas por categor√≠a) </strong>: Clasificar a los equipos seg√∫n una estad√≠stica agregada por categor√≠a de acuerdo con su posici√≥n</li>
                    <li><strong>ü•á Clasificaci√≥n de equipos (Estad√≠sticas brutas) </strong>: Clasificar a los equipos seg√∫n una estad√≠stica bruta elegida</li>
                    <li><strong>‚≠ê Top </strong>: Establecer una clasificaci√≥n de equipos basada en estad√≠sticas</li>
                </ul>

                <br>

                Para m√°s detalles sobre este proyecto, puedes consultar:
                <ul>
                    <li><em>La documentaci√≥n del proyecto</em></li>
                    <li><a href="https://github.com/football-labs/Fotball-labs" target="_blank">El c√≥digo utilizado para construir la aplicaci√≥n</a></li>
                </ul>
                """, unsafe_allow_html=True
            )
                    

    elif selected in ["√âquipe", "Team", "Equipo"]:
        if lang == "Fran√ßais":
            # Afficher le titre
            st.markdown("<h4 style='text-align: center;'>üìä Analyse d'une √©quipe</h4>", unsafe_allow_html=True)
            # Charger les donn√©es
            df = pd.read_csv('../data/team/fbref_analyst_joined.csv')
            info_player = pd.read_csv('../data/player/database_player.csv')

            championship_names = [''] + sorted(df['championship_name'].dropna().unique().tolist()) # Extraire la liste des championnats

            selected_championship = st.sidebar.selectbox("Choisissez un championnat :", championship_names) # S√©lection de championnat

            championship_data = df[df['championship_name'] == selected_championship]
                    
            teams_names = [''] + sorted(championship_data['team_code'].dropna().unique().tolist()) # Extraire la liste des √©quipes dans le championnat choisi

            selected_team = st.sidebar.selectbox("Choisissez une √©quipe :", teams_names) # S√©lection de l'√©quipe

            # Si un championnat est s√©lectionn√©, on cache l‚Äôimage   
            if not selected_championship or not selected_team:
                # Aucun championnat s√©lectionn√© ‚Üí afficher l'image d'intro
                st.image("../image/championship_analysis.jpg") # Utilisation de la 1er banni√®re en image
                st.info("D√©rouler la barre lat√©rale pour choisir la langue et le championnat √† analyser")
            else:
                team_data = df[df['team_code'] == selected_team].iloc[0] # Filtrer le DataFrame pour l'√©quipe s√©lectionn√©e
                pays = translate_country(team_data['country'], lang="fr") # On traduit le nom du pays

                # On indique le noms des colonnes utilis√©es
                df_team_col = "team_code"     # dans df
                club_col = "club_name"     # dans info_player
                value_col = "marketValue"  # dans info_player
                name_col = "player_name"      # dans info_player
                rating_col = "rating"         # dans info_player

                team_df_name = str(team_data[df_team_col]) # Nom de club c√¥t√© info_player apr√®s mapping
                team_info_name = df_to_info.get(team_df_name, team_df_name)

                subset = info_player[info_player[club_col] == team_info_name].copy() # Filtrer les joueurs du club s√©lectionn√©

                # Calculer total et moyenne des valeurs sur le march√© des joueurs par √©quipe
                if subset.empty:
                    valeur_effectif_fmt = "Non connu"
                    valeur_par_joueur_fmt = "Non connu"
                else:
                    total_value = subset[value_col].sum(min_count=1)
                    n_players = len(subset)

                    if pd.isna(total_value) or n_players == 0:
                        valeur_effectif_fmt = "Non connu"
                        valeur_par_joueur_fmt = "Non connu"
                    else:
                        valeur_effectif_fmt = format_market_value(total_value)
                        valeur_par_joueur_fmt = format_market_value(total_value / n_players)

                # √âquipe (image √† gauche, infos √† droite)
                st.markdown(f"""
                <div style="display: flex; flex-direction: row; justify-content: space-between; gap: 2rem; flex-wrap: nowrap; align-items: center; overflow-x: auto;">

                <div style="flex: 1; text-align: center; min-width: 180px;">
                    <img src="{team_data['team_logo']}" style="width: 100%; max-width: 150px; border-radius: 10px;">
                </div>

                <div style="flex: 2; min-width: 180px;">
                    <p><strong>Nom :</strong> {team_data['team_code']}</p>
                    <p><strong>Saison :</strong> {team_data['season_name']}</p>
                    <p><strong>Ligue :</strong> {team_data['championship_name']}</p>
                    <p><strong>Pays :</strong> {pays}</p>
                    <p><strong>Power Ranking :</strong> 30√®me (F)</p>
                </div>

                <div style="flex: 2; min-width: 280px;">
                    <p><strong>Classement :</strong> {team_data['rank_league']}</p>
                    <p><strong>Pts :</strong> {int(team_data['pts_league'])}</p>
                    <p><strong>Diff√©rence de buts :</strong> {int(team_data['Team_Success_+/___ptime'])}</p>
                    <p><strong>Style de jeu Offensif :</strong> Jeu d'alternance (F)</p>
                    <p><strong>Style de jeu D√©fensif :</strong> Pressing Haut (F)</p>
                </div>

                <div style="flex: 2; min-width: 280px;">
                    <p><strong>√Çge moyen :</strong> {team_data['Age__std']}</p>
                    <p><strong>Taille effectif :</strong> {int(team_data['#_Pl__std']) if pd.notna(team_data['#_Pl__std']) else "-"}</p>
                    <p><strong>Valeur effectif :</strong> {valeur_effectif_fmt}</p>
                    <p><strong>Valeur par joueur :</strong> {valeur_par_joueur_fmt}</p>
                    <p><strong>Salaire annuel :</strong> {format_market_value(team_data['Annual Wages'])}</p>
                </div>

                </div>
                """, unsafe_allow_html=True)

                # On d√©finit par d√©faut les Top 5
                top5_rating_list = ["Non disponible"]
                top5_valued_list = ["Non disponible"]

                # On calcule le Top 5 joueurs de la saison (par rating) et le Top 5 joueurs les plus valoris√©s (par marketValue)
                if not subset.empty and {name_col, rating_col, value_col}.issubset(subset.columns):
                    df_tmp = subset.copy()

                    # Top 5 joueurs de la saison (par rating)
                    df_tmp["rating_num"] = pd.to_numeric(df_tmp[rating_col], errors="coerce")
                    top_rating_df = (
                        df_tmp.dropna(subset=["rating_num"])
                            .sort_values("rating_num", ascending=False)
                            .head(5)
                    )
                    if not top_rating_df.empty:
                        # Arrondi √† l'entier
                        top5_rating_list = [
                            f"{row[name_col]} ({int(round(row['rating_num']))})"
                            for _, row in top_rating_df.iterrows()
                        ]

                    # Top 5 joueurs les plus valoris√©s (par marketValue)
                    df_tmp["mv_num"] = pd.to_numeric(df_tmp[value_col], errors="coerce")
                    if df_tmp["mv_num"].notna().any():
                        top_valued_df = df_tmp.sort_values("mv_num", ascending=False).head(5)
                        items = []
                        for _, row in top_valued_df.iterrows():
                            if pd.notna(row["mv_num"]):
                                s = format_market_value(int(round(row["mv_num"])))
                                s = re.sub(r'(\d+)\.0(?=\s*[A-Za-z])', r'\1', s)  # On enl√®ve les .0M ‚Ç¨ dans l'affichage
                                items.append(f"{row[name_col]} ({s})")
                        top5_valued_list = items if items else ["Non disponible"]
                    else:
                        top_valued_df = df_tmp.sort_values(value_col, ascending=False).head(5)
                        if not top_valued_df.empty:
                            items = []
                            for _, row in top_valued_df.iterrows():
                                s = format_market_value(row[value_col])
                                s = re.sub(r'(\d+)\.0(?=\s*[A-Za-z])', r'\1', s)
                                items.append(f"{row[name_col]} ({s})")
                            top5_valued_list = items
                        else:
                            top5_valued_list = ["Non disponible"]

                # On affiche les tops
                col1, col2 = st.columns(2)

                with col1:
                    st.markdown("<h5>üèÖ Top 5 joueurs de la saison</h5>", unsafe_allow_html=True)
                    if top5_rating_list == ["Non disponible"]:
                        st.write("Non disponible")
                    else:
                        st.write("\n".join([f"- {x}" for x in top5_rating_list]))

                with col2:
                    st.markdown("<h5>üíé Top 5 joueurs les plus valoris√©s</h5>", unsafe_allow_html=True)
                    if top5_valued_list == ["Non disponible"]:
                        st.write("Non disponible")
                    else:
                        st.write("\n".join([f"- {x}" for x in top5_valued_list]))

                # Filtre
                st.markdown("<p style='text-align:center; margin-bottom:0'>En comparaison avec :</p>", unsafe_allow_html=True)

                c1, c2, c3 = st.columns([1.6, 2, 1])

                with c2:
                    comparison_filter = st.radio(
                        label="En comparaison avec",         
                        options=["Big 5", "Championnat"],
                        index=0,
                        horizontal=True,
                        label_visibility="collapsed",         
                        key="comparison_filter_radio"  
                    )

                filter_arg = {"Big 5": None, "Championnat": "championnat"}[comparison_filter]

                # Groupe filtr√© selon le filtre s√©lectionn√©
                if filter_arg is None:
                    group_df = df  # Pas de filtre
                else:  # "championnat"
                    group_df = df[df['championship_name'] == team_data['championship_name']]

                similar_df = find_similar_teams(selected_team, df, filter_type=filter_arg)

                # Affichage du titre et du tableau
                if not similar_df.empty:
                    # Titre centr√©
                    st.markdown(
                        f"<h4 style='text-align:center;'>√âquipes similaires √† {team_data['team_code']}</h4>",
                        unsafe_allow_html=True
                    )

                    # DataFrame centr√©
                    d1, d2, d3 = st.columns([0.1, 0.8, 0.1])  # ajuste les ratios si besoin
                    with d2:
                        st.dataframe(similar_df, use_container_width=True)

        else:
            st.info("Autre langues")

        # ...
    elif selected in ["Duel", "F2F", "Duelo"]:
        st.header("‚öñÔ∏è Comparaison entre √©quipes/comp√©titions")
        # ...
    elif selected == "Stats +":
        st.header("üìà Stats aggr√©g√©es par cat√©gorie")
        # ...
    elif selected == "Stats":
        st.header("üìã Stats brutes")
        # ...
    elif selected in ["Top"]:
        st.header("üèÖ Power Ranking")
        # ...

else:
    # MENU JOUEURS
    if lang == "Fran√ßais":
        menu_labels = ["Menu", "Joueur", "Duel", "Stats +", "Stats", "Scout"]
    elif lang == "English":
        menu_labels = ["Home", "Player", "F2F", "Stats +", "Stats", "Scout"]
    else:
        menu_labels = ["Inicio", "Atleta", "Duelo", "Stats +", "Stats", "Scout"]

    selected = option_menu(
        menu_title=None,
        options=menu_labels,
        icons=["house", "person", "crosshair", "trophy", "list-ol", "binoculars"],
        orientation="horizontal",
    )

    # Code de la partie Joueur / Code of the Player part / C√≥digo de la parte Jugador
    if selected in ["Menu", "Home", "Inicio"]:
        if lang == "Fran√ßais":
            # Titre de la page
            st.markdown(
                "<h3 style='text-align: center;'>Visualisation des performances des joueurs sur la saison 25/26</h3>", 
                unsafe_allow_html=True)

            st.image("../image/logo_player_performance.png") # Utilisation de la 1er banni√®re en image

            # Sous-titre
            st.markdown(
                "<h4 style='text-align: center;'>Pr√©sentation</h4>", 
                unsafe_allow_html=True)

            # Description du projet
            st.markdown(
                """
                <p style="text-align: justify;">
                L'objectif est de <strong>visualiser les performances des joueurs sur la saison 25/26</strong>.
                Les donn√©es des joueurs proviennent de Fbref et Transfermarkt.
                </p>

                <p style="text-align: justify;">
                Ainsi, l'analyse portera sur la saison 25/26 pour les comp√©titions suivantes :
                <strong>Ligue 1, Bundesliga, Premier League, La Liga, Serie A</strong>.
                </p>

                <br>

                <ul>
                    <li><strong>üìä Analyse d'un Joueur</strong> : Analyse du joueur de votre choix √† travers plusieurs statistiques</li>
                    <li><strong>ü•ä Comparaison entre Joueurs</strong> : Analyse comparative entre deux joueurs du m√™me poste</li>
                    <li><strong>üèÜ Classement des joueurs (Stats Aggr√©g√©es par Cat√©gorie) </strong> : Classement des joueurs par performance selon une statistique aggr√©g√©e par cat√©gorie choisie</li>
                    <li><strong>ü•á Classement des joueurs (Stats Brutes) </strong> : Classement des joueurs par performance selon une statistique brute choisie</li>
                    <li><strong>üîé Scouting </strong> : √âtablissement d'une liste de joueurs collant aux crit√®res choisis</li>
                </ul>

                <br>

                Pour plus de d√©tails sur ce projet, vous avez √† votre disposition :
                <ul>
                    <li><em>La documentation du projet</em></li>
                    <li><a href="https://github.com/football-labs/Fotball-labs" target="_blank">Le code associ√© √† l'application</a></li>
                </ul>
                """,
                unsafe_allow_html=True
            )

        elif lang == "English":
            # Page title
            st.markdown(
                "<h3 style='text-align: center;'>Visualization of player performance over the 25/26 season</h3>", 
                unsafe_allow_html=True)

            st.image("../image/logo_player_performance.png") # Using the 1st image banner

            # Subtitle
            st.markdown(
                "<h4 style='text-align: center;'>Presentation</h4>", 
                unsafe_allow_html=True)

            # Project description
            st.markdown(
                """
                <p style="text-align: justify;">
                The goal is to <strong>visualize player performances during the 25/26 season</strong>.
                The data of players comes from Fbref and Transfermarkt.
                </p>
                <p style="text-align: justify;">
                The analysis will cover the 25/26 season for the following competitions:
                <strong>Ligue 1, Bundesliga, Premier League, La Liga, Serie A</strong>.
                </p>

                <br>

                <ul>
                    <li><strong>üìä Player Analysis</strong>: Analyze the player of your choice through various statistics</li>
                    <li><strong>ü•ä Player Comparison</strong>: Compare two players who play in the same position</li>
                    <li><strong>üèÜ Player Ranking (Aggregate Statistics by Category) </strong>: Rank players based on a chosen aggregate statistic by category according to their position</li>
                    <li><strong>ü•á Player Ranking (Raw Statistics) </strong>: Rank players based on a chosen raw statistic</li>
                    <li><strong>üîé Scouting </strong> : Drawing up a list of players matching the chosen criteria</li>
                </ul>

                <br>

                For more details about this project, you can refer to:
                <ul>
                    <li><em>The project documentation</em></li>
                    <li><a href="https://github.com/football-labs/Fotball-labs" target="_blank">The code used to build the application</a></li>
                </ul>
                """, unsafe_allow_html=True
            )
        else:
            # T√≠tulo de la p√°gina
            st.markdown(
                "<h3 style='text-align: center;'>Visualizaci√≥n del rendimiento de los jugadores durante la temporada 25/26</h3>", 
                unsafe_allow_html=True)

            st.image("../image/logo_player_performance.png") # Usando el primer banner de imagen

            # Subt√≠tulo
            st.markdown(
                "<h4 style='text-align: center;'>Presentaci√≥n</h4>", 
                unsafe_allow_html=True)

            # Descripci√≥n del proyecto
            st.markdown(
                """
                <p style="text-align: justify;">
                El objetivo es <strong>visualizar el rendimiento de los jugadores durante la temporada 25/26</strong>.
                Los datos de los jugadores provienen de Fbref y Transfermarkt.
                </p>
                <p style="text-align: justify;">
                El an√°lisis abarcar√° la temporada 25/26 para las siguientes competiciones:
                <strong>Ligue 1, Bundesliga, Premier League, La Liga, Serie A</strong>.
                </p>

                <br>

                <ul>
                    <li><strong>üìä An√°lisis de jugadores</strong>: Analizar al jugador de tu elecci√≥n a trav√©s de varias estad√≠sticas</li>
                    <li><strong>ü•ä Comparaci√≥n de jugadores</strong>: Comparar dos jugadores que juegan en la misma posici√≥n</li>
                    <li><strong>üèÜ Clasificaci√≥n de jugadores (Estad√≠sticas agregadas por categor√≠a) </strong>: Clasificar a los jugadores seg√∫n una estad√≠stica agregada por categor√≠a de acuerdo con su posici√≥n</li>
                    <li><strong>ü•á Clasificaci√≥n de jugadores (Estad√≠sticas brutas) </strong>: Clasificar a los jugadores seg√∫n una estad√≠stica bruta elegida</li>
                    <li><strong>üîé Scouting </strong>: Elaborar una lista de jugadores que cumplan con los criterios seleccionados</li>
                </ul>

                <br>

                Para m√°s detalles sobre este proyecto, puedes consultar:
                <ul>
                    <li><em>La documentaci√≥n del proyecto</em></li>
                    <li><a href="https://github.com/football-labs/Fotball-labs" target="_blank">El c√≥digo utilizado para construir la aplicaci√≥n</a></li>
                </ul>
                """, unsafe_allow_html=True
            )
      

    elif selected in ["Joueur", "Player", "Atleta"]:
        if lang == "Fran√ßais":
            # Afficher le titre
            st.markdown("<h4 style='text-align: center;'>üìä Analyse d'un joueur</h4>", unsafe_allow_html=True)

            df = pd.read_csv('../data/player/database_player.csv') # Charger les donn√©es

            player_names = [''] + sorted(df['player_name'].dropna().unique().tolist()) # Extraire la liste des joueurs

            selected_player = st.sidebar.selectbox("Choisissez un joueur :", player_names) # S√©lection de joueur

            # Si un joueur est s√©lectionn√©e, on cache l‚Äôimage   
            if not selected_player:
                # Aucun joueur s√©lectionn√© ‚Üí afficher l'image d'intro
                st.image("../image/player_analysis.jpg") # Utilisation de la 1er banni√®re en image
                st.info("D√©rouler la barre lat√©rale pour choisir la langue et le joueur √† analyser")
            else:
                player_data = df[df['player_name'] == selected_player].iloc[0] # Filtrer le DataFrame pour le joueur s√©lectionn√©

                # R√©cup√©ration des informations et traductions associ√©es en fran√ßais si besoin
                pays = translate_country(player_data['nationality'], lang="fr")
                poste = translate_position(player_data['position'], lang="fr")

                shirt_raw = player_data.get("shirtNumber")
                if shirt_raw is not None and not (isinstance(shirt_raw, float) and pd.isna(shirt_raw)):
                    digits = re.sub(r"\D+", "", str(shirt_raw))
                    shirt_num = digits if digits else None
                else:
                    shirt_num = None

                foot_lbl = translate_foot(player_data.get("foot"), lang="fr")
                position_other_translated = translate_position_list(player_data.get("position_other"), lang="fr")
                agent_name = player_data.get("agent_name")
                agent_name = None if (agent_name is None or (isinstance(agent_name, float) and pd.isna(agent_name)) or str(agent_name).strip() == "") else str(agent_name).strip()
                outfitter = player_data.get("outfitter")
                outfitter = None if (outfitter is None or (isinstance(outfitter, float) and pd.isna(outfitter)) or str(outfitter).strip() == "") else str(outfitter).strip()

                shirt_num = shirt_num if shirt_num is not None else "Non connu"
                foot_lbl = foot_lbl if foot_lbl is not None else "Non connu"
                position_other = position_other_translated if position_other_translated is not None else "Aucun"
                agent_name = agent_name if agent_name is not None else "Non connu"
                outfitter = outfitter if outfitter is not None else "Non connu"

                st.markdown("<h4 style='text-align: center;'>Profil du joueur</h4>", unsafe_allow_html=True)

                st.markdown(f"""
                <div style="display: flex; flex-direction: row; justify-content: space-between; gap: 2rem; flex-wrap: nowrap; align-items: center; overflow-x: auto;">

                <div style="flex: 1; text-align: center; min-width: 180px;">
                    <img src="{player_data['imageUrl']}" style="width: 100%; max-width: 150px; border-radius: 10px;">
                </div>

                <div style="flex: 2; min-width: 280px;">
                    <p><strong>Nom :</strong> {player_data['player_name']}</p>
                    <p><strong>√Çge :</strong> {int(player_data['Age']) if pd.notna(player_data['Age']) else "-"}</p>
                    <p><strong>Pays :</strong> {pays}</p>
                    <p><strong>Club :</strong> {player_data['club_name']}</p>
                    <p><strong>Poste :</strong> {poste}</p>
                </div>

                <div style="flex: 2; min-width: 280px;">
                    <p><strong>Taille :</strong> {int(player_data['height']) if pd.notna(player_data['height']) else "-" } cm</p>
                    <p><strong>Valeur marchande :</strong> {format_market_value(player_data['marketValue'])}</p>
                    <p><strong>Fin de contrat :</strong> {player_data['contract'] if pd.notna(player_data['contract']) else "-"}</p>
                    <p><strong>Matches jou√©s :</strong> {int(player_data['MP']) if pd.notna(player_data['MP']) else "-"}</p>
                    <p><strong>Minutes jou√©es :</strong> {int(player_data['Min']) if pd.notna(player_data['Min']) else "-"}</p>
                </div>

                <div style="flex: 2; min-width: 280px;">
                    <p><strong>Num√©ro :</strong> {shirt_num}</p>
                    <p><strong>Pied fort :</strong> {foot_lbl}</p>
                    <p><strong>Autre(s) poste(s) :</strong> {position_other_translated}</p>
                    <p><strong>Agent :</strong> {agent_name}</p>
                    <p><strong>√âquipementier :</strong> {outfitter}</p>
                </div>

                </div>
                """, unsafe_allow_html=True)

                # Filtre unique pour radar + similarit√©
                comparison_filter = st.radio(
                    "En comparaison √† son poste : ",
                    options=[
                        "Vue globale",
                        "Championnat",
                        "Tranche d‚Äô√¢ge",
                        "Pays"
                    ],
                    index=0,
                    horizontal=True
                )

                filter_arg = {
                    "Vue globale": None,
                    "Championnat": "championnat",
                    "Tranche d‚Äô√¢ge": "tranche_age",
                    "Pays": "pays"
                }[comparison_filter]

                poste_cat = position_category.get(player_data['position'], None)

                # Glossaire des statistiques associ√©es
                with st.expander(" Glossaire des statistiques"):
                    if poste_cat:

                        if poste_cat == "Gardiens de but":
                            st.markdown("""
                            - **GA_per90** : Buts encaiss√©s par 90 minutes 
                            - **PSxG_per90** : Post-Shot Expected Goals par 90 minutes
                            - **/90 (PSxG-GA/90)** : Diff√©rence entre PSxG et buts encaiss√©s par 90 minutes
                            - **Save%** : Pourcentage d‚Äôarr√™ts effectu√©s  
                            - **PSxG+/-** : Diff√©rence entre les PSxG (xG post-tir) et buts encaiss√©s  
                            - **Err_per90** : Erreurs conduisant √† un tir adverse par 90 minutes
                            - **Launch%** : Pourcentage de passes longues  
                            - **AvgLen** : Longueur moyenne des passes (en yards)  
                            - **Cmp%** : Pourcentage de passes r√©ussies  
                            - **AvgDist** : Distance moyenne des passes (en yards)  
                            - **#OPA_per90** : Actions d√©fensives hors de la surface par 90 minutes  
                            - **Stp%** : Pourcentage de centres arr√™t√©s dans la surface  
                            """)

                        elif poste_cat == "D√©fenseurs centraux":
                            st.markdown("""
                            - **G-PK_per90** : Buts marqu√©es - p√©naltys inscrits par 90 minutes
                            - **PrgP_per90** : Passes progressives par 90 minutes
                            - **Cmp%** : Pourcentage de passes r√©ussies
                            - **xAG_per90** : Expected Assisted Goals par 90 minutes
                            - **PrgC_per90** : Conduites progressives par 90 minutes
                            - **Err_per90** : Erreurs menant √† un tir adverse
                            - **Tkl%** : Pourcentage de tacles effectu√©s
                            - **Int_per90** : Interceptions par 90 minutes
                            - **Tkl_per90** : Tacles par 90 minutes
                            - **CrdY_per90** : Cartons jaunes par 90 minutes
                            - **Won_per90** : Duels a√©riens gagn√©s par 90 minutes
                            - **Won%** : Pourcentage de duels a√©riens gagn√©s
                            """)

                        elif poste_cat == "D√©fenseurs lat√©raux":
                            st.markdown("""
                            - **G-PK_per90** : Buts marqu√©es - p√©naltys inscrits par 90 minutes
                            - **PrgP_per90** : Passes progressives par 90 minutes
                            - **Cmp%** : Pourcentage de passes r√©ussies
                            - **xAG_per90** : Expected Assisted Goals par 90 minutes
                            - **PrgC_per90** : Conduites progressives par 90 minutes
                            - **Err_per90** : Erreurs menant √† un tir adverse
                            - **Tkl%** : Pourcentage de tacles effectu√©s 
                            - **Int_per90** : Interceptions par 90 minutes
                            - **Tkl_per90** : Tacles par 90 minutes
                            - **CrdY_per90** : Cartons jaunes par 90 minutes
                            - **Won_per90** : Duels a√©riens gagn√©s par 90 minutes
                            - **Won%** : Pourcentage de duels a√©riens gagn√©s 
                            """)

                        elif poste_cat == "Milieux de terrain":
                            st.markdown("""
                            - **G-PK_per90** : Buts marqu√©es - p√©naltys inscrits par 90 minutes
                            - **PrgP_per90** : Passes progressives par 90 minutes
                            - **PrgR_per90** : Passes progressives re√ßues par 90 minutes
                            - **Cmp%** : Pourcentage de passes r√©ussies
                            - **xAG_per90** : Expected Assisted Goals par 90 minutes
                            - **PrgC_per90** : Conduites progressives par 90 minutes
                            - **Fld_per90** : Fautes subies par 90 minutes
                            - **Err_per90** : Erreurs menant √† un tir adverse
                            - **Tkl%** : Pourcentage de tacles effectu√©s 
                            - **Int_per90** : Interceptions par 90 minutes
                            - **CrdY_per90** : Cartons jaunes par 90 minutes
                            - **Won%** : Pourcentage de duels a√©riens gagn√©s 
                            """)

                        elif poste_cat == "Milieux offensifs / Ailiers":
                            st.markdown("""
                            - **npxG_per90** : Non-penalty Expected Goals par 90 minutes
                            - **G-PK_per90** : Buts marqu√©es - p√©naltys inscrits par 90 minutes
                            - **G-xG_per90** : Expected Goals par 90 minutes
                            - **PrgP_per90** : Passes progressives par 90 minutes
                            - **PrgR_per90** : Passes progressives re√ßues par 90 minutes
                            - **Cmp%** : Pourcentage de passes r√©ussies
                            - **xAG_per90** : Expected Assisted Goals par 90 minutes
                            - **Succ_per90** : Dribbles r√©ussis par 90 minutes
                            - **Succ%** : Pourcentage de dribbles r√©ussis
                            - **PrgC_per90** : Conduites progressives par 90 minutes
                            - **Fld_per90** : Fautes subies par 90 minutes
                            - **Dis_per90** : Ballons perdus par 90 minutes
                            """)

                        elif poste_cat == "Attaquants":
                            st.markdown("""
                            - **npxG_per90** : Non-penalty Expected Goals par 90 minutes
                            - **Sh_per90** : Tirs tent√©s par 90 minutes
                            - **G-PK_per90** : Buts marqu√©es - p√©naltys inscrits par 90 minutes
                            - **G-xG_per90** : Expected Goals par 90 minutes
                            - **G/Sh** : Buts par tir  
                            - **PrgP_per90** : Passes progressives par 90 minutes  
                            - **PrgR_per90** : Passes progressives re√ßues par 90 minutes
                            - **Cmp%** : Pourcentage de passes r√©ussies
                            - **xAG_per90** : Expected Assisted Goals par 90 minutes
                            - **Succ_per_90** : Dribbles r√©ussis par 90 minutes  
                            - **PrgC_per90** : Conduites progressives par 90 minutes  
                            - **Dis_per90** : Ballons perdus par 90 minutes  
                            """)

                if poste_cat and poste_cat in category_stats:
                    stats_cols = [col for col in category_stats[poste_cat] if col in df.columns]
                    player_rating = player_data.get("rating", None)

                    # Groupe filtr√© selon le filtre s√©lectionn√© par l'utilisateur
                    if filter_arg is None:
                        group_df = df[df['position'].map(position_category.get) == poste_cat]
                    elif filter_arg == "championnat":
                        group_df = df[
                            (df['position'] == player_data['position']) &
                            (df['Comp'] == player_data['Comp'])
                        ]
                    elif filter_arg == "pays":
                        group_df = df[
                            (df['position'] == player_data['position']) &
                            (df['nationality'] == player_data['nationality'])
                        ]
                    elif filter_arg == "tranche_age":
                        age = player_data['Age']
                        if pd.isna(age):
                            group_df = df[df['position'].map(position_category.get) == poste_cat]
                        elif age < 23:
                            group_df = df[(df['position'] == player_data['position']) & (df['Age'] < 23)]
                        elif 24 <= age <= 29:
                            group_df = df[(df['position'] == player_data['position']) & (df['Age'].between(24, 29))]
                        else:
                            group_df = df[(df['position'] == player_data['position']) & (df['Age'] >= 30)]

                    nb_players = len(group_df) # Calculer le nombre de joueur dans le groupe filtr√©

                    # Si il y a moins de 5 joueurs, on n'affiche pas de radar pour le groupe associ√©
                    if nb_players >= 5:
                        radar_df = group_df[['player_name'] + stats_cols].dropna(subset=stats_cols).copy()
                        radar_df = radar_df.set_index('player_name')

                        # On s'assure que le joueur est pr√©sent dans la cat√©gorie de poste
                        if player_data['player_name'] not in radar_df.index:
                            radar_df.loc[player_data['player_name']] = pd.Series(player_data).reindex(stats_cols)

                        radar_vals = radar_df[stats_cols].apply(pd.to_numeric, errors='coerce')

                        # On √©tablit le rang en percentile par cat√©gorie pour chaque joueur (0 = plus faible, 1 = plus √©lev√©)
                        rank_pct = radar_vals.rank(pct=True, method='average', ascending=True)

                        # On inverse les m√©triques o√π "plus petit = mieux"
                        invert_stats = globals().get("invert_stats", set())
                        for col in stats_cols:
                            if col in invert_stats:
                                rank_pct[col] = 1 - rank_pct[col]

                        # On normalise le profil du joueur en percentiles
                        player_norm = rank_pct.loc[player_data['player_name']].reindex(stats_cols).fillna(0)

                        # On calcule la m√©diane selon la cat√©gorie de poste
                        group_median = (
                            rank_pct.drop(index=player_data['player_name'], errors='ignore')
                                    .median()
                                    .reindex(stats_cols)
                                    .fillna(0)
                        )

                        # Calcul de la note si elle existe
                        rating_text = f" - Note : {round(player_rating, 2)}" if player_rating is not None else ""

                        # Affichage du titre avec note
                        st.markdown(
                            f"<h4 style='text-align: center;'>Radar de performance de {player_data['player_name']} vs {nb_players} joueurs dans sa cat√©gorie {rating_text}</h4>",
                            unsafe_allow_html=True
                        )

                        # Construction de la pizza plot (joueur-m√©diane √† son poste) pour les statistiques avanc√©es
                        fig_pizza_stat_adv = plot_pizza_radar(
                            labels=stats_cols,
                            player_values=player_norm * 100,
                            median_values=group_median * 100,
                            title=f"Statistiques avanc√©es de {player_data['player_name']} de vs M√©diane √† son poste",
                            legend_labels=(player_data['player_name'], "M√©diane poste")
                        )

                        # Liste des colonnes √† afficher selon le poste
                        if poste_cat == "Gardiens de but":
                            pizza_cols = [
                                "score_goal_scoring_conceded", "score_efficiency", "score_error_fouls",
                                "score_short_clearance", "score_long_clearance", "score_positioning", "score_aerial_defense"
                            ]
                        else:
                            pizza_cols = [
                                "score_goal_scoring_created", "score_finish", "score_building", "score_creation",
                                "score_dribble", "score_projection", "score_defensive_actions", "score_waste",
                                "score_faults_committed", "score_provoked_fouls", "score_aerial"
                            ]

                        # On garde uniquement les colonnes pr√©sentes
                        pizza_cols = [col for col in pizza_cols if col in df.columns]
                        pizza_labels = [translate_base_stat(col.replace("score_", ""), lang="fr") for col in pizza_cols]
                        # V√©rifie que toutes les colonnes existent pour le joueur
                        if all(col in player_data for col in pizza_cols):

                            player_values = [player_data[col] for col in pizza_cols]

                            # Calcul des valeurs m√©dianes sur le groupe filtr√©
                            group_df_scores = group_df[pizza_cols].dropna()
                            if len(group_df_scores) >= 5:
                                group_median = group_df_scores.median().tolist()

                                player_scaled = [v if pd.notna(v) else 0 for v in player_values]
                                median_scaled = [round(v) for v in group_median]

                                # Construction de la pizza plot (joueur-m√©diane) pour les statistiques de base
                                fig_pizza_stat_basis = plot_pizza_radar(
                                    labels=pizza_labels,
                                    player_values=player_scaled,
                                    median_values=median_scaled,
                                    title=f"Statistiques de base de {player_data['player_name']} vs M√©diane √† son poste",
                                    legend_labels=(player_data['player_name'], "M√©diane poste")
                                )

                                # Affichage dans Streamlit
                                col1, col2 = st.columns(2)
                                with col1:
                                    st.pyplot(fig_pizza_stat_basis)
                                with col2:
                                    st.pyplot(fig_pizza_stat_adv)

                        else:
                            st.info("Pas assez de joueurs dans ce groupe pour g√©n√©rer un radar (minimum requis : 5).")

                similar_df = find_similar_players(selected_player, df, filter_type=filter_arg) # Recherche des joueurs similaires avec le m√™me filtre utilis√©
                if not similar_df.empty:
                    # Affichage du titre
                    st.markdown(
                        f"<h4 style='text-align: center;'>Joueurs similaires √† {player_data['player_name']}</h4>",
                        unsafe_allow_html=True
                    )
                    st.dataframe(similar_df)
                else:
                    st.info("Aucun joueur similaire trouv√© avec les crit√®res s√©lectionn√©s.")


        elif lang == "English":
            # Display the title
            st.markdown("<h4 style='text-align: center;'>üìä Player analysis</h4>", unsafe_allow_html=True)

            df = pd.read_csv('../data/player/database_player.csv') # Collect the data

            player_names = [''] + sorted(df['player_name'].dropna().unique().tolist()) # Extract the list of players

            selected_player = st.sidebar.selectbox("Select a player :", player_names) # Select a player

            # If a player is selected, the image is hidden.   
            if not selected_player:
                # No player selected ‚Üí show intro image
                st.image("../image/player_analysis.jpg")
                st.info("Scroll down the sidebar to select the language and the player you wish to analyze")
            else:
                player_data = df[df['player_name'] == selected_player].iloc[0] # Filter the DataFrame for the selected player

                # R√©cup√©ration des informations
                shirt_raw = player_data.get("shirtNumber")
                if shirt_raw is not None and not (isinstance(shirt_raw, float) and pd.isna(shirt_raw)):
                    digits = re.sub(r"\D+", "", str(shirt_raw))
                    shirt_num = digits if digits else None
                else:
                    shirt_num = None

                foot_lbl = translate_foot(player_data.get("foot"), lang="eng")
                position_other_translated = translate_position_list(player_data.get("position_other"), lang="eng")
                agent_name = player_data.get("agent_name")
                agent_name = None if (agent_name is None or (isinstance(agent_name, float) and pd.isna(agent_name)) or str(agent_name).strip() == "") else str(agent_name).strip()
                outfitter = player_data.get("outfitter")
                outfitter = None if (outfitter is None or (isinstance(outfitter, float) and pd.isna(outfitter)) or str(outfitter).strip() == "") else str(outfitter).strip()

                shirt_num = shirt_num if shirt_num is not None else "Not known"
                foot_lbl = foot_lbl if foot_lbl is not None else "Not known"
                position_other = position_other_translated if position_other_translated is not None else "None"
                agent_name = agent_name if agent_name is not None else "Not known"
                outfitter = outfitter if outfitter is not None else "Not known"

                # Player profile (image on left, info on right)
                st.markdown(
                    f"<h4 style='text-align: center;'>Player profile</h4>",
                    unsafe_allow_html=True
                )

                st.markdown(f"""
                <div style="display: flex; flex-direction: row; justify-content: space-between; gap: 2rem; flex-wrap: nowrap; align-items: center; overflow-x: auto;">

                <div style="flex: 1; text-align: center; min-width: 180px;">
                    <img src="{player_data['imageUrl']}" style="width: 100%; max-width: 150px; border-radius: 10px;">
                </div>

                <div style="flex: 2; min-width: 280px;">
                    <p><strong>Name :</strong> {player_data['player_name']}</p>
                    <p><strong>Age :</strong> {int(player_data['Age']) if pd.notna(player_data['Age']) else "-"}</p>
                    <p><strong>Country :</strong> {player_data['nationality']}</p>
                    <p><strong>Club :</strong> {player_data['club_name']}</p>
                    <p><strong>Position :</strong> {player_data['position']}</p>
                </div>

                <div style="flex: 2; min-width: 280px;">
                    <p><strong>Height :</strong> {int(player_data['height']) if pd.notna(player_data['height']) else "-" } cm</p>
                    <p><strong>Market Value :</strong> {format_market_value(player_data['marketValue'])}</p>
                    <p><strong>Contract :</strong> {player_data['contract'] if pd.notna(player_data['contract']) else "-"}</p>
                    <p><strong>Matches Played :</strong> {int(player_data['MP']) if pd.notna(player_data['MP']) else "-"}</p>
                    <p><strong>Minutes Played :</strong> {int(player_data['Min']) if pd.notna(player_data['Min']) else "-"}</p>
                </div>

                <div style="flex: 2; min-width: 280px;">
                    <p><strong>Number :</strong> {shirt_num}</p>
                    <p><strong>Strong foot :</strong> {foot_lbl}</p>
                    <p><strong>Other(s) position(s) :</strong> {position_other_translated}</p>
                    <p><strong>Agent :</strong> {agent_name}</p>
                    <p><strong>Outfitter :</strong> {outfitter}</p>
                </div>
                </div>
                """, unsafe_allow_html=True)

                # Single filter for radar + similarity
                comparison_filter = st.radio(
                    "Compared to his position :",
                    options=[
                        "Overview",
                        "Championship",
                        "Age group",
                        "Country"
                    ],
                    index=0,
                    horizontal=True
                )

                filter_arg = {
                    "Overview": None,
                    "Championship": "championnat",
                    "Age group": "tranche_age",
                    "Country": "pays"
                }[comparison_filter]

                poste_cat = position_category.get(player_data['position'], None)

                # Glossary of Statistics associated
                with st.expander("Glossary of Statistics"):
                    if poste_cat:
                        if poste_cat == "Gardiens de but":
                            st.markdown("""
                            - **GA_per90**: Goals conceded per 90 minutes  
                            - **PSxG_per90**: Post-Shot Expected Goals per 90 minutes  
                            - **/90 (PSxG-GA/90)**: Difference between PSxG and goals conceded per 90 minutes  
                            - **Save%**: Save percentage  
                            - **PSxG+/-**: Difference between PSxG and goals conceded  
                            - **Err_per90**: Errors leading to a shot per 90 minutes  
                            - **Launch%**: Percentage of long passes  
                            - **AvgLen**: Average pass length (in yards)  
                            - **Cmp%**: Pass completion percentage  
                            - **AvgDist**: Average pass distance (in yards)  
                            - **#OPA_per90**: Defensive actions outside the penalty area per 90 minutes  
                            - **Stp%**: Percentage of crosses stopped inside the box 
                            """)

                        elif poste_cat == "D√©fenseurs centraux":
                            st.markdown("""
                            - **G-PK_per90**: Goals scored minus penalties per 90 minutes  
                            - **PrgP_per90**: Progressive passes per 90 minutes  
                            - **Cmp%**: Pass completion percentage  
                            - **xAG_per90**: Expected Assisted Goals per 90 minutes  
                            - **PrgC_per90**: Progressive carries per 90 minutes  
                            - **Err_per90**: Errors leading to a shot  
                            - **Tkl%**: Tackle success rate  
                            - **Int_per90**: Interceptions per 90 minutes  
                            - **Tkl_per90**: Tackles per 90 minutes  
                            - **CrdY_per90**: Yellow cards per 90 minutes  
                            - **Won_per90**: Aerial duels won per 90 minutes  
                            - **Won%**: Aerial duel success rate  
                            """)

                        elif poste_cat == "D√©fenseurs lat√©raux":
                            st.markdown("""
                            - **G-PK_per90**: Goals scored minus penalties per 90 minutes  
                            - **PrgP_per90**: Progressive passes per 90 minutes  
                            - **Cmp%**: Pass completion percentage  
                            - **xAG_per90**: Expected Assisted Goals per 90 minutes  
                            - **PrgC_per90**: Progressive carries per 90 minutes  
                            - **Err_per90**: Errors leading to a shot  
                            - **Tkl%**: Tackle success rate  
                            - **Int_per90**: Interceptions per 90 minutes  
                            - **Tkl_per90**: Tackles per 90 minutes  
                            - **CrdY_per90**: Yellow cards per 90 minutes  
                            - **Won_per90**: Aerial duels won per 90 minutes  
                            - **Won%**: Aerial duel success rate  
                            """)

                        elif poste_cat == "Milieux de terrain":
                            st.markdown("""
                            - **G-PK_per90**: Goals scored minus penalties per 90 minutes  
                            - **PrgP_per90**: Progressive passes per 90 minutes  
                            - **PrgR_per90**: Progressive passes received per 90 minutes  
                            - **Cmp%**: Pass completion percentage  
                            - **xAG_per90**: Expected Assisted Goals per 90 minutes  
                            - **PrgC_per90**: Progressive carries per 90 minutes  
                            - **Fld_per90**: Fouls drawn per 90 minutes  
                            - **Err_per90**: Errors leading to a shot  
                            - **Tkl%**: Tackle success rate  
                            - **Int_per90**: Interceptions per 90 minutes  
                            - **CrdY_per90**: Yellow cards per 90 minutes  
                            - **Won%**: Aerial duel success rate 
                            """)

                        elif poste_cat == "Milieux offensifs / Ailiers":
                            st.markdown("""
                            - **npxG_per90**: Non-penalty Expected Goals per 90 minutes  
                            - **G-PK_per90**: Goals scored minus penalties per 90 minutes  
                            - **G-xG_per90**: Difference between goals and Expected Goals per 90 minutes  
                            - **PrgP_per90**: Progressive passes per 90 minutes  
                            - **PrgR_per90**: Progressive passes received per 90 minutes  
                            - **Cmp%**: Pass completion percentage  
                            - **xAG_per90**: Expected Assisted Goals per 90 minutes  
                            - **Succ_per90**: Successful dribbles per 90 minutes  
                            - **Succ%**: Dribble success rate  
                            - **PrgC_per90**: Progressive carries per 90 minutes  
                            - **Fld_per90**: Fouls drawn per 90 minutes  
                            - **Dis_per90**: Dispossessions per 90 minutes
                            """)

                        elif poste_cat == "Attaquants":
                            st.markdown("""
                            - **npxG_per90**: Non-penalty Expected Goals per 90 minutes  
                            - **Sh_per90**: Shots attempted per 90 minutes  
                            - **G-PK_per90**: Goals scored minus penalties per 90 minutes  
                            - **G-xG_per90**: Difference between goals and Expected Goals per 90 minutes  
                            - **G/Sh**: Goals per shot  
                            - **PrgP_per90**: Progressive passes per 90 minutes  
                            - **PrgR_per90**: Progressive passes received per 90 minutes  
                            - **Cmp%**: Pass completion percentage  
                            - **xAG_per90**: Expected Assisted Goals per 90 minutes  
                            - **Succ_per_90**: Successful dribbles per 90 minutes  
                            - **PrgC_per90**: Progressive carries per 90 minutes  
                            - **Dis_per90**: Dispossessions per 90 minutes 
                            """)

                if poste_cat and poste_cat in category_stats:
                    stats_cols = [col for col in category_stats[poste_cat] if col in df.columns]
                    player_rating = player_data.get("rating", None)

                    # Group filtered according to the selected filter by the user
                    if filter_arg is None:
                        group_df = df[df['position'].map(position_category.get) == poste_cat]
                    elif filter_arg == "championnat":
                        group_df = df[
                            (df['position'] == player_data['position']) &
                            (df['Comp'] == player_data['Comp'])
                        ]
                    elif filter_arg == "pays":
                        group_df = df[
                            (df['position'] == player_data['position']) &
                            (df['nationality'] == player_data['nationality'])
                        ]
                    elif filter_arg == "tranche_age":
                        age = player_data['Age']
                        if pd.isna(age):
                            group_df = df[df['position'].map(position_category.get) == poste_cat]
                        elif age < 23:
                            group_df = df[(df['position'] == player_data['position']) & (df['Age'] < 23)]
                        elif 24 <= age <= 29:
                            group_df = df[(df['position'] == player_data['position']) & (df['Age'].between(24, 29))]
                        else:
                            group_df = df[(df['position'] == player_data['position']) & (df['Age'] >= 30)]

                    nb_players = len(group_df) # Calculation of the length of the group

                    # If the group is less than 5, we don't build the radar
                    if nb_players >= 5:
                        radar_df = group_df[['player_name'] + stats_cols].dropna(subset=stats_cols).copy()
                        radar_df = radar_df.set_index('player_name')

                        # We ensure that the player is present in the position category.
                        if player_data['player_name'] not in radar_df.index:
                            radar_df.loc[player_data['player_name']] = pd.Series(player_data).reindex(stats_cols)

                        radar_vals = radar_df[stats_cols].apply(pd.to_numeric, errors='coerce')

                        # The percentile rank is established for each player by category (0 = lowest, 1 = highest)
                        rank_pct = radar_vals.rank(pct=True, method='average', ascending=True)

                        # We are reversing the metrics where ‚Äòsmaller = better‚Äô
                        invert_stats = globals().get("invert_stats", set())
                        for col in stats_cols:
                            if col in invert_stats:
                                rank_pct[col] = 1 - rank_pct[col]

                        # The player's profile is standardised in percentiles.
                        player_norm = rank_pct.loc[player_data['player_name']].reindex(stats_cols).fillna(0)

                        # The median is calculated according to position category.
                        group_median = (
                            rank_pct.drop(index=player_data['player_name'], errors='ignore')
                                    .median()
                                    .reindex(stats_cols)
                                    .fillna(0)
                        )
                        # Rating calculation if available
                        rating_text = f" - Rating : {round(player_rating, 2)}" if player_rating is not None else ""

                        # Title display with note
                        st.markdown(
                            f"<h4 style='text-align: center;'>Performance radar from {player_data['player_name']} vs {nb_players} players in his category {rating_text}</h4>",
                            unsafe_allow_html=True
                        )
                        
                        # Bulding the pizza plot (player-median) for the advanced statistics
                        fig_pizza_stat_adv = plot_pizza_radar(
                            labels=stats_cols,
                            player_values=player_norm * 100,
                            median_values=group_median * 100,
                            title=f"Advanced statistics of {player_data['player_name']} vs. median at the same position",
                            legend_labels=(player_data['player_name'], "Median position")
                        )

                        # List of columns to be displayed by position
                        if poste_cat == "Gardiens de but":
                            pizza_cols = [
                                "score_goal_scoring_conceded", "score_efficiency", "score_error_fouls",
                                "score_short_clearance", "score_long_clearance", "score_positioning", "score_aerial_defense"
                            ]
                        else:
                            pizza_cols = [
                                "score_goal_scoring_created", "score_finish", "score_building", "score_creation",
                                "score_dribble", "score_projection", "score_defensive_actions", "score_waste",
                                "score_faults_committed", "score_provoked_fouls", "score_aerial"
                            ]

                        # We keep only the columns present
                        pizza_cols = [col for col in pizza_cols if col in df.columns]
                        pizza_labels = [col.replace("score_", "").replace("_", " ").capitalize() for col in pizza_cols]

                        # Checks that all columns exist for the player
                        if all(col in player_data for col in pizza_cols):

                            player_values = [player_data[col] for col in pizza_cols]

                            # Calculation of median values on the filtered group
                            group_df_scores = group_df[pizza_cols].dropna()
                            if len(group_df_scores) >= 5:
                                group_median = group_df_scores.median().tolist()

                                player_scaled = [v if pd.notna(v) else 0 for v in player_values]
                                median_scaled = [round(v) for v in group_median]

                                # Bulding the pizza plot (player-median) for the basic statistics
                                fig_pizza_stat_basis = plot_pizza_radar(
                                    labels=pizza_labels,
                                    player_values=player_scaled,
                                    median_values=median_scaled,
                                    title=f"Basic statistics of {player_data['player_name']} vs. median at the same position",
                                    legend_labels=(player_data['player_name'], "Median position")
                                )

                        # List of columns to be displayed by position
                        if poste_cat == "Gardiens de but":
                            pizza_cols = [
                                "score_goal_scoring_conceded", "score_efficiency", "score_error_fouls",
                                "score_short_clearance", "score_long_clearance", "score_positioning", "score_aerial_defense"
                            ]
                        else:
                            pizza_cols = [
                                "score_goal_scoring_created", "score_finish", "score_building", "score_creation",
                                "score_dribble", "score_projection", "score_defensive_actions", "score_waste",
                                "score_faults_committed", "score_provoked_fouls", "score_aerial"
                            ]

                        # We keep only the columns present
                        pizza_cols = [col for col in pizza_cols if col in df.columns]
                        pizza_labels = [col.replace("score_", "").replace("_", " ").capitalize() for col in pizza_cols]

                        # Checks that all columns exist for the player
                        if all(col in player_data for col in pizza_cols):

                            player_values = [player_data[col] for col in pizza_cols]

                            # Calculation of median values on the filtered group
                            group_df_scores = group_df[pizza_cols].dropna()
                            if len(group_df_scores) >= 5:
                                group_median = group_df_scores.median().tolist()

                                player_scaled = [v if pd.notna(v) else 0 for v in player_values]
                                median_scaled = [round(v) for v in group_median]


                                fig_pizza_stat_basis = plot_pizza_radar(
                                    labels=pizza_labels,
                                    player_values=player_scaled,
                                    median_values=median_scaled,
                                    title="Basic statistics vs. median at the same position",
                                    legend_labels=(player_data['player_name'], "Median position")
                                )

                                # Display in Streamlit
                                col1, col2 = st.columns(2)
                                with col1:
                                    st.pyplot(fig_pizza_stat_basis)
                                with col2:
                                    st.pyplot(fig_pizza_stat_adv)

                    else:
                        st.info("Not enough players in this group to generate a radar (minimum requirement: 5).")

                similar_df = find_similar_players(selected_player, df, filter_type=filter_arg) # Search for similar players using the same filter
                if not similar_df.empty:
                    # Display the title
                    st.markdown(
                        f"<h4 style='text-align: center;'>Players similar to {player_data['player_name']}</h4>",
                        unsafe_allow_html=True
                    )
                    st.dataframe(similar_df)
                else:
                    st.info("Not enough players in this group to generate a radar (minimum requirement: 5).")
        else:
            # T√≠tulo
            st.markdown("<h4 style='text-align: center;'>üìä An√°lisis de un jugador</h4>", unsafe_allow_html=True)

            df = pd.read_csv('../data/player/database_player.csv')  # Cargar datos

            player_names = [''] + sorted(df['player_name'].dropna().unique().tolist())  # Lista de jugadores

            selected_player = st.sidebar.selectbox("Elige un jugador:", player_names)  # Selecci√≥n de jugador

            # Si no hay jugador seleccionado ‚Üí mostrar imagen de introducci√≥n
            if not selected_player:
                st.image("../image/player_analysis.jpg")  # Banner de introducci√≥n
                st.info("Despliega la barra lateral para elegir el idioma y el jugador a analizar")
            else:
                player_data = df[df['player_name'] == selected_player].iloc[0]  # Fila del jugador

                # Recuperaci√≥n de la informaci√≥n y traducciones asociadas, si es necesario
                pais = translate_country(player_data['nationality'], lang="es")
                puesto = translate_position(player_data['position'], lang="es")

                shirt_raw = player_data.get("shirtNumber")
                if shirt_raw is not None and not (isinstance(shirt_raw, float) and pd.isna(shirt_raw)):
                    digits = re.sub(r"\D+", "", str(shirt_raw))
                    shirt_num = digits if digits else None
                else:
                    shirt_num = None

                foot_lbl = translate_foot(player_data.get("foot"), lang="es")
                position_other_translated = translate_position_list(player_data.get("position_other"), lang="es")
                agent_name = player_data.get("agent_name")
                agent_name = None if (agent_name is None or (isinstance(agent_name, float) and pd.isna(agent_name)) or str(agent_name).strip() == "") else str(agent_name).strip()
                outfitter = player_data.get("outfitter")
                outfitter = None if (outfitter is None or (isinstance(outfitter, float) and pd.isna(outfitter)) or str(outfitter).strip() == "") else str(outfitter).strip()

                shirt_num = shirt_num if shirt_num is not None else "Desconocido"
                foot_lbl = foot_lbl if foot_lbl is not None else "Desconocido"
                position_other = position_other_translated if position_other_translated is not None else "Ninguno"
                agent_name = agent_name if agent_name is not None else "Desconocido"
                outfitter = outfitter if outfitter is not None else "Desconocido"

                # Perfil del jugador (imagen a la izquierda, info a la derecha)
                st.markdown("<h4 style='text-align: center;'>Perfil del jugador</h4>", unsafe_allow_html=True)

                st.markdown(f"""
                <div style="display: flex; flex-direction: row; justify-content: space-between; gap: 2rem; flex-wrap: nowrap; align-items: center; overflow-x: auto;">

                <div style="flex: 1; text-align: center; min-width: 180px;">
                    <img src="{player_data['imageUrl']}" style="width: 100%; max-width: 150px; border-radius: 10px;">
                </div>

                <div style="flex: 2; min-width: 280px;">
                    <p><strong>Nombre:</strong> {player_data['player_name']}</p>
                    <p><strong>Edad:</strong> {int(player_data['Age']) if pd.notna(player_data['Age']) else "-"}</p>
                    <p><strong>Pa√≠s:</strong> {pais}</p>
                    <p><strong>Club:</strong> {player_data['club_name']}</p>
                    <p><strong>Posici√≥n:</strong> {puesto}</p>
                </div>

                <div style="flex: 2; min-width: 280px;">
                    <p><strong>Altura:</strong> {int(player_data['height']) if pd.notna(player_data['height']) else "-" } cm</p>
                    <p><strong>Valor de mercado:</strong> {format_market_value(player_data['marketValue'])}</p>
                    <p><strong>Fin de contrato:</strong> {player_data['contract'] if pd.notna(player_data['contract']) else "-"}</p>
                    <p><strong>Partidos jugados:</strong> {int(player_data['MP']) if pd.notna(player_data['MP']) else "-"}</p>
                    <p><strong>Minutos jugados:</strong> {int(player_data['Min']) if pd.notna(player_data['Min']) else "-"}</p>
                </div>

                <div style="flex: 2; min-width: 280px;">
                    <p><strong>N√∫mero :</strong> {shirt_num}</p>
                    <p><strong>Pie fuerte :</strong> {foot_lbl}</p>
                    <p><strong>Otro(s) puesto(s) :</strong> {position_other_translated}</p>
                    <p><strong>Agente :</strong> {agent_name}</p>
                    <p><strong>Fabricante de equipos :</strong> {outfitter}</p>
                </div>
                </div>
                """, unsafe_allow_html=True)

                # Filtro √∫nico para radar + similitud
                comparison_filter = st.radio(
                    "En comparaci√≥n con su posici√≥n:",
                    options=[
                        "Vista general",
                        "Liga",
                        "Tramo de edad",
                        "Pa√≠s"
                    ],
                    index=0,
                    horizontal=True
                )

                # Mapeo de la opci√≥n de UI (ES) a las claves internas usadas en tu l√≥gica
                filter_arg = {
                    "Vista general": None,
                    "Liga": "championnat",
                    "Tramo de edad": "tranche_age",
                    "Pa√≠s": "pays"
                }[comparison_filter]

                # ‚ö†Ô∏è Categor√≠a del puesto: se mantiene en FRANC√âS
                poste_cat = position_category.get(player_data['position'], None)

                # Glosario de estad√≠sticas (poste_cat en franc√©s)
                with st.expander(" Glosario de estad√≠sticas"):
                    if poste_cat:

                        if poste_cat == "Gardiens de but":
                            st.markdown("""
                            - **GA_per90**: Goles encajados por 90 minutos  
                            - **PSxG_per90**: Post-Shot Expected Goals por 90 minutos  
                            - **/90 (PSxG-GA/90)**: Diferencia entre PSxG y goles encajados por 90 minutos  
                            - **Save%**: Porcentaje de paradas  
                            - **PSxG+/-**: Diferencia entre PSxG (xG post-tiro) y goles encajados  
                            - **Err_per90**: Errores que conducen a un tiro rival por 90 minutos  
                            - **Launch%**: Porcentaje de pases largos  
                            - **AvgLen**: Longitud media de pase (yardas)  
                            - **Cmp%**: Porcentaje de pases completados  
                            - **AvgDist**: Distancia media de pase (yardas)  
                            - **#OPA_per90**: Acciones defensivas fuera del √°rea por 90 minutos  
                            - **Stp%**: Porcentaje de centros detenidos dentro del √°rea  
                            """)

                        elif poste_cat == "D√©fenseurs centraux":
                            st.markdown("""
                            - **G-PK_per90**: Goles menos penaltis por 90 minutos  
                            - **PrgP_per90**: Pases progresivos por 90 minutos  
                            - **Cmp%**: Porcentaje de pases completados  
                            - **xAG_per90**: Asistencias esperadas (xAG) por 90 minutos  
                            - **PrgC_per90**: Conducciones progresivas por 90 minutos  
                            - **Err_per90**: Errores que conducen a un tiro rival  
                            - **Tkl%**: Porcentaje de √©xito en entradas  
                            - **Int_per90**: Intercepciones por 90 minutos  
                            - **Tkl_per90**: Entradas por 90 minutos  
                            - **CrdY_per90**: Tarjetas amarillas por 90 minutos  
                            - **Won_per90**: Duelos a√©reos ganados por 90 minutos  
                            - **Won%**: Porcentaje de duelos a√©reos ganados  
                            """)

                        elif poste_cat == "D√©fenseurs lat√©raux":
                            st.markdown("""
                            - **G-PK_per90**: Goles menos penaltis por 90 minutos  
                            - **PrgP_per90**: Pases progresivos por 90 minutos  
                            - **Cmp%**: Porcentaje de pases completados  
                            - **xAG_per90**: Asistencias esperadas (xAG) por 90 minutos  
                            - **PrgC_per90**: Conducciones progresivas por 90 minutos  
                            - **Err_per90**: Errores que conducen a un tiro rival  
                            - **Tkl%**: Porcentaje de √©xito en entradas  
                            - **Int_per90**: Intercepciones por 90 minutos  
                            - **Tkl_per90**: Entradas por 90 minutos  
                            - **CrdY_per90**: Tarjetas amarillas por 90 minutos  
                            - **Won_per90**: Duelos a√©reos ganados por 90 minutos  
                            - **Won%**: Porcentaje de duelos a√©reos ganados  
                            """)

                        elif poste_cat == "Milieux de terrain":
                            st.markdown("""
                            - **G-PK_per90**: Goles menos penaltis por 90 minutos  
                            - **PrgP_per90**: Pases progresivos por 90 minutos  
                            - **PrgR_per90**: Recepciones progresivas por 90 minutos  
                            - **Cmp%**: Porcentaje de pases completados  
                            - **xAG_per90**: Asistencias esperadas (xAG) por 90 minutos  
                            - **PrgC_per90**: Conducciones progresivas por 90 minutos  
                            - **Fld_per90**: Faltas recibidas por 90 minutos  
                            - **Err_per90**: Errores que conducen a un tiro rival  
                            - **Tkl%**: Porcentaje de √©xito en entradas  
                            - **Int_per90**: Intercepciones por 90 minutos  
                            - **CrdY_per90**: Tarjetas amarillas por 90 minutos  
                            - **Won%**: Porcentaje de duelos a√©reos ganados  
                            """)

                        elif poste_cat == "Milieux offensifs / Ailiers":
                            st.markdown("""
                            - **npxG_per90**: xG sin penaltis por 90 minutos  
                            - **G-PK_per90**: Goles menos penaltis por 90 minutos  
                            - **G-xG_per90**: G - xG por 90 minutos  
                            - **PrgP_per90**: Pases progresivos por 90 minutos  
                            - **PrgR_per90**: Recepciones progresivas por 90 minutos  
                            - **Cmp%**: Porcentaje de pases completados  
                            - **xAG_per90**: Asistencias esperadas (xAG) por 90 minutos  
                            - **Succ_per90**: Regates exitosos por 90 minutos  
                            - **Succ%**: Porcentaje de regates exitosos  
                            - **PrgC_per90**: Conducciones progresivas por 90 minutos  
                            - **Fld_per90**: Faltas recibidas por 90 minutos  
                            - **Dis_per90**: Balones perdidos por 90 minutos  
                            """)

                        elif poste_cat == "Attaquants":
                            st.markdown("""
                            - **npxG_per90**: xG sin penaltis por 90 minutos  
                            - **Sh_per90**: Tiros por 90 minutos  
                            - **G-PK_per90**: Goles menos penaltis por 90 minutos  
                            - **G-xG_per90**: G - xG por 90 minutos  
                            - **G/Sh**: Goles por tiro  
                            - **PrgP_per90**: Pases progresivos por 90 minutos  
                            - **PrgR_per90**: Recepciones progresivas por 90 minutos  
                            - **Cmp%**: Porcentaje de pases completados  
                            - **xAG_per90**: Asistencias esperadas (xAG) por 90 minutos  
                            - **Succ_per_90**: Regates exitosos por 90 minutos  
                            - **PrgC_per90**: Conducciones progresivas por 90 minutos  
                            - **Dis_per90**: Balones perdidos por 90 minutos  
                            """)

                if poste_cat and poste_cat in category_stats:
                    stats_cols = [col for col in category_stats[poste_cat] if col in df.columns]
                    player_rating = player_data.get("rating", None)

                    # Grupo filtrado seg√∫n el filtro seleccionado
                    if filter_arg is None:
                        group_df = df[df['position'].map(position_category.get) == poste_cat]
                    elif filter_arg == "championnat":
                        group_df = df[
                            (df['position'] == player_data['position']) &
                            (df['Comp'] == player_data['Comp'])
                        ]
                    elif filter_arg == "pays":
                        group_df = df[
                            (df['position'] == player_data['position']) &
                            (df['nationality'] == player_data['nationality'])
                        ]
                    elif filter_arg == "tranche_age":
                        age = player_data['Age']
                        if pd.isna(age):
                            group_df = df[df['position'].map(position_category.get) == poste_cat]
                        elif age < 23:
                            group_df = df[(df['position'] == player_data['position']) & (df['Age'] < 23)]
                        elif 24 <= age <= 29:
                            group_df = df[(df['position'] == player_data['position']) & (df['Age'].between(24, 29))]
                        else:
                            group_df = df[(df['position'] == player_data['position']) & (df['Age'] >= 30)]

                    nb_players = len(group_df)  # N√∫mero de jugadores en el grupo

                    # Si hay menos de 5 jugadores, no mostramos radar del grupo
                    if nb_players >= 5:
                        radar_df = group_df[['player_name'] + stats_cols].dropna(subset=stats_cols).copy()
                        radar_df = radar_df.set_index('player_name')

                        # Asegurar que el jugador est√© presente
                        if player_data['player_name'] not in radar_df.index:
                            radar_df.loc[player_data['player_name']] = pd.Series(player_data).reindex(stats_cols)

                        radar_vals = radar_df[stats_cols].apply(pd.to_numeric, errors='coerce')

                        # Percentiles por categor√≠a (0 = peor, 1 = mejor)
                        rank_pct = radar_vals.rank(pct=True, method='average', ascending=True)

                        # Invertir m√©tricas donde "m√°s peque√±o = mejor"
                        invert_stats = globals().get("invert_stats", set())
                        for col in stats_cols:
                            if col in invert_stats:
                                rank_pct[col] = 1 - rank_pct[col]

                        # Perfil del jugador normalizado (percentiles)
                        player_norm = rank_pct.loc[player_data['player_name']].reindex(stats_cols).fillna(0)

                        # Mediana del grupo (sin el propio jugador)
                        group_median = (
                            rank_pct
                            .drop(index=player_data['player_name'], errors='ignore')
                            .median()
                            .reindex(stats_cols)
                            .fillna(0)
                        )

                        # Nota si existe
                        rating_text = f" - Nota: {round(player_rating, 2)}" if player_rating is not None else ""

                        # T√≠tulo con nota
                        st.markdown(
                            f"<h4 style='text-align: center;'>Radar de rendimiento de {player_data['player_name']} frente a {nb_players} jugadores de su categor√≠a{rating_text}</h4>",
                            unsafe_allow_html=True
                        )

                        # Radar (avanzadas)
                        fig_pizza_stat_adv = plot_pizza_radar(
                            labels=stats_cols,
                            player_values=player_norm * 100,
                            median_values=group_median * 100,
                            title=f"Estad√≠sticas avanzadas de {player_data['player_name']} vs Mediana del puesto",
                            legend_labels=(player_data['player_name'], "Mediana del puesto")
                        )

                        # Columnas para el radar (b√°sicas)
                        if poste_cat == "Gardiens de but":
                            pizza_cols = [
                                "score_goal_scoring_conceded", "score_efficiency", "score_error_fouls",
                                "score_short_clearance", "score_long_clearance", "score_positioning", "score_aerial_defense"
                            ]
                        else:
                            pizza_cols = [
                                "score_goal_scoring_created", "score_finish", "score_building", "score_creation",
                                "score_dribble", "score_projection", "score_defensive_actions", "score_waste",
                                "score_faults_committed", "score_provoked_fouls", "score_aerial"
                            ]

                        # Mantener solo las columnas presentes
                        pizza_cols = [col for col in pizza_cols if col in df.columns]
                        # Etiquetas en espa√±ol
                        pizza_labels = [translate_base_stat(col.replace("score_", ""), lang="es") for col in pizza_cols]

                        # Verificar que el jugador tenga todas las columnas
                        if all(col in player_data for col in pizza_cols):

                            player_values = [player_data[col] for col in pizza_cols]

                            # Mediana del grupo para estas columnas
                            group_df_scores = group_df[pizza_cols].dropna()
                            if len(group_df_scores) >= 5:
                                group_median_list = group_df_scores.median().tolist()

                                player_scaled = [v if pd.notna(v) else 0 for v in player_values]
                                median_scaled = [round(v) for v in group_median_list]

                                # Radar (b√°sicas)
                                fig_pizza_stat_basis = plot_pizza_radar(
                                    labels=pizza_labels,
                                    player_values=player_scaled,
                                    median_values=median_scaled,
                                    title=f"Estad√≠sticas b√°sicas de {player_data['player_name']} vs Mediana del puesto",
                                    legend_labels=(player_data['player_name'], "Mediana del puesto")
                                )

                                # Mostrar en Streamlit
                                col1, col2 = st.columns(2)
                                with col1:
                                    st.pyplot(fig_pizza_stat_basis)
                                with col2:
                                    st.pyplot(fig_pizza_stat_adv)

                    else:
                        st.info("No hay suficientes jugadores en este grupo para generar un radar (m√≠nimo requerido: 5).")

                # Jugadores similares (mismo filtro)
                similar_df = find_similar_players(selected_player, df, filter_type=filter_arg)
                if not similar_df.empty:
                    st.markdown(
                        f"<h4 style='text-align: center;'>Jugadores similares a {player_data['player_name']}</h4>",
                        unsafe_allow_html=True
                    )
                    st.dataframe(similar_df)
                else:
                    st.info("No se encontraron jugadores similares con los criterios seleccionados.")
            

    elif selected in ["Duel", "F2F", "Duelo"]:
        if lang == "Fran√ßais":
            st.markdown(
                "<h4 style='text-align: center;'>ü•ä Comparaison de deux joueurs</h4>", 
                unsafe_allow_html=True)
            

            df = pd.read_csv("../data/player/database_player.csv") # R√©cup√©rer les donn√©es
            player_names = sorted(df['player_name'].dropna().unique().tolist()) # Ordonner par le nom du joueur

            st.sidebar.markdown("### S√©lection des joueurs") # S√©lection dans la sidebar

            player1 = st.sidebar.selectbox("Premier joueur :", [''] + player_names, key="player1") # S√©lection du 1er joueur
            
            if not player1:
                # Aucun joueur s√©lectionn√© ‚Üí afficher l'image d'intro
                st.image("../image/player_comparison.jpg")
                st.info("D√©rouler la barre lat√©rale pour choisir la langue et les joueurs √† analyser")

            if player1:
                # Nous stockons les informations du 1er joueur
                player1_data = df[df['player_name'] == player1].iloc[0]
                sub_position = player1_data['position']
                poste_cat = position_category.get(sub_position, None)

                # Tous les position de la m√™me cat√©gorie
                sub_positions_same_cat = [
                    pos for pos, cat in position_category.items() if cat == poste_cat
                ]

                # On filtre tous les joueurs ayant un poste dans cette cat√©gorie
                same_category_players = df[df['position'].isin(sub_positions_same_cat)]
                player2_names = sorted(same_category_players['player_name'].dropna().unique().tolist())
                player2_names = [p for p in player2_names if p != player1]


                player2 = st.sidebar.selectbox("Second joueur (m√™me poste) :", [''] + player2_names, key="player2") # S√©lection du 2nd joueur
                
                if not player2:
                    # Aucun joueur s√©lectionn√© ‚Üí afficher l'image d'intro
                    st.image("../image/player_comparison.jpg")
                    st.info("D√©rouler la barre lat√©rale pour choisir la langue et les joueurs √† analyser")


                if player2:
                    player2_data = df[df['player_name'] == player2].iloc[0] # R√©cup√©ration du nom du 2nd joueur
                    
                    # On affiche le profil des joueurs
                    st.markdown("<h4 style='text-align: center;'>Profils des joueurs</h4>", unsafe_allow_html=True)

                    for pdata in [player1_data, player2_data]:
                        # Traductions et affichage propre des informations
                        pays = translate_country(pdata['nationality'], lang="fr")
                        poste = translate_position(pdata['position'], lang="fr")

                        foot_lbl = translate_foot(pdata.get("foot"), lang="fr")
                        position_other_translated = translate_position_list(pdata.get("position_other"), lang="fr")
                        agent_name = pdata.get("agent_name")
                        agent_name = None if (agent_name is None or (isinstance(agent_name, float) and pd.isna(agent_name)) or str(agent_name).strip() == "") else str(agent_name).strip()
                        outfitter = pdata.get("outfitter")
                        outfitter = None if (outfitter is None or (isinstance(outfitter, float) and pd.isna(outfitter)) or str(outfitter).strip() == "") else str(outfitter).strip()

                        foot_lbl = foot_lbl if foot_lbl is not None else "Non connu"
                        position_other = position_other_translated if position_other_translated is not None else "Aucun"
                        agent_name = agent_name if agent_name is not None else "Non connu"
                        outfitter = outfitter if outfitter is not None else "Non connu"

                        st.markdown(f"""
                        <div style="display: flex; flex-direction: row; justify-content: space-between; gap: 2rem; flex-wrap: nowrap; align-items: center; overflow-x: auto; margin-bottom: 2rem; padding-bottom: 1rem; border-bottom: 1px solid #e0e0e0;">

                        <div style="flex: 1; text-align: center; min-width: 180px;">
                            <img src="{pdata['imageUrl']}" style="width: 100%; max-width: 150px; border-radius: 10px;">
                        </div>

                        <div style="flex: 2; min-width: 280px;">
                            <p><strong>Nom :</strong> {pdata['player_name']}</p>
                            <p><strong>√Çge :</strong> {int(pdata['Age']) if pd.notna(pdata['Age']) else "-"}</p>
                            <p><strong>Pays :</strong> {pays}</p>
                            <p><strong>Club :</strong> {pdata['club_name']}</p>
                        </div>

                        <div style="flex: 2; min-width: 280px;">
                            <p><strong>Poste :</strong> {poste}</p>
                            <p><strong>Taille :</strong> {int(pdata['height']) if pd.notna(pdata['height']) else "-" } cm</p>
                            <p><strong>Valeur marchande :</strong> {format_market_value(pdata['marketValue'])}</p>
                            <p><strong>Fin de contrat :</strong> {pdata['contract'] if pd.notna(pdata['contract']) else "-"}</p>
                        </div>

                        <div style="flex: 2; min-width: 280px;">
                            <p><strong>Pied fort :</strong> {foot_lbl}</p>
                            <p><strong>Autre(s) poste(s) :</strong> {position_other_translated}</p>
                            <p><strong>Agent :</strong> {agent_name}</p>
                            <p><strong>√âquipementier :</strong> {outfitter}</p>
                        </div>
                        </div>
                        """, unsafe_allow_html=True)

                    # Glossaire des statistiques associ√©es
                    with st.expander(" Glossaire des statistiques"):
                        if poste_cat:

                            if poste_cat == "Gardiens de but":
                                st.markdown("""
                                - **GA_per90** : Buts encaiss√©s par 90 minutes 
                                - **PSxG_per90** : Post-Shot Expected Goals par 90 minutes
                                - **/90 (PSxG-GA/90)** : Diff√©rence entre PSxG et buts encaiss√©s par 90 minutes
                                - **Save%** : Pourcentage d‚Äôarr√™ts effectu√©s  
                                - **PSxG+/-** : Diff√©rence entre les PSxG (xG post-tir) et buts encaiss√©s  
                                - **Err_per90** : Erreurs conduisant √† un tir adverse par 90 minutes
                                - **Launch%** : Pourcentage de passes longues  
                                - **AvgLen** : Longueur moyenne des passes (en yards)  
                                - **Cmp%** : Pourcentage de passes r√©ussies  
                                - **AvgDist** : Distance moyenne des passes (en yards)  
                                - **#OPA_per90** : Actions d√©fensives hors de la surface par 90 minutes  
                                - **Stp%** : Pourcentage de centres arr√™t√©s dans la surface  
                                """)

                            elif poste_cat == "D√©fenseurs centraux":
                                st.markdown("""
                                - **G-PK_per90** : Buts marqu√©es - p√©naltys inscrits par 90 minutes
                                - **PrgP_per90** : Passes progressives par 90 minutes
                                - **Cmp%** : Pourcentage de passes r√©ussies
                                - **xAG_per90** : Expected Assisted Goals par 90 minutes
                                - **PrgC_per90** : Conduites progressives par 90 minutes
                                - **Err_per90** : Erreurs menant √† un tir adverse
                                - **Tkl%** : Pourcentage de tacles effectu√©s
                                - **Int_per90** : Interceptions par 90 minutes
                                - **Tkl_per90** : Tacles par 90 minutes
                                - **CrdY_per90** : Cartons jaunes par 90 minutes
                                - **Won_per90** : Duels a√©riens gagn√©s par 90 minutes
                                - **Won%** : Pourcentage de duels a√©riens gagn√©s
                                """)

                            elif poste_cat == "D√©fenseurs lat√©raux":
                                st.markdown("""
                                - **G-PK_per90** : Buts marqu√©es - p√©naltys inscrits par 90 minutes
                                - **PrgP_per90** : Passes progressives par 90 minutes
                                - **Cmp%** : Pourcentage de passes r√©ussies
                                - **xAG_per90** : Expected Assisted Goals par 90 minutes
                                - **PrgC_per90** : Conduites progressives par 90 minutes
                                - **Err_per90** : Erreurs menant √† un tir adverse
                                - **Tkl%** : Pourcentage de tacles effectu√©s 
                                - **Int_per90** : Interceptions par 90 minutes
                                - **Tkl_per90** : Tacles par 90 minutes
                                - **CrdY_per90** : Cartons jaunes par 90 minutes
                                - **Won_per90** : Duels a√©riens gagn√©s par 90 minutes
                                - **Won%** : Pourcentage de duels a√©riens gagn√©s 
                                """)

                            elif poste_cat == "Milieux de terrain":
                                st.markdown("""
                                - **G-PK_per90** : Buts marqu√©es - p√©naltys inscrits par 90 minutes
                                - **PrgP_per90** : Passes progressives par 90 minutes
                                - **PrgR_per90** : Passes progressives re√ßues par 90 minutes
                                - **Cmp%** : Pourcentage de passes r√©ussies
                                - **xAG_per90** : Expected Assisted Goals par 90 minutes
                                - **PrgC_per90** : Conduites progressives par 90 minutes
                                - **Fld_per90** : Fautes subies par 90 minutes
                                - **Err_per90** : Erreurs menant √† un tir adverse
                                - **Tkl%** : Pourcentage de tacles effectu√©s 
                                - **Int_per90** : Interceptions par 90 minutes
                                - **CrdY_per90** : Cartons jaunes par 90 minutes
                                - **Won%** : Pourcentage de duels a√©riens gagn√©s 
                                """)

                            elif poste_cat == "Milieux offensifs / Ailiers":
                                st.markdown("""
                                - **npxG_per90** : Non-penalty Expected Goals par 90 minutes
                                - **G-PK_per90** : Buts marqu√©es - p√©naltys inscrits par 90 minutes
                                - **G-xG_per90** : Expected Goals par 90 minutes
                                - **PrgP_per90** : Passes progressives par 90 minutes
                                - **PrgR_per90** : Passes progressives re√ßues par 90 minutes
                                - **Cmp%** : Pourcentage de passes r√©ussies
                                - **xAG_per90** : Expected Assisted Goals par 90 minutes
                                - **Succ_per90** : Dribbles r√©ussis par 90 minutes
                                - **Succ%** : Pourcentage de dribbles r√©ussis
                                - **PrgC_per90** : Conduites progressives par 90 minutes
                                - **Fld_per90** : Fautes subies par 90 minutes
                                - **Dis_per90** : Ballons perdus par 90 minutes
                                """)

                            elif poste_cat == "Attaquants":
                                st.markdown("""
                                - **npxG_per90** : Non-penalty Expected Goals par 90 minutes
                                - **Sh_per90** : Tirs tent√©s par 90 minutes
                                - **G-PK_per90** : Buts marqu√©es - p√©naltys inscrits par 90 minutes
                                - **G-xG_per90** : Expected Goals par 90 minutes
                                - **G/Sh** : Buts par tir  
                                - **PrgP_per90** : Passes progressives par 90 minutes  
                                - **PrgR_per90** : Passes progressives re√ßues par 90 minutes
                                - **Cmp%** : Pourcentage de passes r√©ussies
                                - **xAG_per90** : Expected Assisted Goals par 90 minutes
                                - **Succ_per_90** : Dribbles r√©ussis par 90 minutes  
                                - **PrgC_per90** : Conduites progressives par 90 minutes  
                                - **Dis_per90** : Ballons perdus par 90 minutes  
                                """)

                    # G√©n√©ration du radar
                    if poste_cat and poste_cat in category_stats:
                        stats_cols = [col for col in category_stats[poste_cat] if col in df.columns]  # On r√©cup√®re la cat√©gories de stats selon le poste

                        # Filtrer les statistiques des joueurs selon la cat√©gorie de poste
                        if 'poste_cat' not in df.columns:
                            df = df.copy()
                            df['poste_cat'] = df['position'].map(position_category)

                        radar_df = df[df['poste_cat'] == poste_cat][['player_name'] + stats_cols].copy()
                        radar_df = radar_df.dropna(subset=stats_cols).set_index('player_name')

                        # On s'assure que les 2 joueurs compar√©s sont inclus dans la r√©f√©rence
                        for p, pdata in [(player1, player1_data), (player2, player2_data)]:
                            if p not in radar_df.index:
                                radar_df.loc[p] = pd.Series(pdata).reindex(stats_cols)

                        radar_vals = radar_df[stats_cols].apply(pd.to_numeric, errors='coerce')

                        # On √©value chaque statistique selon sa position au regard des autres joueurs ayant la m√™me position
                        rank_pct = radar_vals.rank(pct=True, method='average', ascending=True)

                        # On inverse les m√©triques o√π "plus petit = mieux"
                        invert_stats = globals().get("invert_stats", set())
                        for col in stats_cols:
                            if col in invert_stats:
                                rank_pct[col] = 1 - rank_pct[col]

                        # On normalise les valeurs par rang pour le radar
                        player1_norm = rank_pct.loc[player1].reindex(stats_cols).fillna(0)
                        player2_norm = rank_pct.loc[player2].reindex(stats_cols).fillna(0)

                        
                        player1_rating = player1_data.get("rating", None)
                        player2_rating = player2_data.get("rating", None)

                        # Calcul de la note si elle existe
                        rating1_text = f"Note : {round(player1_rating)}" if player1_rating is not None else ""
                        rating2_text = f"Note : {round(player2_rating)}" if player2_rating is not None else ""
                        
                        # Affichage du titre et du radar
                        st.markdown(
                            f"<h4 style='text-align: center;'>Radar comparatif : {player1} ({rating1_text}) vs {player2} ({rating2_text})</h4>",
                            unsafe_allow_html=True
                        )
                        
                        # Cr√©ation de la la pizza plot des statistiques avanc√©es
                        fig_pizza_stat_adv = plot_pizza_radar(
                            labels=stats_cols,
                            player_values=player1_norm * 100,
                            median_values=player2_norm * 100,
                            title=f"Statistiques avanc√©es de {player1} vs {player2}",
                            legend_labels=(player1, player2)
                        )

                        # Liste de colonnes de score par poste
                        if poste_cat == "Gardiens de but":
                            pizza_cols = [
                                "score_goal_scoring_conceded", "score_efficiency", "score_error_fouls",
                                "score_short_clearance", "score_long_clearance", "score_positioning", "score_aerial_defense"
                            ]
                        else:
                            pizza_cols = [
                                "score_goal_scoring_created", "score_finish", "score_building", "score_creation",
                                "score_dribble", "score_projection", "score_defensive_actions", "score_waste",
                                "score_faults_committed", "score_provoked_fouls", "score_aerial"
                            ]

                        # Nous ne gardons uniquement les colonnes d'inter√™t pour le poste
                        pizza_cols = [col for col in pizza_cols if col in df.columns]
                        pizza_labels = [translate_base_stat(col.replace("score_", ""), lang="fr") for col in pizza_cols]

                        # V√©rification si ces colonnes existent pour les deux joueurs
                        if all((col in player1_data) and (col in player2_data) for col in pizza_cols):

                            player1_values = [player1_data[col] for col in pizza_cols]
                            player2_values = [player2_data[col] for col in pizza_cols]

                            # V√©rifie que les donn√©es sont valides pour les deux joueurs
                            player1_scaled = [v if pd.notna(v) else 0 for v in player1_values]
                            player2_scaled = [v if pd.notna(v) else 0 for v in player2_values]

                            # Cr√©ation du radar comparatif (pizza plot) pour les statistiques de base
                            fig_pizza_stat_basis = plot_pizza_radar(
                                labels=pizza_labels,
                                player_values=player1_scaled,
                                median_values=player2_scaled,
                                title=f"Statistiques de base de {player1} vs {player2}",
                                legend_labels=(player1, player2)
                            )

                        # Affichage dans Streamlit
                        col1, col2 = st.columns(2)
                        with col1:
                            st.pyplot(fig_pizza_stat_basis)
                        with col2:
                            st.pyplot(fig_pizza_stat_adv)

        elif lang == "English":
            # Display the title
            st.markdown(
                "<h4 style='text-align: center;'>ü•ä Player Comparison</h4>", 
                unsafe_allow_html=True)

            df = pd.read_csv("../data/player/database_player.csv") # Recover the data
            player_names = sorted(df['player_name'].dropna().unique().tolist()) # Order by data 

            st.sidebar.markdown("### Player selection") # Selection in the sidebar

            player1 = st.sidebar.selectbox("First player :", [''] + player_names, key="player1") # Select the first player
            
            if not player1:
                # If the player is selected, we hide the image
                st.image("../image/player_comparison.jpg")
                st.info("Scroll down the sidebar to select the language and players for analysis")

            if player1:
                # Collecting the data for the players
                player1_data = df[df['player_name'] == player1].iloc[0]
                sub_position = player1_data['position']
                poste_cat = position_category.get(sub_position, None)

                # All positions in the same category
                sub_positions_same_cat = [
                    pos for pos, cat in position_category.items() if cat == poste_cat
                ]

                # We filter all players with a position in this category
                same_category_players = df[df['position'].isin(sub_positions_same_cat)]
                player2_names = sorted(same_category_players['player_name'].dropna().unique().tolist())
                player2_names = [p for p in player2_names if p != player1]

                player2 = st.sidebar.selectbox("Second player (same position) :", [''] + player2_names, key="player2") # Select the 2nd player
                
                if not player2:
                    # If the player is selected, we hide the image
                    st.image("../image/player_comparison.jpg")
                    st.info("Scroll down the sidebar to select the language and players for analysis")
                        
                if player2:
                    player2_data = df[df['player_name'] == player2].iloc[0] # Collecting the name of the player 2
                    
                    # We display players profiles
                    st.markdown("<h4 style='text-align: center;'>Players profile</h4>", unsafe_allow_html=True)

                    for pdata in [player1_data, player2_data]:
                        
                        # Recovery of the data
                        foot_lbl = translate_foot(pdata.get("foot"), lang="eng")
                        position_other_translated = translate_position_list(pdata.get("position_other"), lang="eng")
                        agent_name = pdata.get("agent_name")
                        agent_name = None if (agent_name is None or (isinstance(agent_name, float) and pd.isna(agent_name)) or str(agent_name).strip() == "") else str(agent_name).strip()
                        outfitter = pdata.get("outfitter")
                        outfitter = None if (outfitter is None or (isinstance(outfitter, float) and pd.isna(outfitter)) or str(outfitter).strip() == "") else str(outfitter).strip()

                        foot_lbl = foot_lbl if foot_lbl is not None else "Not known"
                        position_other = position_other_translated if position_other_translated is not None else "None"
                        agent_name = agent_name if agent_name is not None else "Not known"
                        outfitter = outfitter if outfitter is not None else "Not known"

                        st.markdown(f"""
                        <div style="display: flex; flex-direction: row; justify-content: space-between; gap: 2rem; flex-wrap: nowrap; align-items: center; overflow-x: auto; margin-bottom: 2rem; padding-bottom: 1rem; border-bottom: 1px solid #e0e0e0;">

                        <div style="flex: 1; text-align: center; min-width: 180px;">
                            <img src="{pdata['imageUrl']}" style="width: 100%; max-width: 150px; border-radius: 10px;">
                        </div>

                        <div style="flex: 2; min-width: 280px;">
                            <p><strong>Name:</strong> {pdata['player_name']}</p>
                            <p><strong>Age:</strong> {int(pdata['Age']) if pd.notna(pdata['Age']) else "-"}</p>
                            <p><strong>Country:</strong> {pdata['nationality']}</p>
                            <p><strong>Club:</strong> {pdata['club_name']}</p>
                        </div>

                        <div style="flex: 2; min-width: 280px;">
                            <p><strong>Position:</strong> {pdata['position']}</p>
                            <p><strong>Height:</strong> {int(pdata['height']) if pd.notna(pdata['height']) else "-"} cm</p>
                            <p><strong>Market Value:</strong> {format_market_value(pdata['marketValue'])}</p>
                            <p><strong>Contract:</strong> {pdata['contract'] if pd.notna(pdata['contract']) else "-"}</p>
                        </div>

                        <div style="flex: 2; min-width: 280px;">
                            <p><strong>Strong foot :</strong> {foot_lbl}</p>
                            <p><strong>Other(s) position(s) :</strong> {position_other_translated}</p>
                            <p><strong>Agent :</strong> {agent_name}</p>
                            <p><strong>Outfitter :</strong> {outfitter}</p>
                        </div>
                        </div>
                        """, unsafe_allow_html=True)

                    # Glossary of Statistics associated
                    with st.expander("Glossary of Statistics"):
                        if poste_cat:

                            if poste_cat == "Gardiens de but":
                                st.markdown("""
                                - **GA_per90**: Goals conceded per 90 minutes  
                                - **PSxG_per90**: Post-Shot Expected Goals per 90 minutes  
                                - **/90 (PSxG-GA/90)**: Difference between PSxG and goals conceded per 90 minutes  
                                - **Save%**: Save percentage  
                                - **PSxG+/-**: Difference between PSxG and goals conceded  
                                - **Err_per90**: Errors leading to a shot per 90 minutes  
                                - **Launch%**: Percentage of long passes  
                                - **AvgLen**: Average pass length (in yards)  
                                - **Cmp%**: Pass completion percentage  
                                - **AvgDist**: Average pass distance (in yards)  
                                - **#OPA_per90**: Defensive actions outside the penalty area per 90 minutes  
                                - **Stp%**: Percentage of crosses stopped inside the box 
                                """)

                            elif poste_cat == "D√©fenseurs centraux":
                                st.markdown("""
                                - **G-PK_per90**: Goals scored minus penalties per 90 minutes  
                                - **PrgP_per90**: Progressive passes per 90 minutes  
                                - **Cmp%**: Pass completion percentage  
                                - **xAG_per90**: Expected Assisted Goals per 90 minutes  
                                - **PrgC_per90**: Progressive carries per 90 minutes  
                                - **Err_per90**: Errors leading to a shot  
                                - **Tkl%**: Tackle success rate  
                                - **Int_per90**: Interceptions per 90 minutes  
                                - **Tkl_per90**: Tackles per 90 minutes  
                                - **CrdY_per90**: Yellow cards per 90 minutes  
                                - **Won_per90**: Aerial duels won per 90 minutes  
                                - **Won%**: Aerial duel success rate  
                                """)

                            elif poste_cat == "D√©fenseurs lat√©raux":
                                st.markdown("""
                                - **G-PK_per90**: Goals scored minus penalties per 90 minutes  
                                - **PrgP_per90**: Progressive passes per 90 minutes  
                                - **Cmp%**: Pass completion percentage  
                                - **xAG_per90**: Expected Assisted Goals per 90 minutes  
                                - **PrgC_per90**: Progressive carries per 90 minutes  
                                - **Err_per90**: Errors leading to a shot  
                                - **Tkl%**: Tackle success rate  
                                - **Int_per90**: Interceptions per 90 minutes  
                                - **Tkl_per90**: Tackles per 90 minutes  
                                - **CrdY_per90**: Yellow cards per 90 minutes  
                                - **Won_per90**: Aerial duels won per 90 minutes  
                                - **Won%**: Aerial duel success rate  
                                """)

                            elif poste_cat == "Milieux de terrain":
                                st.markdown("""
                                - **G-PK_per90**: Goals scored minus penalties per 90 minutes  
                                - **PrgP_per90**: Progressive passes per 90 minutes  
                                - **PrgR_per90**: Progressive passes received per 90 minutes  
                                - **Cmp%**: Pass completion percentage  
                                - **xAG_per90**: Expected Assisted Goals per 90 minutes  
                                - **PrgC_per90**: Progressive carries per 90 minutes  
                                - **Fld_per90**: Fouls drawn per 90 minutes  
                                - **Err_per90**: Errors leading to a shot  
                                - **Tkl%**: Tackle success rate  
                                - **Int_per90**: Interceptions per 90 minutes  
                                - **CrdY_per90**: Yellow cards per 90 minutes  
                                - **Won%**: Aerial duel success rate
                                """)

                            elif poste_cat == "Milieux offensifs / Ailiers":
                                st.markdown("""
                                - **npxG_per90**: Non-penalty Expected Goals per 90 minutes  
                                - **G-PK_per90**: Goals scored minus penalties per 90 minutes  
                                - **G-xG_per90**: Difference between goals and Expected Goals per 90 minutes  
                                - **PrgP_per90**: Progressive passes per 90 minutes  
                                - **PrgR_per90**: Progressive passes received per 90 minutes  
                                - **Cmp%**: Pass completion percentage  
                                - **xAG_per90**: Expected Assisted Goals per 90 minutes  
                                - **Succ_per90**: Successful dribbles per 90 minutes  
                                - **Succ%**: Dribble success rate  
                                - **PrgC_per90**: Progressive carries per 90 minutes  
                                - **Fld_per90**: Fouls drawn per 90 minutes  
                                - **Dis_per90**: Dispossessions per 90 minutes
                                """)

                            elif poste_cat == "Attaquants":
                                st.markdown("""
                                - **npxG_per90**: Non-penalty Expected Goals per 90 minutes  
                                - **Sh_per90**: Shots attempted per 90 minutes  
                                - **G-PK_per90**: Goals scored minus penalties per 90 minutes  
                                - **G-xG_per90**: Difference between goals and Expected Goals per 90 minutes  
                                - **G/Sh**: Goals per shot  
                                - **PrgP_per90**: Progressive passes per 90 minutes  
                                - **PrgR_per90**: Progressive passes received per 90 minutes  
                                - **Cmp%**: Pass completion percentage  
                                - **xAG_per90**: Expected Assisted Goals per 90 minutes  
                                - **Succ_per_90**: Successful dribbles per 90 minutes  
                                - **PrgC_per90**: Progressive carries per 90 minutes  
                                - **Dis_per90**: Dispossessions per 90 minutes 
                                """)

                    # Radar generation
                    if poste_cat and poste_cat in category_stats:
                        stats_cols = [col for col in category_stats[poste_cat] if col in df.columns]  # We retrieve the stat categories according to position.

                        # Filter player statistics by position category
                        if 'poste_cat' not in df.columns:
                            df = df.copy()
                            df['poste_cat'] = df['position'].map(position_category)

                        radar_df = df[df['poste_cat'] == poste_cat][['player_name'] + stats_cols].copy()
                        radar_df = radar_df.dropna(subset=stats_cols).set_index('player_name')

                        # We ensure that the two players being compared are included in the reference
                        for p, pdata in [(player1, player1_data), (player2, player2_data)]:
                            if p not in radar_df.index:
                                radar_df.loc[p] = pd.Series(pdata).reindex(stats_cols)

                        radar_vals = radar_df[stats_cols].apply(pd.to_numeric, errors='coerce')

                        # Each statistic is evaluated according to its position relative to other players in the same position
                        rank_pct = radar_vals.rank(pct=True, method='average', ascending=True)

                        # We are reversing the metrics where ‚Äòsmaller = better‚Äô
                        invert_stats = globals().get("invert_stats", set())
                        for col in stats_cols:
                            if col in invert_stats:
                                rank_pct[col] = 1 - rank_pct[col]

                        # We normalise the values by rank for the radar.
                        player1_norm = rank_pct.loc[player1].reindex(stats_cols).fillna(0)
                        player2_norm = rank_pct.loc[player2].reindex(stats_cols).fillna(0)

                        player1_rating = player1_data.get("rating", None)
                        player2_rating = player2_data.get("rating", None)

                        # Rating calculation if available
                        rating1_text = f"Rating : {round(player1_rating)}" if player1_rating is not None else ""
                        rating2_text = f"Rating : {round(player2_rating)}" if player2_rating is not None else ""
                        
                        # Title and radar display
                        st.markdown(
                            f"<h4 style='text-align: center;'>Radar comparison : {player1} ({rating1_text}) vs {player2} ({rating2_text})</h4>",
                            unsafe_allow_html=True
                        )
                        
                        # Creating the advanced statistics pizza plot
                        fig_pizza_stat_adv = plot_pizza_radar(
                            labels=stats_cols,
                            player_values=player1_norm * 100,
                            median_values=player2_norm * 100,
                            title=f"Advanced statistics of {player1} vs {player2}",
                            legend_labels=(player1, player2)
                        )

                        # List of score columns by position
                        if poste_cat == "Gardiens de but":
                            pizza_cols = [
                                "score_goal_scoring_conceded", "score_efficiency", "score_error_fouls",
                                "score_short_clearance", "score_long_clearance", "score_positioning", "score_aerial_defense"
                            ]
                        else:
                            pizza_cols = [
                                "score_goal_scoring_created", "score_finish", "score_building", "score_creation",
                                "score_dribble", "score_projection", "score_defensive_actions", "score_waste",
                                "score_faults_committed", "score_provoked_fouls", "score_aerial"
                            ]

                        # We keep only the columns of interest for the post
                        pizza_cols = [col for col in pizza_cols if col in df.columns]
                        pizza_labels = [col.replace("score_", "").replace("_", " ").capitalize() for col in pizza_cols]

                        # Check if these columns exist for both players
                        if all((col in player1_data) and (col in player2_data) for col in pizza_cols):

                            player1_values = [player1_data[col] for col in pizza_cols]
                            player2_values = [player2_data[col] for col in pizza_cols]

                            # Checks that data is valid for both players
                            player1_scaled = [v if pd.notna(v) else 0 for v in player1_values]
                            player2_scaled = [v if pd.notna(v) else 0 for v in player2_values]

                            # Creation of comparative radar (pizza plot) for the basic statistics
                            fig_pizza_stat_basis = plot_pizza_radar(
                                labels=pizza_labels,
                                player_values=player1_scaled,
                                median_values=player2_scaled,
                                title=f"Basic statistics of {player1} vs {player2}",
                                legend_labels=(player1, player2)
                            )

                        # Display in Streamlit
                        col1, col2 = st.columns(2)
                        with col1:
                            st.pyplot(fig_pizza_stat_basis)
                        with col2:
                            st.pyplot(fig_pizza_stat_adv)
        
        else:
            st.markdown(
                "<h4 style='text-align: center;'>ü•ä Comparaci√≥n de dos jugadores</h4>", 
                unsafe_allow_html=True)

            df = pd.read_csv("../data/player/database_player.csv")  # Cargar datos
            player_names = sorted(df['player_name'].dropna().unique().tolist())  # Ordenar por nombre

            st.sidebar.markdown("### Selecci√≥n de jugadores")  # Selecci√≥n en la barra lateral

            player1 = st.sidebar.selectbox("Primer jugador:", [''] + player_names, key="player1")  # Jugador 1

            if not player1:
                # Sin selecci√≥n ‚Üí imagen de intro
                st.image("../image/player_comparison.jpg")
                st.info("Despliega la barra lateral para elegir el idioma y los jugadores a analizar")

            if player1:
                # Datos del primer jugador
                player1_data = df[df['player_name'] == player1].iloc[0]
                sub_position = player1_data['position']
                poste_cat = position_category.get(sub_position, None) 

                # Todas las position de la misma categor√≠a
                sub_positions_same_cat = [pos for pos, cat in position_category.items() if cat == poste_cat]

                # Filtrar jugadores de la misma categor√≠a
                same_category_players = df[df['position'].isin(sub_positions_same_cat)]
                player2_names = sorted(same_category_players['player_name'].dropna().unique().tolist())
                player2_names = [p for p in player2_names if p != player1]

                player2 = st.sidebar.selectbox("Segundo jugador (misma posici√≥n):", [''] + player2_names, key="player2")  # Jugador 2

                if not player2:
                    st.image("../image/player_comparison.jpg")
                    st.info("Despliega la barra lateral para elegir el idioma y los jugadores a analizar")

                if player2:
                    player2_data = df[df['player_name'] == player2].iloc[0]  # Datos del segundo jugador

                    # Perfiles de los jugadores
                    st.markdown("<h4 style='text-align: center;'>Perfiles de los jugadores</h4>", unsafe_allow_html=True)

                    for pdata in [player1_data, player2_data]:
                        # Traducciones mostradas en ES y recuperaci√≥n de datos
                        pais = translate_country(pdata['nationality'], lang="es")
                        puesto = translate_position(pdata['position'], lang="es")
                        foot_lbl = translate_foot(pdata.get("foot"), lang="es")
                        position_other_translated = translate_position_list(pdata.get("position_other"), lang="es")
                        agent_name = pdata.get("agent_name")
                        agent_name = None if (agent_name is None or (isinstance(agent_name, float) and pd.isna(agent_name)) or str(agent_name).strip() == "") else str(agent_name).strip()
                        outfitter = pdata.get("outfitter")
                        outfitter = None if (outfitter is None or (isinstance(outfitter, float) and pd.isna(outfitter)) or str(outfitter).strip() == "") else str(outfitter).strip()

                        foot_lbl = foot_lbl if foot_lbl is not None else "Desconocido"
                        position_other = position_other_translated if position_other_translated is not None else "Ninguno"
                        agent_name = agent_name if agent_name is not None else "Desconocido"
                        outfitter = outfitter if outfitter is not None else "Desconocido"

                        st.markdown(f"""
                        <div style="display: flex; flex-direction: row; justify-content: space-between; gap: 2rem; flex-wrap: nowrap; align-items: center; overflow-x: auto; margin-bottom: 2rem; padding-bottom: 1rem; border-bottom: 1px solid #e0e0e0;">

                        <div style="flex: 1; text-align: center; min-width: 180px;">
                            <img src="{pdata['imageUrl']}" style="width: 100%; max-width: 150px; border-radius: 10px;">
                        </div>

                        <div style="flex: 2; min-width: 280px;">
                            <p><strong>Nombre:</strong> {pdata['player_name']}</p>
                            <p><strong>Edad:</strong> {int(pdata['Age']) if pd.notna(pdata['Age']) else "-"}</p>
                            <p><strong>Pa√≠s:</strong> {pais}</p>
                            <p><strong>Club:</strong> {pdata['club_name']}</p>
                        </div>

                        <div style="flex: 2; min-width: 280px;">
                            <p><strong>Posici√≥n:</strong> {puesto}</p>
                            <p><strong>Altura:</strong> {int(pdata['height']) if pd.notna(pdata['height']) else "-" } cm</p>
                            <p><strong>Valor de mercado:</strong> {format_market_value(pdata['marketValue'])}</p>
                            <p><strong>Fin de contrato:</strong> {pdata['contract'] if pd.notna(pdata['contract']) else "-"}</p>
                        </div>

                        <div style="flex: 2; min-width: 280px;">
                            <p><strong>Pie fuerte :</strong> {foot_lbl}</p>
                            <p><strong>Otro(s) puesto(s) :</strong> {position_other_translated}</p>
                            <p><strong>Agente :</strong> {agent_name}</p>
                            <p><strong>Fabricante de equipos :</strong> {outfitter}</p>
                        </div>
                        </div>
                        """, unsafe_allow_html=True)

                    # Glosario
                    with st.expander(" Glosario de estad√≠sticas"):
                        if poste_cat:

                            if poste_cat == "Gardiens de but":
                                st.markdown("""
                                - **GA_per90**: Goles encajados por 90 minutos 
                                - **PSxG_per90**: Post-Shot Expected Goals por 90 minutos
                                - **/90 (PSxG-GA/90)**: Diferencia entre PSxG y goles encajados por 90 minutos
                                - **Save%**: Porcentaje de paradas  
                                - **PSxG+/-**: Diferencia entre PSxG (xG post-tiro) y goles encajados  
                                - **Err_per90**: Errores que conducen a un tiro rival por 90 minutos
                                - **Launch%**: Porcentaje de pases largos  
                                - **AvgLen**: Longitud media de pase (yardas)  
                                - **Cmp%**: Porcentaje de pases completados  
                                - **AvgDist**: Distancia media de pase (yardas)  
                                - **#OPA_per90**: Acciones defensivas fuera del √°rea por 90 minutos  
                                - **Stp%**: Porcentaje de centros detenidos dentro del √°rea  
                                """)

                            elif poste_cat == "D√©fenseurs centraux":
                                st.markdown("""
                                - **G-PK_per90**: Goles menos penaltis por 90 minutos
                                - **PrgP_per90**: Pases progresivos por 90 minutos
                                - **Cmp%**: Porcentaje de pases completados
                                - **xAG_per90**: Asistencias esperadas (xAG) por 90 minutos
                                - **PrgC_per90**: Conducciones progresivas por 90 minutos
                                - **Err_per90**: Errores que conducen a un tiro rival
                                - **Tkl%**: Porcentaje de √©xito en entradas
                                - **Int_per90**: Intercepciones por 90 minutos
                                - **Tkl_per90**: Entradas por 90 minutos
                                - **CrdY_per90**: Tarjetas amarillas por 90 minutos
                                - **Won_per90**: Duelos a√©reos ganados por 90 minutos
                                - **Won%**: Porcentaje de duelos a√©reos ganados
                                """)

                            elif poste_cat == "D√©fenseurs lat√©raux":
                                st.markdown("""
                                - **G-PK_per90**: Goles menos penaltis por 90 minutos
                                - **PrgP_per90**: Pases progresivos por 90 minutos
                                - **Cmp%**: Porcentaje de pases completados
                                - **xAG_per90**: Asistencias esperadas (xAG) por 90 minutos
                                - **PrgC_per90**: Conducciones progresivas por 90 minutos
                                - **Err_per90**: Errores que conducen a un tiro rival
                                - **Tkl%**: Porcentaje de √©xito en entradas 
                                - **Int_per90**: Intercepciones por 90 minutos
                                - **Tkl_per90**: Entradas por 90 minutos
                                - **CrdY_per90**: Tarjetas amarillas por 90 minutos
                                - **Won_per90**: Duelos a√©reos ganados por 90 minutos
                                - **Won%**: Porcentaje de duelos a√©reos ganados 
                                """)

                            elif poste_cat == "Milieux de terrain":
                                st.markdown("""
                                - **G-PK_per90**: Goles menos penaltis por 90 minutos
                                - **PrgP_per90**: Pases progresivos por 90 minutos
                                - **PrgR_per90**: Recepciones progresivas por 90 minutos
                                - **Cmp%**: Porcentaje de pases completados
                                - **xAG_per90**: Asistencias esperadas (xAG) por 90 minutos
                                - **PrgC_per90**: Conducciones progresivas por 90 minutos
                                - **Fld_per90**: Faltas recibidas por 90 minutos
                                - **Err_per90**: Errores que conducen a un tiro rival
                                - **Tkl%**: Porcentaje de √©xito en entradas 
                                - **Int_per90**: Intercepciones por 90 minutos
                                - **CrdY_per90**: Tarjetas amarillas por 90 minutos
                                - **Won%**: Porcentaje de duelos a√©reos ganados 
                                """)

                            elif poste_cat == "Milieux offensifs / Ailiers":
                                st.markdown("""
                                - **npxG_per90**: xG sin penaltis por 90 minutos
                                - **G-PK_per90**: Goles menos penaltis por 90 minutos
                                - **G-xG_per90**: G - xG por 90 minutos
                                - **PrgP_per90**: Pases progresivos por 90 minutos
                                - **PrgR_per90**: Recepciones progresivas por 90 minutos
                                - **Cmp%**: Porcentaje de pases completados
                                - **xAG_per90**: Asistencias esperadas (xAG) por 90 minutos
                                - **Succ_per90**: Regates exitosos por 90 minutos
                                - **Succ%**: Porcentaje de regates exitosos
                                - **PrgC_per90**: Conducciones progresivas por 90 minutos
                                - **Fld_per90**: Faltas recibidas por 90 minutos
                                - **Dis_per90**: Balones perdidos por 90 minutos
                                """)

                            elif poste_cat == "Attaquants":
                                st.markdown("""
                                - **npxG_per90**: xG sin penaltis por 90 minutos
                                - **Sh_per90**: Tiros por 90 minutos
                                - **G-PK_per90**: Goles menos penaltis por 90 minutos
                                - **G-xG_per90**: G - xG por 90 minutos
                                - **G/Sh**: Goles por tiro  
                                - **PrgP_per90**: Pases progresivos por 90 minutos  
                                - **PrgR_per90**: Recepciones progresivas por 90 minutos
                                - **Cmp%**: Porcentaje de pases completados
                                - **xAG_per90**: Asistencias esperadas (xAG) por 90 minutos
                                - **Succ_per_90**: Regates exitosos por 90 minutos  
                                - **PrgC_per90**: Conducciones progresivas por 90 minutos  
                                - **Dis_per90**: Balones perdidos por 90 minutos  
                                """)

                    # Radar comparativo
                    if poste_cat and poste_cat in category_stats:
                        stats_cols = [col for col in category_stats[poste_cat] if col in df.columns]

                        # A√±adir columna poste_cat si no existe
                        if 'poste_cat' not in df.columns:
                            df = df.copy()
                            df['poste_cat'] = df['position'].map(position_category)

                        radar_df = df[df['poste_cat'] == poste_cat][['player_name'] + stats_cols].copy()
                        radar_df = radar_df.dropna(subset=stats_cols).set_index('player_name')

                        # Asegurar que ambos jugadores est√©n presentes
                        for p, pdata in [(player1, player1_data), (player2, player2_data)]:
                            if p not in radar_df.index:
                                radar_df.loc[p] = pd.Series(pdata).reindex(stats_cols)

                        radar_vals = radar_df[stats_cols].apply(pd.to_numeric, errors='coerce')

                        # Percentiles (0 = peor, 1 = mejor)
                        rank_pct = radar_vals.rank(pct=True, method='average', ascending=True)

                        # Invertir m√©tricas donde "m√°s peque√±o = mejor"
                        invert_stats = globals().get("invert_stats", set())
                        for col in stats_cols:
                            if col in invert_stats:
                                rank_pct[col] = 1 - rank_pct[col]

                        # Valores normalizados
                        player1_norm = rank_pct.loc[player1].reindex(stats_cols).fillna(0)
                        player2_norm = rank_pct.loc[player2].reindex(stats_cols).fillna(0)

                        # Notas (si existen)
                        player1_rating = player1_data.get("rating", None)
                        player2_rating = player2_data.get("rating", None)
                        rating1_text = f"Nota: {round(player1_rating)}" if player1_rating is not None else ""
                        rating2_text = f"Nota: {round(player2_rating)}" if player2_rating is not None else ""

                        # T√≠tulo
                        st.markdown(
                            f"<h4 style='text-align: center;'>Radar comparativo: {player1} ({rating1_text}) vs {player2} ({rating2_text})</h4>",
                            unsafe_allow_html=True
                        )

                        # Radar de estad√≠sticas avanzadas
                        fig_pizza_stat_adv = plot_pizza_radar(
                            labels=stats_cols,
                            player_values=player1_norm * 100,
                            median_values=player2_norm * 100,
                            title=f"Estad√≠sticas avanzadas de {player1} vs {player2}",
                            legend_labels=(player1, {player2})
                        )

                        # Columnas de puntuaci√≥n por puesto
                        if poste_cat == "Gardiens de but":
                            pizza_cols = [
                                "score_goal_scoring_conceded", "score_efficiency", "score_error_fouls",
                                "score_short_clearance", "score_long_clearance", "score_positioning", "score_aerial_defense"
                            ]
                        else:
                            pizza_cols = [
                                "score_goal_scoring_created", "score_finish", "score_building", "score_creation",
                                "score_dribble", "score_projection", "score_defensive_actions", "score_waste",
                                "score_faults_committed", "score_provoked_fouls", "score_aerial"
                            ]

                        # Mantener solo columnas presentes
                        pizza_cols = [col for col in pizza_cols if col in df.columns]
                        pizza_labels = [translate_base_stat(col.replace("score_", ""), lang="es") for col in pizza_cols]

                        # Verificar columnas para ambos jugadores
                        if all((col in player1_data) and (col in player2_data) for col in pizza_cols):
                            player1_values = [player1_data[col] for col in pizza_cols]
                            player2_values = [player2_data[col] for col in pizza_cols]

                            player1_scaled = [v if pd.notna(v) else 0 for v in player1_values]
                            player2_scaled = [v if pd.notna(v) else 0 for v in player2_values]

                            # Radar de estad√≠sticas b√°sicas
                            fig_pizza_stat_basis = plot_pizza_radar(
                                labels=pizza_labels,
                                player_values=player1_scaled,
                                median_values=player2_scaled,
                                title=f"Estad√≠sticas b√°sicas de {player1} vs {player2}",
                                legend_labels=(player1, player2)
                            )

                        # Mostrar en Streamlit
                        col1, col2 = st.columns(2)
                        with col1:
                            st.pyplot(fig_pizza_stat_basis)
                        with col2:
                            st.pyplot(fig_pizza_stat_adv)


    elif selected == "Stats +":
        # Page en fran√ßais
        if lang == "Fran√ßais":
            st.markdown("<h4 style='text-align: center;'>üèÖ Classement des joueurs (0-100) pour les statistiques aggr√©g√©es par cat√©gorie selon leur poste</h4>", unsafe_allow_html=True) # Affichage du titre de la page
            df = pd.read_csv("../data/player/database_player.csv") # R√©cup√©ration des donn√©es
            
            # R√©cup√©ration des colonnes "score_" + "rating"
            all_stats_raw = [col for col in df.columns if col.startswith("score_")]
            if "rating" in df.columns:
                all_stats_raw.append("rating")

            # Traduction pour l'affichage
            fr_map = base_stat_translation.get("fr", {})

            translated_stats = [
                "Note" if col == "rating"
                else fr_map.get(col.replace("score_", ""), col)
                for col in all_stats_raw
            ]
            stat_name_mapping = dict(zip(translated_stats, all_stats_raw))
            
            selected_stat_display = st.sidebar.selectbox("Choisissez une statistique :", [""] + translated_stats) # Demande √† l'utilisateur du choix de statistique
            
            selected_stat = stat_name_mapping.get(selected_stat_display, None)

            if not selected_stat:
                # Si la m√©trique est selectionn√©, nous cachons l'image
                st.image("../image/player_ranking_basis.jpg")
                st.info("D√©rouler la barre lat√©rale pour s√©lectionner la langue, la m√©trique et les filtres de votre choix")

                    
            if selected_stat:
                # D√©but de la sidebar
                with st.sidebar:
                    st.markdown("### üéØ Filtres")
                    
                    df_with_stat = df.dropna(subset=[selected_stat]) # Filtre selon la statistique s√©lectionn√©e

                    filtered_df = df_with_stat.copy()  # Point de d√©part pour les filtres

                    # Filtre Poste
                    poste_options_raw = sorted(filtered_df["position"].dropna().unique())
                    poste_options_fr = [""] + [translate_position(p, lang="fr") for p in poste_options_raw]
                    poste_fr = st.selectbox("Poste", poste_options_fr)

                    if poste_fr:
                        idx = poste_options_fr.index(poste_fr) - 1
                        poste_en = poste_options_raw[idx]
                        filtered_df = filtered_df[filtered_df["position"] == poste_en]


                    # Filtre Championnat
                    championnat_options = sorted(filtered_df["Comp"].dropna().unique())
                    championnat = st.selectbox("Championnat", [""] + championnat_options)

                    if championnat:
                        filtered_df = filtered_df[filtered_df["Comp"] == championnat]

                    # Filtre Club
                    club_options = sorted(filtered_df["club_name"].dropna().unique())
                    club = st.selectbox("Club", [""] + club_options)

                    if club:
                        filtered_df = filtered_df[filtered_df["club_name"] == club]

                    # Filtre Pays
                    pays_options_raw = sorted(filtered_df["nationality"].dropna().unique())
                    pays_options_fr = [""] + [translate_country(p, lang="fr") for p in pays_options_raw]
                    pays_fr = st.selectbox("Pays", pays_options_fr, placeholder="")

                    if pays_fr:
                        idx = pays_options_fr.index(pays_fr) - 1  # -1 √† cause de l'option vide
                        pays_en = pays_options_raw[idx]
                        filtered_df = filtered_df[filtered_df["nationality"] == pays_en]


                    # Filtre Tranche d‚Äô√¢ge (cr√©ation dynamiquement des tranches d'√¢ge disponibles)
                    tranche_options = [""]

                    ages = filtered_df["Age"].dropna()

                    if any(ages < 23):
                        tranche_options.append("< 23 ans")
                    if any((ages >= 24) & (ages <= 29)):
                        tranche_options.append("24-29 ans")
                    if any(ages >= 30):
                        tranche_options.append("30 ans et +")

                    age_group = st.selectbox("Tranche d'√¢ge", tranche_options) # S√©lecteur de la trancge d'√¢ge

                    # Appliquer le filtre si s√©lectionn√©
                    if age_group:
                        if age_group == "< 23 ans":
                            filtered_df = filtered_df[filtered_df["Age"] < 23]
                        elif age_group == "24-29 ans":
                            filtered_df = filtered_df[(filtered_df["Age"] >= 24) & (filtered_df["Age"] <= 29)]
                        elif age_group == "30 ans et +":
                            filtered_df = filtered_df[filtered_df["Age"] >= 30]

                    # Filtre de valeur marchande
                    valeur_min_possible = 0
                    valeur_max_possible = int(filtered_df["marketValue"].max()) if not filtered_df["marketValue"].isnull().all() else 10_000_000

                    valeur_max = st.slider(
                        "Valeur marchande maximum (‚Ç¨)",
                        valeur_min_possible,
                        valeur_max_possible,
                        valeur_max_possible,
                        step=100000,
                        format="%d"
                    )

                    st.markdown(f"Valeur maximum s√©lectionn√© : **{format_market_value(valeur_max)}**") # Affichage du choix de l'utilisateur
                    filtered_df = filtered_df[filtered_df["marketValue"] <= valeur_max]

                # D√©finir les statistiques sp√©cifiques aux gardiens
                goalkeeper_stats = [
                    "goal_scoring_conceded", "efficiency", "error_fouls",
                    "short_clearance", "long_clearance", "positioning", "aerial_defense"
                ]

                # Liste de colonnes
                df_stat = filtered_df[
                    ['player_name', 'imageUrl', 'Age', 'nationality', 'club_name','Comp', 'marketValue','contract',
                    'position', selected_stat]
                ].dropna(subset=[selected_stat])

                # Filtrage conditionnel selon la statistique s√©lectionn√©e
                if selected_stat in [f"score_{stat}" for stat in goalkeeper_stats]:
                    df_stat = df_stat[df_stat['position'] == 'Goalkeeper']
                else:
                    df_stat = df_stat[df_stat['position'] != 'Goalkeeper']

                df_stat['position'] = df_stat['position'].apply(
                    lambda x: translate_position(x, lang="fr")
                )

                # Traduction du pays du joueur dans la table
                df_stat['nationality'] = df_stat['nationality'].apply(
                    lambda x: translate_country(x, lang="fr")
                )
                df_stat['marketValue'] = df_stat['marketValue'].apply(format_market_value) # Utilisation du format de market_value
                
                df_stat = df_stat.sort_values(by=selected_stat, ascending=False) # Ordonner les donn√©es du plus grand au plus petit

                top3 = df_stat.head(3).reset_index(drop=True) # Affichage du podium

                # Ordre podium et m√©dailles
                podium_order = [0, 1, 2]
                medals = ["ü•á","ü•à", "ü•â"]

                podium_html = "<div style='display: flex; overflow-x: auto; gap: 2rem; margin-bottom: 2rem; padding-bottom: 1rem; border-bottom: 1px solid #e0e0e0;'>"

                for display_index, i in enumerate(podium_order):
                    if i < len(top3):
                        player = top3.loc[i]
                        name = player['player_name']
                        stat = round(player[selected_stat]) if pd.notna(player[selected_stat]) else "-"
                        image_url = player['imageUrl']
                        image_html = f"<img src='{image_url}' style='width: 100%; max-width: 120px; border-radius: 10px; margin-bottom: 0.5rem;'>" if pd.notna(image_url) else ""

                        player_html = (
                            "<div style='min-width: 200px; text-align: center;'>"
                            f"<div style='font-size: 30px;'>{medals[display_index]}</div>"
                            f"<div style='font-weight: bold; font-size: 18px; margin: 0.5rem 0;'>{name}</div>"
                            f"{image_html}"
                            f"<div style='font-size: 16px;'><strong>{selected_stat_display}:</strong> {stat}</div>"
                            "</div>"
                        )
                        podium_html += player_html

                podium_html += "</div>"

                st.markdown(podium_html, unsafe_allow_html=True)

                # Choix des colonnes dans la table
                final_df = df_stat.rename(columns={selected_stat: 'Statistique'})
                final_df = final_df[[
                    'player_name', 'Statistique', 'Age', 'nationality', 'club_name', 'position','marketValue', 'contract'
                ]]

                st.dataframe(final_df, use_container_width=True)

        elif lang == "English":

            st.markdown("<h4 style='text-align: center;'>üèÖ Player rankings (0-100) for aggregate statistics by category according to their position</h4>", unsafe_allow_html=True) # Display title
            df = pd.read_csv("../data/player/database_player.csv") # Collect the data
            
            # Retrieve ‚Äúscore_‚Äù + ‚Äúrating‚Äù columns
            all_stats_raw = [col for col in df.columns if col.startswith("score_")]
            if "rating" in df.columns:
                all_stats_raw.append("rating")

            translated_stats = [format_stat_name(col) for col in all_stats_raw] # Apply format to names for display

            stat_name_mapping = dict(zip(translated_stats, all_stats_raw)) # Create display mapping ‚Üí real name

            selected_stat_display = st.sidebar.selectbox("Select a statistic :", [""] + translated_stats) # Selector in the sidebar

            selected_stat = stat_name_mapping.get(selected_stat_display, None) # Recover the real name of the column

            if not selected_stat:
                # If the metric is selected, we hide the image
                st.image("../image/player_ranking_basis.jpg")
                st.info("Scroll down the sidebar to select the language, metric and filters of your choice")
                    
                    
            if selected_stat:
                # Top of the sidebar
                with st.sidebar:
                    st.markdown("### üéØ Filters")

                    df_with_stat = df.dropna(subset=[selected_stat]) # Filter by selected statistic

                    filtered_df = df_with_stat.copy()  # Starting point for filters

                    # Position filter
                    poste_options_raw = sorted(filtered_df["position"].dropna().unique())
                    poste_options = st.selectbox("Position", [""] + poste_options_raw )

                    if poste_options:
                        filtered_df = filtered_df[filtered_df["position"] == poste_options]

                    # League filter
                    championnat_options = sorted(filtered_df["Comp"].dropna().unique())
                    championnat = st.selectbox("League", [""] + championnat_options)

                    if championnat:
                        filtered_df = filtered_df[filtered_df["Comp"] == championnat]

                    # Club filter
                    club_options = sorted(filtered_df["club_name"].dropna().unique())
                    club = st.selectbox("Club", [""] + club_options)

                    if club:
                        filtered_df = filtered_df[filtered_df["club_name"] == club]

                    # Country filter
                    pays_options_raw = sorted(filtered_df["nationality"].dropna().unique())
                    pays_options = st.selectbox("Country", [""] + pays_options_raw )

                    if pays_options:
                        filtered_df = filtered_df[filtered_df["nationality"] == pays_options]

                    # Age group filter (dynamically create the age ranges available)
                    tranche_options = [""]
                    ages = filtered_df["Age"].dropna()

                    if any(ages < 23):
                        tranche_options.append("< 23 yrs")
                    if any((ages >= 24) & (ages <= 29)):
                        tranche_options.append("24-29 yrs")
                    if any(ages >= 30):
                        tranche_options.append("30 yrs and +")

                    age_group = st.selectbox("Age group", tranche_options) # Selector

                    # Apply filter if selected
                    if age_group:
                        if age_group == "< 23 yrs":
                            filtered_df = filtered_df[filtered_df["Age"] < 23]
                        elif age_group == "24-29 yrs":
                            filtered_df = filtered_df[(filtered_df["Age"] >= 24) & (filtered_df["Age"] <= 29)]
                        elif age_group == "30 yrs abd +":
                            filtered_df = filtered_df[filtered_df["Age"] >= 30]

                    # Market value filter
                    valeur_min_possible = 0
                    valeur_max_possible = int(filtered_df["marketValue"].max()) if not filtered_df["marketValue"].isnull().all() else 10_000_000

                    valeur_max = st.slider(
                        "Maximum market value (‚Ç¨)",
                        valeur_min_possible,
                        valeur_max_possible,
                        valeur_max_possible,
                        step=100000,
                        format="%d"
                    )

                    st.markdown(f"Maximum value selected: **{format_market_value(valeur_max)}**") # Display the choice of the user
                    filtered_df = filtered_df[filtered_df["marketValue"] <= valeur_max]
            

                # Define statistics specific to goalkeepers
                goalkeeper_stats = [
                    "goal_scoring_conceded", "efficiency", "error_fouls",
                    "short_clearance", "long_clearance", "positioning", "aerial_defense"
                ]
                # Selecting columns
                df_stat = filtered_df[
                    ['player_name', 'imageUrl', 'Age', 'nationality', 'club_name','position',
                    'Comp', 'marketValue','contract', selected_stat]
                ].dropna(subset=[selected_stat])

                # Conditional filtering by selected statistic
                if selected_stat in [f"score_{stat}" for stat in goalkeeper_stats]:
                    df_stat = df_stat[df_stat['position'] == 'Goalkeeper']
                else:
                    df_stat = df_stat[df_stat['position'] != 'Goalkeeper']

                df_stat['marketValue'] = df_stat['marketValue'].apply(format_market_value) # Format market value
                    
                df_stat = df_stat.sort_values(by=selected_stat, ascending=False) # Order data from largest to smallest

                top3 = df_stat.head(3).reset_index(drop=True) # Displaying podium

                podium_order = [0, 1, 2]  # 1st, 2nd, 3rd
                medals = ["ü•á", "ü•à", "ü•â"]

                # Start of scrollable container
                podium_html = "<div style='display: flex; overflow-x: auto; gap: 2rem; margin-bottom: 2rem; padding-bottom: 1rem; border-bottom: 1px solid #e0e0e0;'>"

                # Creating player blocks
                for display_index, i in enumerate(podium_order):
                    if i < len(top3):
                        player = top3.loc[i]
                        name = player['player_name']
                        image_url = player['imageUrl']
                        stat_val = round(player[selected_stat]) if pd.notna(player[selected_stat]) else "-"
                        stat_label = format_stat_name(selected_stat)

                        image_html = (
                            f"<img src='{image_url}' style='width: 100%; max-width: 120px; border-radius: 10px; margin-bottom: 0.5rem;'>"
                            if pd.notna(image_url) else ""
                        )

                        player_html = (
                            "<div style='min-width: 200px; text-align: center;'>"
                            f"<div style='font-size: 30px;'>{medals[display_index]}</div>"
                            f"<div style='font-weight: bold; font-size: 18px; margin: 0.5rem 0;'>{name}</div>"
                            f"{image_html}"
                            f"<div style='font-size: 16px;'><strong>{stat_label}:</strong> {stat_val}</div>"
                            "</div>"
                        )

                        podium_html += player_html

                # Closing the container
                podium_html += "</div>"

                # Final display
                st.markdown(podium_html, unsafe_allow_html=True)

                # We display the table with the columns desired
                final_df = df_stat.rename(columns={selected_stat: 'Statistic'})
                final_df = final_df[[
                    'player_name', 'Statistic', 'Age', 'nationality', 'club_name', 'position', 'marketValue', 'contract'
                ]]

                st.dataframe(final_df, use_container_width=True)
        
        else:
            # P√°gina en espa√±ol
            st.markdown("<h4 style='text-align: center;'>üèÖ Clasificaci√≥n de jugadores (0-100) para estad√≠sticas agregadas por categor√≠a seg√∫n su posici√≥n</h4>", unsafe_allow_html=True)
            df = pd.read_csv("../data/player/database_player.csv")  # Cargar datos

            # Columnas "score_" + "rating"
            all_stats_raw = [col for col in df.columns if col.startswith("score_")]
            if "rating" in df.columns:
                all_stats_raw.append("rating")

            # Traducci√≥n para la visualizaci√≥n
            es_map = base_stat_translation.get("es", {})
            translated_stats = [
                "Nota" if col == "rating"
                else es_map.get(col.replace("score_", ""), col)
                for col in all_stats_raw
            ]
            stat_name_mapping = dict(zip(translated_stats, all_stats_raw))

            selected_stat_display = st.sidebar.selectbox("Elige una estad√≠stica:", [""] + translated_stats)
            selected_stat = stat_name_mapping.get(selected_stat_display, None)

            if not selected_stat:
                # Imagen e info si no hay m√©trica seleccionada
                st.image("../image/player_ranking_basis.jpg")
                st.info("Despliega la barra lateral para seleccionar el idioma, la m√©trica y los filtros que quieras")

            if selected_stat:
                # Sidebar de filtros
                with st.sidebar:
                    st.markdown("### üéØ Filtros")

                    df_with_stat = df.dropna(subset=[selected_stat])  # Filtrar por la estad√≠stica seleccionada
                    filtered_df = df_with_stat.copy()

                    # Filtro Posici√≥n
                    poste_options_raw = sorted(filtered_df["position"].dropna().unique())
                    poste_options_es = [""] + [translate_position(p, lang="es") for p in poste_options_raw]
                    poste_es = st.selectbox("Posici√≥n", poste_options_es)

                    if poste_es:
                        idx = poste_options_es.index(poste_es) - 1
                        poste_en = poste_options_raw[idx]
                        filtered_df = filtered_df[filtered_df["position"] == poste_en]

                    # Filtro Liga
                    campeonato_options = sorted(filtered_df["Comp"].dropna().unique())
                    campeonato = st.selectbox("Liga", [""] + campeonato_options)
                    if campeonato:
                        filtered_df = filtered_df[filtered_df["Comp"] == campeonato]

                    # Filtro Club
                    club_options = sorted(filtered_df["club_name"].dropna().unique())
                    club = st.selectbox("Club", [""] + club_options)
                    if club:
                        filtered_df = filtered_df[filtered_df["club_name"] == club]

                    # Filtro Pa√≠s
                    pays_options_raw = sorted(filtered_df["nationality"].dropna().unique())
                    pays_options_es = [""] + [translate_country(p, lang="es") for p in pays_options_raw]
                    pais_es = st.selectbox("Pa√≠s", pays_options_es, placeholder="")
                    if pais_es:
                        idx = pays_options_es.index(pais_es) - 1  # -1 por la opci√≥n vac√≠a
                        pais_en = pays_options_raw[idx]
                        filtered_df = filtered_df[filtered_df["nationality"] == pais_en]

                    # Filtro Tramo de edad (din√°mico)
                    tranche_options = [""]
                    ages = filtered_df["Age"].dropna()

                    if any(ages < 23):
                        tranche_options.append("< 23 a√±os")
                    if any((ages >= 24) & (ages <= 29)):
                        tranche_options.append("24-29 a√±os")
                    if any(ages >= 30):
                        tranche_options.append("30 a√±os o m√°s")

                    age_group = st.selectbox("Tramo de edad", tranche_options)

                    # Aplicar filtro de edad
                    if age_group:
                        if age_group == "< 23 a√±os":
                            filtered_df = filtered_df[filtered_df["Age"] < 23]
                        elif age_group == "24-29 a√±os":
                            filtered_df = filtered_df[(filtered_df["Age"] >= 24) & (filtered_df["Age"] <= 29)]
                        elif age_group == "30 a√±os o m√°s":
                            filtered_df = filtered_df[filtered_df["Age"] >= 30]

                    # Filtro de valor de mercado
                    valor_min_posible = 0
                    valor_max_posible = int(filtered_df["marketValue"].max()) if not filtered_df["marketValue"].isnull().all() else 10_000_000

                    valor_max = st.slider(
                        "Valor de mercado m√°ximo (‚Ç¨)",
                        valor_min_posible,
                        valor_max_posible,
                        valor_max_posible,
                        step=100000,
                        format="%d"
                    )

                    st.markdown(f"Valor m√°ximo seleccionado: **{format_market_value(valor_max)}**")
                    filtered_df = filtered_df[filtered_df["marketValue"] <= valor_max]

                # Stats espec√≠ficas de porteros
                goalkeeper_stats = [
                    "goal_scoring_conceded", "efficiency", "error_fouls",
                    "short_clearance", "long_clearance", "positioning", "aerial_defense"
                ]

                # Subconjunto de columnas
                df_stat = filtered_df[
                    ['player_name', 'imageUrl', 'Age', 'nationality', 'club_name','Comp', 'marketValue', 'contract',
                    'position', selected_stat]
                ].dropna(subset=[selected_stat])

                # Filtrado condicional seg√∫n la estad√≠stica seleccionada
                if selected_stat in [f"score_{stat}" for stat in goalkeeper_stats]:
                    df_stat = df_stat[df_stat['position'] == 'Goalkeeper']
                else:
                    df_stat = df_stat[df_stat['position'] != 'Goalkeeper']

                # Posici√≥n en ES (solo visual)
                df_stat['position'] = df_stat['position'].apply(lambda x: translate_position(x, lang="es"))

                # Pa√≠s en ES (solo visual)
                df_stat['nationality'] = df_stat['nationality'].apply(lambda x: translate_country(x, lang="es"))

                # Formato del valor de mercado
                df_stat['marketValue'] = df_stat['marketValue'].apply(format_market_value)

                # Ordenar de mayor a menor
                df_stat = df_stat.sort_values(by=selected_stat, ascending=False)

                # Top 3 (podio)
                top3 = df_stat.head(3).reset_index(drop=True)
                podium_order = [0, 1, 2]
                medals = ["ü•á", "ü•à", "ü•â"]

                podium_html = "<div style='display: flex; overflow-x: auto; gap: 2rem; margin-bottom: 2rem; padding-bottom: 1rem; border-bottom: 1px solid #e0e0e0;'>"

                for display_index, i in enumerate(podium_order):
                    if i < len(top3):
                        player = top3.loc[i]
                        name = player['player_name']
                        stat = round(player[selected_stat]) if pd.notna(player[selected_stat]) else "-"
                        image_url = player['imageUrl']
                        image_html = f"<img src='{image_url}' style='width: 100%; max-width: 120px; border-radius: 10px; margin-bottom: 0.5rem;'>" if pd.notna(image_url) else ""

                        player_html = (
                            "<div style='min-width: 200px; text-align: center;'>"
                            f"<div style='font-size: 30px;'>{medals[display_index]}</div>"
                            f"<div style='font-weight: bold; font-size: 18px; margin: 0.5rem 0;'>{name}</div>"
                            f"{image_html}"
                            f"<div style='font-size: 16px;'><strong>{selected_stat_display}:</strong> {stat}</div>"
                            "</div>"
                        )
                        podium_html += player_html

                podium_html += "</div>"
                st.markdown(podium_html, unsafe_allow_html=True)

                # Tabla final (renombrar solo la columna de la m√©trica)
                final_df = df_stat.rename(columns={selected_stat: 'Estad√≠stica'})
                final_df = final_df[
                    ['player_name', 'Estad√≠stica', 'Age', 'nationality', 'club_name',
                    'position', 'marketValue', 'contract']
                ]

                st.dataframe(final_df, use_container_width=True)

    elif selected == "Stats":
        # Page en fran√ßais
        if lang == "Fran√ßais":
            st.markdown("<h4 style='text-align: center;'>üèÜ Classement des joueurs pour les statistiques brutes</h4>", unsafe_allow_html=True) # Affichage du titre de la page
            df = pd.read_csv("../data/player/database_player.csv") # R√©cup√©ration des donn√©es

            all_stats = sorted(set(stat for stats in category_stats.values() for stat in stats if stat in df.columns)) # Liste des statistiques disponibles

            selected_stat = st.sidebar.selectbox("Choisissez une statistique :", [""] + all_stats) # Choix de la statistique dans la sidebar
            
            if not selected_stat:
                # Si la m√©trique est selectionn√©, nous cachons l'image
                st.image("../image/player_ranking.jpg")
                st.info("D√©rouler la barre lat√©rale pour s√©lectionner la langue, la m√©trique et les filtres de votre choix")
                    
            if selected_stat:
                # D√©but de la sidebar
                with st.sidebar:
                    st.markdown("### üéØ Filtres")

                    df_with_stat = df.dropna(subset=[selected_stat]) # Filtre selon la statistique s√©lectionn√©e

                    filtered_df = df_with_stat.copy()  # Point de d√©part pour les filtres

                    # Filtre Poste
                    poste_options_raw = sorted(filtered_df["position"].dropna().unique())
                    poste_options_fr = [""] + [translate_position(p, lang="fr") for p in poste_options_raw]
                    poste_fr = st.selectbox("Poste", poste_options_fr)

                    if poste_fr:
                        idx = poste_options_fr.index(poste_fr) - 1
                        poste_en = poste_options_raw[idx]
                        filtered_df = filtered_df[filtered_df["position"] == poste_en]

                    # Filtre Championnat
                    championnat_options = sorted(filtered_df["Comp"].dropna().unique())
                    championnat = st.selectbox("Championnat", [""] + championnat_options)

                    if championnat:
                        filtered_df = filtered_df[filtered_df["Comp"] == championnat]

                    # Filtre Club
                    club_options = sorted(filtered_df["club_name"].dropna().unique())
                    club = st.selectbox("Club", [""] + club_options)

                    if club:
                        filtered_df = filtered_df[filtered_df["club_name"] == club]

                    # Filtre Pays
                    pays_options_raw = sorted(filtered_df["nationality"].dropna().unique())
                    pays_options_fr = [""] + [translate_country(p, lang="fr") for p in pays_options_raw]
                    pays_fr = st.selectbox("Pays", pays_options_fr, placeholder="")

                    if pays_fr:
                        idx = pays_options_fr.index(pays_fr) - 1  # -1 √† cause de l'option vide
                        pays_en = pays_options_raw[idx]
                        filtered_df = filtered_df[filtered_df["nationality"] == pays_en]

                    # Filtre Tranche d‚Äô√¢ge (cr√©er dynamiquement les tranches d'√¢ge disponibles)
                    tranche_options = [""]
                    ages = filtered_df["Age"].dropna()

                    if any(ages < 23):
                        tranche_options.append("< 23 ans")
                    if any((ages >= 24) & (ages <= 29)):
                        tranche_options.append("24-29 ans")
                    if any(ages >= 30):
                        tranche_options.append("30 ans et +")

                    age_group = st.selectbox("Tranche d'√¢ge", tranche_options) # S√©lecteur

                    # Appliquer le filtre si s√©lectionn√©
                    if age_group:
                        if age_group == "< 23 ans":
                            filtered_df = filtered_df[filtered_df["Age"] < 23]
                        elif age_group == "24-29 ans":
                            filtered_df = filtered_df[(filtered_df["Age"] >= 24) & (filtered_df["Age"] <= 29)]
                        elif age_group == "30 ans et +":
                            filtered_df = filtered_df[filtered_df["Age"] >= 30]

                    # Filtre de valeur marchande
                    valeur_min_possible = 0
                    valeur_max_possible = int(filtered_df["marketValue"].max()) if not filtered_df["marketValue"].isnull().all() else 10_000_000

                    valeur_max = st.slider(
                        "Valeur marchande maximum (‚Ç¨)",
                        valeur_min_possible,
                        valeur_max_possible,
                        valeur_max_possible,
                        step=100000,
                        format="%d"
                    )

                    st.markdown(f"Valeur maximum s√©lectionn√© : **{format_market_value(valeur_max)}**") # Affichage du choix de l'utilisateur
                    filtered_df = filtered_df[filtered_df["marketValue"] <= valeur_max]

                # Placement du glossaire en sidebar
                with st.sidebar.expander("Glossaire des statistiques"):
                    st.markdown("""
                    ### Gardien de but :
                    - **GA_per90** : Buts encaiss√©s par 90 minutes 
                    - **PSxG_per90** : Post-Shot Expected Goals par 90 minutes
                    - **/90 (PSxG-GA/90)** : Diff√©rence entre PSxG et buts encaiss√©s par 90 minutes
                    - **Save%** : Pourcentage d‚Äôarr√™ts effectu√©s  
                    - **PSxG+/-** : Diff√©rence entre les PSxG (xG post-tir) et buts encaiss√©s  
                    - **Err_per90** : Erreurs conduisant √† un tir adverse par 90 minutes
                    - **Launch%** : Pourcentage de passes longues  
                    - **AvgLen** : Longueur moyenne des passes (en yards)  
                    - **Cmp%** : Pourcentage de passes r√©ussies  
                    - **AvgDist** : Distance moyenne des passes (en yards)  
                    - **#OPA_per90** : Actions d√©fensives hors de la surface par 90 minutes  
                    - **Stp%** : Pourcentage de centres arr√™t√©s dans la surface  

                    ### D√©fenseurs centraux :
                    - **G-PK_per90** : Buts marqu√©es - p√©naltys inscrits par 90 minutes
                    - **PrgP_per90** : Passes progressives par 90 minutes
                    - **Cmp%** : Pourcentage de passes r√©ussies
                    - **xAG_per90** : Expected Assisted Goals par 90 minutes
                    - **PrgC_per90** : Conduites progressives par 90 minutes
                    - **Err_per90** : Erreurs menant √† un tir adverse
                    - **Tkl%** : Pourcentage de tacles effectu√©s
                    - **Int_per90** : Interceptions par 90 minutes
                    - **Tkl_per90** : Tacles par 90 minutes
                    - **CrdY_per90** : Cartons jaunes par 90 minutes
                    - **Won_per90** : Duels a√©riens gagn√©s par 90 minutes
                    - **Won%** : Pourcentage de duels a√©riens gagn√©s

                    ### D√©fenseurs lat√©raux :
                    - **G-PK_per90** : Buts marqu√©es - p√©naltys inscrits par 90 minutes
                    - **PrgP_per90** : Passes progressives par 90 minutes
                    - **Cmp%** : Pourcentage de passes r√©ussies
                    - **xAG_per90** : Expected Assisted Goals par 90 minutes
                    - **PrgC_per90** : Conduites progressives par 90 minutes
                    - **Err_per90** : Erreurs menant √† un tir adverse
                    - **Tkl%** : Pourcentage de tacles effectu√©s 
                    - **Int_per90** : Interceptions par 90 minutes
                    - **Tkl_per90** : Tacles par 90 minutes
                    - **CrdY_per90** : Cartons jaunes par 90 minutes
                    - **Won_per90** : Duels a√©riens gagn√©s par 90 minutes
                    - **Won%** : Pourcentage de duels a√©riens gagn√©s 

                    ### Milieux de terrain :
                    - **G-PK_per90** : Buts marqu√©es - p√©naltys inscrits par 90 minutes
                    - **PrgP_per90** : Passes progressives par 90 minutes
                    - **PrgR_per90** : Passes progressives re√ßues par 90 minutes
                    - **Cmp%** : Pourcentage de passes r√©ussies
                    - **xAG_per90** : Expected Assisted Goals par 90 minutes
                    - **PrgC_per90** : Conduites progressives par 90 minutes
                    - **Fld_per90** : Fautes subies par 90 minutes
                    - **Err_per90** : Erreurs menant √† un tir adverse
                    - **Tkl%** : Pourcentage de tacles effectu√©s 
                    - **Int_per90** : Interceptions par 90 minutes
                    - **CrdY_per90** : Cartons jaunes par 90 minutes
                    - **Won%** : Pourcentage de duels a√©riens gagn√©s 

                    ### Milieux offensifs / Ailiers :
                    - **npxG_per90** : Non-penalty Expected Goals par 90 minutes
                    - **G-PK_per90** : Buts marqu√©es - p√©naltys inscrits par 90 minutes
                    - **G-xG_per90** : Expected Goals par 90 minutes
                    - **PrgP_per90** : Passes progressives par 90 minutes
                    - **PrgR_per90** : Passes progressives re√ßues par 90 minutes
                    - **Cmp%** : Pourcentage de passes r√©ussies
                    - **xAG_per90** : Expected Assisted Goals par 90 minutes
                    - **Succ_per90** : Dribbles r√©ussis par 90 minutes
                    - **Succ%** : Pourcentage de dribbles r√©ussis
                    - **PrgC_per90** : Conduites progressives par 90 minutes
                    - **Fld_per90** : Fautes subies par 90 minutes
                    - **Dis_per90** : Ballons perdus par 90 minutes

                    ### Attaquants :
                    - **npxG_per90** : Non-penalty Expected Goals par 90 minutes
                    - **Sh_per90** : Tirs tent√©s par 90 minutes
                    - **G-PK_per90** : Buts marqu√©es - p√©naltys inscrits par 90 minutes
                    - **G-xG_per90** : Expected Goals par 90 minutes
                    - **G/Sh** : Buts par tir  
                    - **PrgP_per90** : Passes progressives par 90 minutes  
                    - **PrgR_per90** : Passes progressives re√ßues par 90 minutes
                    - **Cmp%** : Pourcentage de passes r√©ussies
                    - **xAG_per90** : Expected Assisted Goals par 90 minutes
                    - **Succ_per_90** : Dribbles r√©ussis par 90 minutes  
                    - **PrgC_per90** : Conduites progressives par 90 minutes  
                    - **Dis_per90** : Ballons perdus par 90 minutes  
                    """)

                # Appliquer des conditions minimales sur les m√©triques sp√©cifiques
                thresholds = {
                    'Cmp%': ('Cmp', 50),
                    'Tkl%': ('Tkl', 7),
                    'Won%': ('Won', 6),
                    'Succ%': ('Succ', 6)
                }

                if selected_stat in thresholds:
                    col, min_value = thresholds[selected_stat]
                    
                    # S'assurer que la colonne existe et que les valeurs sont num√©riques
                    if col in filtered_df.columns:
                        filtered_df = filtered_df[pd.to_numeric(filtered_df[col], errors='coerce') > min_value]
                        st.markdown(f"<small><strong>Filtre : {col} > {min_value}</strong></small>", unsafe_allow_html=True)

                # Liste de colonnes
                df_stat = filtered_df[
                    ['player_name', 'imageUrl', 'Age', 'nationality', 'club_name','Comp', 'marketValue','contract',
                    'position', selected_stat]
                ].dropna(subset=[selected_stat])

                # Traduction du pays du joueur dans la table
                df_stat['nationality'] = df_stat['nationality'].apply(
                    lambda x: translate_country(x, lang="fr")
                )
                df_stat['marketValue'] = df_stat['marketValue'].apply(format_market_value) # Utilisation du format de market_value

                # Filtrage sp√©cial si la statistique s√©lectionn√©e est reserv√©e aux gardiens
                if selected_stat in ['Saves_per90', 'Save%', '/90', 'PSxG+/-','AvgLen', 'Launch%', 'Stp%', '#OPA_per90', 'CS%']:
                    df_stat = df_stat[df_stat['position'] == 'Goalkeeper']
        
                # Filtrage sp√©cial si la statistique s√©lectionn√©e est GA_per90
                if selected_stat == 'GA_per90':
                    df_stat = df_stat[df_stat['position'] == 'Goalkeeper']
                    df_stat = df_stat.sort_values(by=selected_stat, ascending=True)
                else:
                    df_stat = df_stat.sort_values(by=selected_stat, ascending=False)

                # Cas particuliers : exclusion des gardiens pour certaines statistiques
                if selected_stat in ['Won%', 'Tkl%','Succ%']:
                    df_stat = df_stat[df_stat['position'] != 'Goalkeeper']

                df_stat['position'] = df_stat['position'].apply(
                    lambda x: translate_position(x, lang="fr")
                )
                top3 = df_stat.head(3).reset_index(drop=True) # Affichage du podium

                podium_order = [0, 1, 2]
                medals = ["ü•á", "ü•à", "ü•â"]

                podium_html = (
                    "<div style='overflow-x: auto; margin-bottom: 2rem; padding-bottom: 1rem; "
                    "border-bottom: 1px solid #e0e0e0; width: 100%;'>"
                    "<div style='display: inline-flex; gap: 2rem; white-space: nowrap;'>"
                )

                for display_index, i in enumerate(podium_order):
                    if i < len(top3):
                        player = top3.loc[i]
                        name = player['player_name']
                        image_url = player['imageUrl']
                        stat_val = round(player[selected_stat], 2) if pd.notna(player[selected_stat]) else "-"

                        image_html = (
                            f"<img src='{image_url}' style='width: 100%; max-width: 120px; "
                            "border-radius: 10px; margin-bottom: 0.5rem;'>"
                            if pd.notna(image_url) else ""
                        )

                        player_html = (
                            "<div style='display: inline-block; min-width: 200px; max-width: 220px; text-align: center;'>"
                            f"<div style='font-size: 30px;'>{medals[display_index]}</div>"
                            f"<div style='font-weight: bold; font-size: 18px; margin: 0.5rem 0;'>{name}</div>"
                            f"{image_html}"
                            f"<div style='font-size: 16px;'><strong>{selected_stat}:</strong> {stat_val}</div>"
                            "</div>"
                        )

                        podium_html += player_html

                podium_html += "</div></div>"

                st.markdown(podium_html, unsafe_allow_html=True)

                # Choix des colonnes dans la table
                final_df = df_stat.rename(columns={selected_stat: 'Statistique'})
                final_df = final_df[[
                    'player_name', 'Statistique', 'Age', 'nationality', 'club_name', 'position','marketValue', 'contract'
                ]]

                st.dataframe(final_df, use_container_width=True)

        elif lang == "English":
            st.markdown("<h4 style='text-align: center;'>üèÜ Player rankings for raw statistics</h4>", unsafe_allow_html=True) # Display the title
            
            df = pd.read_csv("../data/player/database_player.csv") # Recovering data

            all_stats = sorted(set(stat for stats in category_stats.values() for stat in stats if stat in df.columns)) # List of available statistics

            selected_stat = st.sidebar.selectbox("Choose a metric :", [""] + all_stats) # Choice of statistics in the sidebar
            
            if not selected_stat:
                # If the metric is selected, we hide the image
                st.image("../image/player_ranking.jpg")
                st.info("Scroll down the sidebar to select the language, metric and filters of your choice")
                    
            if selected_stat:
                # Top of the sidebar
                with st.sidebar:
                    st.markdown("### üéØ Filters")

                    df_with_stat = df.dropna(subset=[selected_stat]) # Filter by selected statistic

                    filtered_df = df_with_stat.copy()  # Starting point for filters

                    # Position filter
                    poste_options_raw = sorted(filtered_df["position"].dropna().unique())
                    poste_options = st.selectbox("Position", [""] + poste_options_raw )

                    if poste_options:
                        filtered_df = filtered_df[filtered_df["position"] == poste_options]

                    # League filter
                    championnat_options = sorted(filtered_df["Comp"].dropna().unique())
                    championnat = st.selectbox("League", [""] + championnat_options)

                    if championnat:
                        filtered_df = filtered_df[filtered_df["Comp"] == championnat]

                    # Club filter
                    club_options = sorted(filtered_df["club_name"].dropna().unique())
                    club = st.selectbox("Club", [""] + club_options)

                    if club:
                        filtered_df = filtered_df[filtered_df["club_name"] == club]

                    # Country filter
                    pays_options_raw = sorted(filtered_df["nationality"].dropna().unique())
                    pays_options = st.selectbox("Country", [""] + pays_options_raw )

                    if pays_options:
                        filtered_df = filtered_df[filtered_df["nationality"] == pays_options]

                    # Age group filter (dynamically create the age ranges available)
                    tranche_options = [""]
                    ages = filtered_df["Age"].dropna()

                    if any(ages < 23):
                        tranche_options.append("< 23 yrs")
                    if any((ages >= 24) & (ages <= 29)):
                        tranche_options.append("24-29 yrs")
                    if any(ages >= 30):
                        tranche_options.append("30 yrs and +")

                    age_group = st.selectbox("Age group", tranche_options) # Selector

                    # Apply filter if selected
                    if age_group:
                        if age_group == "< 23 yrs":
                            filtered_df = filtered_df[filtered_df["Age"] < 23]
                        elif age_group == "24-29 yrs":
                            filtered_df = filtered_df[(filtered_df["Age"] >= 24) & (filtered_df["Age"] <= 29)]
                        elif age_group == "30 yrs abd +":
                            filtered_df = filtered_df[filtered_df["Age"] >= 30]

                    # Market value filter
                    valeur_min_possible = 0
                    valeur_max_possible = int(filtered_df["marketValue"].max()) if not filtered_df["marketValue"].isnull().all() else 10_000_000

                    valeur_max = st.slider(
                        "Maximum market value (‚Ç¨)",
                        valeur_min_possible,
                        valeur_max_possible,
                        valeur_max_possible,
                        step=100000,
                        format="%d"
                    )

                    st.markdown(f"Maximum value selected: **{format_market_value(valeur_max)}**") # Display the choice of the user
                    filtered_df = filtered_df[filtered_df["marketValue"] <= valeur_max]

                # Statistics glossary in the sidebar
                with st.sidebar.expander("Statistics glossary"):
                    st.markdown("""
                    ### Goalkeeper :
                    - **GA_per90**: Goals conceded per 90 minutes  
                    - **PSxG_per90**: Post-Shot Expected Goals per 90 minutes  
                    - **/90 (PSxG-GA/90)**: Difference between PSxG and goals conceded per 90 minutes  
                    - **Save%**: Save percentage  
                    - **PSxG+/-**: Difference between PSxG and goals conceded  
                    - **Err_per90**: Errors leading to a shot per 90 minutes  
                    - **Launch%**: Percentage of long passes  
                    - **AvgLen**: Average pass length (in yards)  
                    - **Cmp%**: Pass completion percentage  
                    - **AvgDist**: Average pass distance (in yards)  
                    - **#OPA_per90**: Defensive actions outside the penalty area per 90 minutes  
                    - **Stp%**: Percentage of crosses stopped inside the box 

                    ### Center Back :
                    - **G-PK_per90**: Goals scored minus penalties per 90 minutes  
                    - **PrgP_per90**: Progressive passes per 90 minutes  
                    - **Cmp%**: Pass completion percentage  
                    - **xAG_per90**: Expected Assisted Goals per 90 minutes  
                    - **PrgC_per90**: Progressive carries per 90 minutes  
                    - **Err_per90**: Errors leading to a shot  
                    - **Tkl%**: Tackle success rate  
                    - **Int_per90**: Interceptions per 90 minutes  
                    - **Tkl_per90**: Tackles per 90 minutes  
                    - **CrdY_per90**: Yellow cards per 90 minutes  
                    - **Won_per90**: Aerial duels won per 90 minutes  
                    - **Won%**: Aerial duel success rate  

                    ### Full-backs :
                    - **G-PK_per90**: Goals scored minus penalties per 90 minutes  
                    - **PrgP_per90**: Progressive passes per 90 minutes  
                    - **Cmp%**: Pass completion percentage  
                    - **xAG_per90**: Expected Assisted Goals per 90 minutes  
                    - **PrgC_per90**: Progressive carries per 90 minutes  
                    - **Err_per90**: Errors leading to a shot  
                    - **Tkl%**: Tackle success rate  
                    - **Int_per90**: Interceptions per 90 minutes  
                    - **Tkl_per90**: Tackles per 90 minutes  
                    - **CrdY_per90**: Yellow cards per 90 minutes  
                    - **Won_per90**: Aerial duels won per 90 minutes  
                    - **Won%**: Aerial duel success rate  

                    ### Midfielders :
                    - **G-PK_per90**: Goals scored minus penalties per 90 minutes  
                    - **PrgP_per90**: Progressive passes per 90 minutes  
                    - **PrgR_per90**: Progressive passes received per 90 minutes  
                    - **Cmp%**: Pass completion percentage  
                    - **xAG_per90**: Expected Assisted Goals per 90 minutes  
                    - **PrgC_per90**: Progressive carries per 90 minutes  
                    - **Fld_per90**: Fouls drawn per 90 minutes  
                    - **Err_per90**: Errors leading to a shot  
                    - **Tkl%**: Tackle success rate  
                    - **Int_per90**: Interceptions per 90 minutes  
                    - **CrdY_per90**: Yellow cards per 90 minutes  
                    - **Won%**: Aerial duel success rate

                    ### Attacking midfielders / Wingers :
                    - **npxG_per90**: Non-penalty Expected Goals per 90 minutes  
                    - **G-PK_per90**: Goals scored minus penalties per 90 minutes  
                    - **G-xG_per90**: Difference between goals and Expected Goals per 90 minutes  
                    - **PrgP_per90**: Progressive passes per 90 minutes  
                    - **PrgR_per90**: Progressive passes received per 90 minutes  
                    - **Cmp%**: Pass completion percentage  
                    - **xAG_per90**: Expected Assisted Goals per 90 minutes  
                    - **Succ_per90**: Successful dribbles per 90 minutes  
                    - **Succ%**: Dribble success rate  
                    - **PrgC_per90**: Progressive carries per 90 minutes  
                    - **Fld_per90**: Fouls drawn per 90 minutes  
                    - **Dis_per90**: Dispossessions per 90 minutes

                    ### Forwards :
                    - **npxG_per90**: Non-penalty Expected Goals per 90 minutes  
                    - **Sh_per90**: Shots attempted per 90 minutes  
                    - **G-PK_per90**: Goals scored minus penalties per 90 minutes  
                    - **G-xG_per90**: Difference between goals and Expected Goals per 90 minutes  
                    - **G/Sh**: Goals per shot  
                    - **PrgP_per90**: Progressive passes per 90 minutes  
                    - **PrgR_per90**: Progressive passes received per 90 minutes  
                    - **Cmp%**: Pass completion percentage  
                    - **xAG_per90**: Expected Assisted Goals per 90 minutes  
                    - **Succ_per_90**: Successful dribbles per 90 minutes  
                    - **PrgC_per90**: Progressive carries per 90 minutes  
                    - **Dis_per90**: Dispossessions per 90 minutes 
                    """)

                # Apply minimum conditions to specific metrics
                thresholds = {
                    'Cmp%': ('Cmp', 50),
                    'Tkl%': ('Tkl', 7),
                    'Won%': ('Won', 6),
                    'Succ%': ('Succ', 6)
                }

                if selected_stat in thresholds:
                    col, min_value = thresholds[selected_stat]
                    
                    # Check that the column exists and that the values are numeric
                    if col in filtered_df.columns:
                        filtered_df = filtered_df[pd.to_numeric(filtered_df[col], errors='coerce') > min_value]
                        st.markdown(f"<small><strong>Filter : {col} > {min_value}</strong></small>", unsafe_allow_html=True)

                # Selecting columns
                df_stat = filtered_df[
                    ['player_name', 'imageUrl', 'Age', 'nationality', 'club_name',
                    'Comp', 'marketValue','contract',
                    'position', selected_stat]
                ].dropna(subset=[selected_stat])

                df_stat['marketValue'] = df_stat['marketValue'].apply(format_market_value) # Format market value

                # Special filtering if the selected statistic is reserved for goalkeepers
                if selected_stat in ['Saves_per90', 'Save%', '/90', 'PSxG+/-','AvgLen', 'Launch%', 'Stp%', '#OPA_per90', 'CS%']:
                    df_stat = df_stat[df_stat['position'] == 'Goalkeeper']
                    
                # Special filtering if the selected statistic is GA_per90
                if selected_stat == 'GA_per90':
                    df_stat = df_stat[df_stat['position'] == 'Goalkeeper']
                    df_stat = df_stat.sort_values(by=selected_stat, ascending=True)
                else:
                    df_stat = df_stat.sort_values(by=selected_stat, ascending=False)

                # Special cases: exclusion of goalkeepers for certain statistics
                if selected_stat in ['Won%', 'Tkl%','Succ%']:
                    df_stat = df_stat[df_stat['position'] != 'Goalkeeper']

                top3 = df_stat.head(3).reset_index(drop=True) # Displaying podium

                # Display the podium
                podium_order = [0, 1, 2]
                medals = ["ü•á", "ü•à", "ü•â"]

                podium_html = (
                    "<div style='overflow-x: auto; margin-bottom: 2rem; padding-bottom: 1rem; "
                    "border-bottom: 1px solid #e0e0e0; width: 100%;'>"
                    "<div style='display: inline-flex; gap: 2rem; white-space: nowrap;'>"
                )

                for display_index, i in enumerate(podium_order):
                    if i < len(top3):
                        player = top3.loc[i]
                        name = player['player_name']
                        image_url = player['imageUrl']
                        stat_val = round(player[selected_stat], 2) if pd.notna(player[selected_stat]) else "-"

                        image_html = (
                            f"<img src='{image_url}' style='width: 100%; max-width: 120px; "
                            "border-radius: 10px; margin-bottom: 0.5rem;'>"
                            if pd.notna(image_url) else ""
                        )

                        player_html = (
                            "<div style='display: inline-block; min-width: 200px; max-width: 220px; text-align: center;'>"
                            f"<div style='font-size: 30px;'>{medals[display_index]}</div>"
                            f"<div style='font-weight: bold; font-size: 18px; margin: 0.5rem 0;'>{name}</div>"
                            f"{image_html}"
                            f"<div style='font-size: 16px;'><strong>{selected_stat}:</strong> {stat_val}</div>"
                            "</div>"
                        )

                        podium_html += player_html

                podium_html += "</div></div>"

                st.markdown(podium_html, unsafe_allow_html=True)

                # We display the table with the columns desired
                final_df = df_stat.rename(columns={selected_stat: 'Statistic'})
                final_df = final_df[[
                    'player_name', 'Statistic', 'Age', 'nationality', 'club_name', 'marketValue', 'contract'
                ]]

                st.dataframe(final_df, use_container_width=True)
        else:
            # P√°gina en espa√±ol
            st.markdown("<h4 style='text-align: center;'>üèÜ Clasificaci√≥n de jugadores por estad√≠sticas brutas</h4>", unsafe_allow_html=True)
            df = pd.read_csv("../data/player/database_player.csv")  # Cargar datos

            # Lista de estad√≠sticas disponibles
            all_stats = sorted(set(stat for stats in category_stats.values() for stat in stats if stat in df.columns))

            # Selecci√≥n de la estad√≠stica en la barra lateral
            selected_stat = st.sidebar.selectbox("Elige una estad√≠stica:", [""] + all_stats)

            if not selected_stat:
                st.image("../image/player_ranking.jpg")
                st.info("Despliega la barra lateral para seleccionar el idioma, la m√©trica y los filtros que quieras")

            if selected_stat:
                # --- Filtros en la barra lateral ---
                with st.sidebar:
                    st.markdown("### üéØ Filtros")

                    df_with_stat = df.dropna(subset=[selected_stat])  # Filtrar por la estad√≠stica seleccionada
                    filtered_df = df_with_stat.copy()

                    # Filtro Posici√≥n
                    poste_options_raw = sorted(filtered_df["position"].dropna().unique())
                    poste_options_es = [""] + [translate_position(p, lang="es") for p in poste_options_raw]
                    poste_es = st.selectbox("Posici√≥n", poste_options_es)

                    if poste_es:
                        idx = poste_options_es.index(poste_es) - 1
                        poste_en = poste_options_raw[idx]
                        filtered_df = filtered_df[filtered_df["position"] == poste_en]

                    # Filtro Liga
                    campeonato_options = sorted(filtered_df["Comp"].dropna().unique())
                    campeonato = st.selectbox("Liga", [""] + campeonato_options)
                    if campeonato:
                        filtered_df = filtered_df[filtered_df["Comp"] == campeonato]

                    # Filtro Club
                    club_options = sorted(filtered_df["club_name"].dropna().unique())
                    club = st.selectbox("Club", [""] + club_options)
                    if club:
                        filtered_df = filtered_df[filtered_df["club_name"] == club]

                    # Filtro Pa√≠s
                    pais_options_raw = sorted(filtered_df["nationality"].dropna().unique())
                    pais_options_es = [""] + [translate_country(p, lang="es") for p in pais_options_raw]
                    pais_es = st.selectbox("Pa√≠s", pais_options_es, placeholder="")
                    if pais_es:
                        idx = pais_options_es.index(pais_es) - 1  # -1 por la opci√≥n vac√≠a
                        pais_en = pais_options_raw[idx]
                        filtered_df = filtered_df[filtered_df["nationality"] == pais_en]

                    # Filtro Tramo de edad (crear din√°micamente)
                    tranche_options = [""]
                    ages = filtered_df["Age"].dropna()

                    if any(ages < 23):
                        tranche_options.append("< 23 a√±os")
                    if any((ages >= 24) & (ages <= 29)):
                        tranche_options.append("24-29 a√±os")
                    if any(ages >= 30):
                        tranche_options.append("30 a√±os o m√°s")

                    age_group = st.selectbox("Tramo de edad", tranche_options)

                    # Aplicar filtro de edad
                    if age_group:
                        if age_group == "< 23 a√±os":
                            filtered_df = filtered_df[filtered_df["Age"] < 23]
                        elif age_group == "24-29 a√±os":
                            filtered_df = filtered_df[(filtered_df["Age"] >= 24) & (filtered_df["Age"] <= 29)]
                        elif age_group == "30 a√±os o m√°s":
                            filtered_df = filtered_df[filtered_df["Age"] >= 30]

                    # Filtro de valor de mercado
                    valor_min_posible = 0
                    valor_max_posible = int(filtered_df["marketValue"].max()) if not filtered_df["marketValue"].isnull().all() else 10_000_000

                    valor_max = st.slider(
                        "Valor de mercado m√°ximo (‚Ç¨)",
                        valor_min_posible,
                        valor_max_posible,
                        valor_max_posible,
                        step=100000,
                        format="%d"
                    )

                    st.markdown(f"Valor m√°ximo seleccionado: **{format_market_value(valor_max)}**")
                    filtered_df = filtered_df[filtered_df["marketValue"] <= valor_max]

                # Glosario en la barra lateral
                with st.sidebar.expander("Glosario de estad√≠sticas"):
                    st.markdown("""
                    ### Portero:
                    - **GA_per90**: Goles encajados por 90 minutos  
                    - **PSxG_per90**: Post-Shot Expected Goals por 90 minutos  
                    - **/90 (PSxG-GA/90)**: Diferencia entre PSxG y goles encajados por 90 minutos  
                    - **Save%**: Porcentaje de paradas  
                    - **PSxG+/-**: Diferencia entre PSxG (xG post-tiro) y goles encajados  
                    - **Err_per90**: Errores que conducen a un tiro rival por 90 minutos  
                    - **Launch%**: Porcentaje de pases largos  
                    - **AvgLen**: Longitud media de pase (yardas)  
                    - **Cmp%**: Porcentaje de pases completados  
                    - **AvgDist**: Distancia media de pase (yardas)  
                    - **#OPA_per90**: Acciones defensivas fuera del √°rea por 90 minutos  
                    - **Stp%**: Porcentaje de centros detenidos dentro del √°rea  

                    ### Defensas centrales:
                    - **G-PK_per90**: Goles menos penaltis por 90 minutos  
                    - **PrgP_per90**: Pases progresivos por 90 minutos  
                    - **Cmp%**: Porcentaje de pases completados  
                    - **xAG_per90**: Asistencias esperadas (xAG) por 90 minutos  
                    - **PrgC_per90**: Conducciones progresivas por 90 minutos  
                    - **Err_per90**: Errores que conducen a un tiro rival  
                    - **Tkl%**: Porcentaje de √©xito en entradas  
                    - **Int_per90**: Intercepciones por 90 minutos  
                    - **Tkl_per90**: Entradas por 90 minutos  
                    - **CrdY_per90**: Tarjetas amarillas por 90 minutos  
                    - **Won_per90**: Duelos a√©reos ganados por 90 minutos  
                    - **Won%**: Porcentaje de duelos a√©reos ganados  

                    ### Laterales:
                    - **G-PK_per90**: Goles menos penaltis por 90 minutos  
                    - **PrgP_per90**: Pases progresivos por 90 minutos  
                    - **Cmp%**: Porcentaje de pases completados  
                    - **xAG_per90**: Asistencias esperadas (xAG) por 90 minutos  
                    - **PrgC_per90**: Conducciones progresivas por 90 minutos  
                    - **Err_per90**: Errores que conducen a un tiro rival  
                    - **Tkl%**: Porcentaje de √©xito en entradas  
                    - **Int_per90**: Intercepciones por 90 minutos  
                    - **Tkl_per90**: Entradas por 90 minutos  
                    - **CrdY_per90**: Tarjetas amarillas por 90 minutos  
                    - **Won_per90**: Duelos a√©reos ganados por 90 minutos  
                    - **Won%**: Porcentaje de duelos a√©reos ganados  

                    ### Centrocampistas:
                    - **G-PK_per90**: Goles menos penaltis por 90 minutos  
                    - **PrgP_per90**: Pases progresivos por 90 minutos  
                    - **PrgR_per90**: Recepciones progresivas por 90 minutos  
                    - **Cmp%**: Porcentaje de pases completados  
                    - **xAG_per90**: Asistencias esperadas (xAG) por 90 minutos  
                    - **PrgC_per90**: Conducciones progresivas por 90 minutos  
                    - **Fld_per90**: Faltas recibidas por 90 minutos  
                    - **Err_per90**: Errores que conducen a un tiro rival  
                    - **Tkl%**: Porcentaje de √©xito en entradas  
                    - **Int_per90**: Intercepciones por 90 minutos  
                    - **CrdY_per90**: Tarjetas amarillas por 90 minutos  
                    - **Won%**: Porcentaje de duelos a√©reos ganados  

                    ### Mediapuntas / Extremos:
                    - **npxG_per90**: xG sin penaltis por 90 minutos  
                    - **G-PK_per90**: Goles menos penaltis por 90 minutos  
                    - **G-xG_per90**: G - xG por 90 minutos  
                    - **PrgP_per90**: Pases progresivos por 90 minutos  
                    - **PrgR_per90**: Recepciones progresivas por 90 minutos  
                    - **Cmp%**: Porcentaje de pases completados  
                    - **xAG_per90**: Asistencias esperadas (xAG) por 90 minutos  
                    - **Succ_per90**: Regates exitosos por 90 minutos  
                    - **Succ%**: Porcentaje de regates exitosos  
                    - **PrgC_per90**: Conducciones progresivas por 90 minutos  
                    - **Fld_per90**: Faltas recibidas por 90 minutos  
                    - **Dis_per90**: Balones perdidos por 90 minutos  

                    ### Delanteros:
                    - **npxG_per90**: xG sin penaltis por 90 minutos  
                    - **Sh_per90**: Tiros por 90 minutos  
                    - **G-PK_per90**: Goles menos penaltis por 90 minutos  
                    - **G-xG_per90**: G - xG por 90 minutos  
                    - **G/Sh**: Goles por tiro  
                    - **PrgP_per90**: Pases progresivos por 90 minutos  
                    - **PrgR_per90**: Recepciones progresivas por 90 minutos  
                    - **Cmp%**: Porcentaje de pases completados  
                    - **xAG_per90**: Asistencias esperadas (xAG) por 90 minutos  
                    - **Succ_per_90**: Regates exitosos por 90 minutos  
                    - **PrgC_per90**: Conducciones progresivas por 90 minutos  
                    - **Dis_per90**: Balones perdidos por 90 minutos  
                    """)

                # Condiciones m√≠nimas en m√©tricas espec√≠ficas
                thresholds = {
                    'Cmp%': ('Cmp', 50),
                    'Tkl%': ('Tkl', 7),
                    'Won%': ('Won', 6),
                    'Succ%': ('Succ', 6)
                }

                if selected_stat in thresholds:
                    col, min_value = thresholds[selected_stat]
                    if col in filtered_df.columns:
                        filtered_df = filtered_df[pd.to_numeric(filtered_df[col], errors='coerce') > min_value]
                        st.markdown(f"<small><strong>Filtro: {col} > {min_value}</strong></small>", unsafe_allow_html=True)

                # Subconjunto de columnas
                df_stat = filtered_df[
                    ['player_name', 'imageUrl', 'Age', 'nationality', 'club_name',
                    'Comp', 'marketValue', 'contract',
                    'position', selected_stat]
                ].dropna(subset=[selected_stat])

                # Traducciones visuales (ES)
                df_stat['nationality'] = df_stat['nationality'].apply(lambda x: translate_country(x, lang="es"))
                df_stat['marketValue'] = df_stat['marketValue'].apply(format_market_value)

                # Filtros especiales para porteros
                if selected_stat in ['Saves_per90', 'Save%', '/90', 'PSxG+/-', 'AvgLen', 'Launch%', 'Stp%', '#OPA_per90', 'CS%']:
                    df_stat = df_stat[df_stat['position'] == 'Goalkeeper']

                # Caso especial GA_per90 (orden ascendente)
                if selected_stat == 'GA_per90':
                    df_stat = df_stat[df_stat['position'] == 'Goalkeeper']
                    df_stat = df_stat.sort_values(by=selected_stat, ascending=True)
                else:
                    df_stat = df_stat.sort_values(by=selected_stat, ascending=False)

                # Excluir porteros en m√©tricas % espec√≠ficas
                if selected_stat in ['Won%', 'Tkl%', 'Succ%']:
                    df_stat = df_stat[df_stat['position'] != 'Goalkeeper']

                # Posici√≥n en ES (visual)
                df_stat['position'] = df_stat['position'].apply(lambda x: translate_position(x, lang="es"))

                # Top 3 (podio)
                top3 = df_stat.head(3).reset_index(drop=True)
                podium_order = [0, 1, 2]
                medals = ["ü•á", "ü•à", "ü•â"]

                podium_html = (
                    "<div style='overflow-x: auto; margin-bottom: 2rem; padding-bottom: 1rem; "
                    "border-bottom: 1px solid #e0e0e0; width: 100%;'>"
                    "<div style='display: inline-flex; gap: 2rem; white-space: nowrap;'>"
                )

                for display_index, i in enumerate(podium_order):
                    if i < len(top3):
                        player = top3.loc[i]
                        name = player['player_name']
                        image_url = player['imageUrl']
                        stat_val = round(player[selected_stat], 2) if pd.notna(player[selected_stat]) else "-"

                        image_html = (
                            f"<img src='{image_url}' style='width: 100%; max-width: 120px; "
                            "border-radius: 10px; margin-bottom: 0.5rem;'>"
                            if pd.notna(image_url) else ""
                        )

                        player_html = (
                            "<div style='display: inline-block; min-width: 200px; max-width: 220px; text-align: center;'>"
                            f"<div style='font-size: 30px;'>{medals[display_index]}</div>"
                            f"<div style='font-weight: bold; font-size: 18px; margin: 0.5rem 0;'>{name}</div>"
                            f"{image_html}"
                            f"<div style='font-size: 16px;'><strong>{selected_stat}:</strong> {stat_val}</div>"
                            "</div>"
                        )

                        podium_html += player_html

                podium_html += "</div></div>"
                st.markdown(podium_html, unsafe_allow_html=True)

                # Tabla final
                final_df = df_stat.rename(columns={selected_stat: 'Estad√≠stica'})
                final_df = final_df[
                    ['player_name', 'Estad√≠stica', 'Age', 'nationality', 'club_name',
                    'position', 'marketValue', 'contract']
                ]

                st.dataframe(final_df, use_container_width=True)

    elif selected == "Scout":
        # Page en fran√ßais
        if lang == "Fran√ßais":
            st.markdown("<h4 style='text-align: center;'> üîé Scouting </h4>", unsafe_allow_html=True) # Affichage du titre de la page
            df = pd.read_csv("../data/player/database_player.csv") # R√©cup√©ration des donn√©es
            
            # Caract√©ristiques g√©n√©rales (avec traductions lorsque cela est n√©c√©ssaire)
            pays_options_raw = sorted(df["nationality"].dropna().unique())
            pays_options_fr = [translate_country(p, lang="fr") for p in pays_options_raw]
            pays_fr = st.multiselect("Pays", pays_options_fr, placeholder="")
            fr_to_en = dict(zip(pays_options_fr, pays_options_raw))
            pays_en = [fr_to_en[p] for p in pays_fr] if pays_fr else []


            age_min, age_max = st.slider("√Çge", 17, 42, (17, 42))
            height_min, height_max = st.slider("Taille (cm)", 163, 206, (163, 206))

            poste_options_raw = sorted(df["position"].dropna().unique())
            poste_options_fr = [translate_position(p, lang="fr") for p in poste_options_raw]
            poste_fr = st.multiselect("Poste", poste_options_fr, placeholder="")
            poste_en = [k for k, v in position_translation.get("fr", {}).items() if v in poste_fr] if poste_fr else []

            contract_years = sorted(df["contract"].dropna().apply(lambda x: str(x)[:4]).unique())
            contract_year = st.multiselect("Ann√©e de fin de contrat", contract_years, placeholder="")

            championnat = st.multiselect("Championnat", sorted(df["Comp"].dropna().unique()), placeholder="")
            
            # Mise √† jour dynamique des clubs en fonction des championnats
            if championnat:
                clubs_filtered = df[df["Comp"].isin(championnat)]["club_name"].dropna().unique()
                club = st.multiselect("Club", sorted(clubs_filtered), placeholder="")
            else:
                club = st.multiselect("Club", sorted(df["club_name"].dropna().unique()), placeholder="")

            price_max = st.slider("Valeur marchande maximum (‚Ç¨)", 0, int(df["marketValue"].max()), 200000000, step=100000)

            # Statistiques de base avec traduction
            all_stats_raw = [col for col in df.columns if col.startswith("score_")]
            if "rating" in df.columns:
                all_stats_raw.append("rating")

            fr_map = base_stat_translation.get("fr", {})

            translated_stats = [
                "Note" if col == "rating"
                else fr_map.get(col.replace("score_", ""), col)
                for col in all_stats_raw
            ]
            stat_name_mapping = dict(zip(translated_stats, all_stats_raw))

            selected_base_stats_display = st.multiselect("Statistiques aggr√©g√©es par cat√©gorie", translated_stats, placeholder="")
            selected_base_stats = [stat_name_mapping[disp] for disp in selected_base_stats_display if disp in stat_name_mapping]
            base_stat_limits = {}
            for display_name in selected_base_stats_display:
                stat = stat_name_mapping[display_name]
                min_val, max_val = int(df[stat].min()), int(df[stat].max())
                base_stat_limits[stat] = st.slider(
                    f"{display_name} (min / max)",
                    min_val, max_val,
                    (min_val, max_val),
                    step=1
                )

            # Statistiques avanc√©es (√† partir de la 30e colonne)
            selected_adv_stats, adv_stat_limits = [], {}
            adv_columns = df.columns[42:]
            selected_adv_stats = st.multiselect("Statistiques brutes", list(adv_columns), placeholder="")
            for stat in selected_adv_stats:
                if stat in df.columns:
                    min_val, max_val = float(df[stat].min()), float(df[stat].max())
                    adv_stat_limits[stat] = st.slider(f"{stat} (min / max)", min_val, max_val, (min_val, max_val))

            nb_players = st.slider("Nombre de joueurs √† afficher", 3, 1800, 10) # Choix de nombre de joueurs √† afficher
            
            # Injecte du CSS pour centrer tous les boutons
            st.markdown(
                """
                <style>
                div.stButton > button {
                    display: block;
                    margin-left: auto;
                    margin-right: auto;
                }
                </style>
                """,
                unsafe_allow_html=True
            )

            # Et ici le vrai bouton fonctionnel
            recherche = st.button("üîç Rechercher")

            # On s'assure qu'un minimum d'informations a √©t√© renseign√©
            nb_filled = sum([
                bool(pays_fr), bool(poste_fr), bool(contract_year), bool(championnat),
                bool(club), len(selected_base_stats) > 0, len(selected_adv_stats) > 0
            ])

            if recherche:
                if nb_filled < 1:
                    st.error("Veuillez remplir au moins 1 crit√®res pour lancer la recherche.")
                else:
                    # On r√©cup√®re les donn√©es associ√©es
                    df_filtered = df.copy()
                    if pays_en: df_filtered = df_filtered[df_filtered["nationality"].isin(pays_en)]
                    if poste_en: df_filtered = df_filtered[df_filtered["position"].isin(poste_en)]
                    if contract_year: df_filtered = df_filtered[df_filtered["contract"].str[:4].isin(contract_year)]
                    if championnat: df_filtered = df_filtered[df_filtered["Comp"].isin(championnat)]
                    if club: df_filtered = df_filtered[df_filtered["club_name"].isin(club)]
                    df_filtered = df_filtered[(df_filtered["Age"] >= age_min) & (df_filtered["Age"] <= age_max)]
                    df_filtered = df_filtered[(df_filtered["height"] >= height_min) & (df_filtered["height"] <= height_max)]
                    df_filtered = df_filtered[df_filtered["marketValue"] <= price_max]

                    for stat, (min_v, max_v) in base_stat_limits.items():
                        df_filtered = df_filtered[df_filtered[stat].between(min_v, max_v)]
                    for stat, (min_v, max_v) in adv_stat_limits.items():
                        if stat in df_filtered.columns:
                            df_filtered = df_filtered[df_filtered[stat].between(min_v, max_v)]
                    
                    # Filtrage avanc√© sp√©cial : seuils minimaux pour certaines stats
                    thresholds = {
                        'Cmp%': ('Cmp', 50),
                        'Tkl%': ('Tkl', 7),
                        'Won%': ('Won', 6),
                        'Succ%': ('Succ', 6)
                    }

                    for stat in selected_adv_stats:
                        if stat in thresholds:
                            col, min_val = thresholds[stat]
                            if col in df_filtered.columns:
                                df_filtered = df_filtered[df_filtered[col] >= min_val]

                    # Filtrage gardien / joueur selon les stats avanc√©es
                    goalkeeper_advanced_stats = ['Saves_per90', 'Save%', '/90', 'PSxG+/-', 'AvgLen', 'Launch%', 'Stp%', '#OPA_per90', 'CS%', 'GA_per90']

                    if any(stat in selected_adv_stats for stat in goalkeeper_advanced_stats):
                        df_filtered = df_filtered[df_filtered["position"] == "Goalkeeper"]

                    # Exclusion des gardiens pour certaines stats
                    if any(stat in ['Won%', 'Tkl%', 'Succ%'] for stat in selected_adv_stats):
                        df_filtered = df_filtered[df_filtered["position"] != "Goalkeeper"]

                    all_stats = selected_base_stats + selected_adv_stats
                    display_columns = ["player_name", "imageUrl", "Age", "nationality", "club_name",
                                    "position", "marketValue", "contract", "rating"] + all_stats

                    df_stat = df_filtered.dropna(subset=["rating"]).sort_values("rating", ascending=False)
                    
                    # Filtrage gardien / joueurs de champ selon la stat s√©lectionn√©e
                    goalkeeper_stats = ["goal_scoring_conceded", "efficiency", "error_fouls","short_clearance", "long_clearance", "positioning", "aerial_defense"]
                    # V√©rifie si une stat de base s√©lectionn√©e est sp√©cifique aux gardiens
                    selected_goalkeeper_stats = [stat for stat in selected_base_stats if stat in [f"score_{s}" for s in goalkeeper_stats]]
                    if selected_goalkeeper_stats:
                        df_stat = df_stat[df_stat["position"] == "Goalkeeper"]
                    elif selected_base_stats:
                        df_stat = df_stat[df_stat["position"] != "Goalkeeper"]
                    df_stat = df_stat[display_columns].head(nb_players).reset_index(drop=True)

                    # Traductions de plusieurs cat√©gories (postion, pays) et mise sous format des valeurs sur le march√© des transferts
                    df_stat['position'] = df_stat['position'].apply(lambda x: translate_position(x, lang="fr"))
                    df_stat["nationality"] = df_stat["nationality"].apply(lambda x: translate_country(x, lang="fr"))
                    df_stat["marketValue"] = df_stat["marketValue"].apply(format_market_value)

                    # Construction du podium
                    top3 = df_stat.head(3)
                    podium_order = [0, 1, 2]
                    medals = ["ü•á", "ü•à", "ü•â"]

                    podium_html = (
                        "<div style='overflow-x: auto; margin-bottom: 2rem; padding-bottom: 1rem; "
                        "border-bottom: 1px solid #e0e0e0; width: 100%;'>"
                        "<div style='display: inline-flex; gap: 2rem; white-space: nowrap;'>"
                    )

                    for display_index, i in enumerate(podium_order):
                        if i < len(top3):
                            player = top3.loc[i]
                            name = player['player_name']
                            rating = round(player['rating'], 2) if pd.notna(player['rating']) else "-"
                            image_url = player['imageUrl']
                            
                            image_html = (
                                f"<img src='{image_url}' style='width: 100%; max-width: 120px; "
                                "border-radius: 10px; margin-bottom: 0.5rem;'>"
                                if pd.notna(image_url) else ""
                            )

                            player_block = (
                                "<div style='display: inline-block; min-width: 200px; max-width: 220px; text-align: center;'>"
                                f"<div style='font-size: 30px;'>{medals[display_index]}</div>"
                                f"<div style='font-weight: bold; font-size: 18px; margin: 0.5rem 0;'>{name}</div>"
                                f"{image_html}"
                                f"<div style='font-size: 16px;'><strong>Note :</strong> {rating}</div>"
                                "</div>"
                            )

                            podium_html += player_block

                    podium_html += "</div></div>"

                    st.markdown(podium_html, unsafe_allow_html=True)

                    final_df = df_stat.drop(columns=["imageUrl"]) # Suppression de image_url pour la table finale
                    st.dataframe(final_df, use_container_width=True)

            # Sidebar r√©sum√©
            with st.sidebar:
                st.markdown("### üßæ Filtres s√©lectionn√©s")
                if pays_fr:
                    st.markdown(f"- **Pays :** {', '.join(pays_fr)}")
                if poste_fr:
                    st.markdown(f"- **Postes :** {', '.join(poste_fr)}")
                st.markdown(f"- **√Çge :** {age_min} - {age_max} ans")
                st.markdown(f"- **Taille :** {height_min} - {height_max} cm")
                st.markdown(f"- **Valeur max :** {format_market_value(price_max)}")
                if contract_year:
                    st.markdown(f"- **Contrat :** {', '.join(contract_year)}")
                if championnat:
                    st.markdown(f"- **Championnat :** {', '.join(championnat)}")
                if club:
                    st.markdown(f"- **Clubs :** {', '.join(club)}")

                if selected_base_stats_display:
                    st.markdown("**Stats aggr√©g√©es par cat√©gorie :**")
                    for disp_label in selected_base_stats_display:
                        raw_stat = stat_name_mapping.get(disp_label)
                        if raw_stat in base_stat_limits:
                            st.markdown(f"- {disp_label} : {base_stat_limits[raw_stat]}")

                if selected_adv_stats:
                    st.markdown("**Stats brutes :**")
                    for stat in selected_adv_stats:
                        if stat in adv_stat_limits:
                            st.markdown(f"- {stat} : {adv_stat_limits[stat]}")

            # Placement du glossaire en sidebar
            with st.sidebar.expander("Glossaire des statistiques"):
                st.markdown("""
                ### Statistiques g√©n√©rales
                - **MP** : Nombre de matches jou√©s
                - **Starts** : Nombre de matches d√©but√©s en tant que titulaire
                - **Min** : Nombre de minutes jou√©s
                - **90s** : Nombre de minutes jou√©s divis√© par 90

                ### Gardien de but :
                - **GA_per90** : Buts encaiss√©s par 90 minutes
                - **SoTA_per90** : Nombre de tirs cadr√©s conc√©d√©s par 90 minutes 
                - **Save_per90** : Nombre d‚Äôarr√™ts effectu√©s par 90 minutes
                - **PSxG_per90** : Post-Shot Expected Goals par 90 minutes
                - **PSxG+/-** : Diff√©rence entre les PSxG (xG post-tir) et buts encaiss√©s
                - **/90 /PSxG-GA/90** : Diff√©rence entre PSxG et buts encaiss√©s par 90 minutes
                - **PKm_per90** : Nombre de p√©naltys non arr√™t√©s par le gardien par 90 minutes
                - **PKsv_per90** : Nombre de p√©naltys arr√™t√©s par le gardien par 90 minutes
                - **Thr_per90** : Nombre de d√©gagements effectu√©s par le gardien par 90 minutes
                - **Stp_per90** : Nombre de centres arr√™t√©s dans la surface par 90 minutes
                - **Save%** : Pourcentage d‚Äôarr√™ts effectu√©s  
                - **CS%** : Pourcentage de clean sheat (matchs sans encaisser de but)
                - **AvgLen** : Longueur moyenne des passes (en yards)  
                - **Launch%** : Pourcentage de passes longues  
                - **Stp%** : Pourcentage de centres arr√™t√©s dans la surface  
                - **#OPA_per90** : Actions d√©fensives hors de la surface par 90 minutes  

                ### Joueurs de champs :
                - **Gls_per90** : Buts par 90 minutes
                - **Ast_per90** : Passe d√©cisves par 90 minutes
                - **G+A_per90** : Buts + Passe d√©cisives par 90 minutes  
                - **G-PK** : Buts marqu√©es - p√©naltys inscrits
                - **G-PK_per90** : Buts marqu√©es - p√©naltys inscrits par 90 minutes
                - **G-xG_per90** : Buts marqu√©es - Expected Goals par 90 minutes
                - **PK_per90** : Penaltys par 90 minutes
                - **npxG** : Non-penalty Expected Goals
                - **npxG_per90** : Non-penalty Expected Goals par 90 minutes
                - **xAG_per90** : Expected Assisted Goals par 90 minutes
                - **PrgC_per90** : Conduites progressives par 90 minutes
                - **A-xAG** : Nombre de passe d√©cisives - Expected Assisted Goals
                - **Sh_per90** : Tirs tent√©s par 90 minutes
                - **SoT_per90** : Tir cadr√©s par 90 minutes
                - **G/Sh** : Buts par tir
                - **SoT%** : Pourcentage de Tirs cadr√©s
                - **PrgP_per90** : Passes progressives par 90 minutes
                - **PrgR_per90** : Passes progressives re√ßues par 90 minutes
                - **Cmp** : Nombre de passes r√©ussis
                - **Cmp_per90** : Nombre de passes r√©ussis par 90 minutes
                - **Cmp%** : Pourcentage de passes r√©ussies
                - **AvgDist**: Distance moyenne des passes (en yards)  
                - **1/3_per90** : Nombre de passes r√©ussis dans le derniers tiers offensifs par 90 minutes
                - **PPA_per90** : Nombre de passes r√©ussis dans la surface de r√©paration adverse par 90 minutes
                - **CrsPA_per90** : Nombre de centres r√©ussis dans la surface de r√©paration adverse par 90 minutes
                - **Sw_per90** : Nombre de passes longues r√©ussis par 90 minutes
                - **Crs_per90** : Nombre de centres r√©ussis par 90 minutes
                - **Tkl** : Nombre de tacles effectu√©s
                - **Tkl_per90** : Nombre de tacles effectu√©s par 90 minutes
                - **Int_per90** : Nombre d'interceptions effectu√©s par 90 minutes
                - **Clr_per90** : Nombre de d√©gagements effectu√©s par 90 minutes
                - **Err_per90** : Erreurs menant √† un tir adverse par 90 minutes
                - **Fld_per90** : Fautes subies par 90 minutes
                - **Touches_per90** : Nombre de touches du ballon par 90 minutes
                - **Succ_per90** : Dribbles r√©ussis par 90 minutes
                - **Carries_per90** : Nombre de portage du ballon par 90 minutes
                - **Mis_per90** : Nombre de mauvais contr√¥le du ballon par 90 minutes
                - **Dis_per90** : Ballons perdus par 90 minutes
                - **Fls_per90** : Nombre de fautes provoqu√©es par 90 minutes
                - **PKwon_per90** : Nombre de penaltys obtenus par 90 minutes
                - **PKcon_per90** : Nombre de penaltys conc√©d√©s par 90 minutes
                - **Recov_per90** : Nombre de r√©cup√©ration du ballon par 90 minutes
                - **Tkl%** : Pourcentage de tacles effectu√©s
                - **Succ%** : Pourcentage de dribbles r√©ussis
                - **Won_per90** : Duels a√©riens gagn√©s par 90 minutes
                - **Won%** : Pourcentage de duels a√©riens gagn√©s
                - **CrdY_per90** : Cartons jaunes par 90 minutes
                - **CrdR_per90** : Cartons rouges par 90 minutes
                """)

        elif lang == "English":
            st.markdown("<h4 style='text-align: center;'> üîé Scouting </h4>", unsafe_allow_html=True) # Display the title
            df = pd.read_csv("../data/player/database_player.csv") # Recover the data 

            # General Characteristics
            country_options = sorted(df["nationality"].dropna().unique())
            country = st.multiselect("Country", country_options, placeholder="")

            age_min, age_max = st.slider("Age", 17, 42, (17, 42))
            height_min, height_max = st.slider("Height (cm)", 163, 206, (163, 206))

            position_options = sorted(df["position"].dropna().unique())
            position = st.multiselect("Position", position_options, placeholder="")

            contract_years = sorted(df["contract"].dropna().apply(lambda x: str(x)[:4]).unique())
            contract_year = st.multiselect("Contract end year", contract_years, placeholder="")

            leagues = st.multiselect("League", sorted(df["Comp"].dropna().unique()), placeholder="")

            if leagues:
                filtered_clubs = df[df["Comp"].isin(leagues)]["club_name"].dropna().unique()
                club = st.multiselect("Club", sorted(filtered_clubs), placeholder="")
            else:
                club = st.multiselect("Club", sorted(df["club_name"].dropna().unique()), placeholder="")

            price_max = st.slider("Maximum market value (‚Ç¨)", 0, int(df["marketValue"].max()), 200000000, step=100000)

            # Base statistics
            all_stats_raw = [col for col in df.columns if col.startswith("score_")]
            if "rating" in df.columns:
                all_stats_raw.append("rating")

            # Apply formatting for display
            translated_stats = [format_stat_name(col) for col in all_stats_raw]
            stat_name_mapping = dict(zip(translated_stats, all_stats_raw))

            selected_base_stats_display = st.multiselect("Aggregate statistics by category", translated_stats, placeholder="")
            selected_base_stats = [stat_name_mapping[disp] for disp in selected_base_stats_display if disp in stat_name_mapping]
            base_stat_limits = {}
            for display_name in selected_base_stats_display:
                stat = stat_name_mapping[display_name]
                min_val, max_val = int(df[stat].min()), int(df[stat].max())
                base_stat_limits[stat] = st.slider(f"{display_name} (min / max)", min_val, max_val, (min_val, max_val), step=1)

            # Advanced statistics (from column 30)
            selected_adv_stats, adv_stat_limits = [], {}
            adv_columns = df.columns[30:]
            selected_adv_stats = st.multiselect("Raw statistics", list(adv_columns), placeholder="")
            for stat in selected_adv_stats:
                if stat in df.columns:
                    min_val, max_val = float(df[stat].min()), float(df[stat].max())
                    adv_stat_limits[stat] = st.slider(f"{stat} (min / max)", min_val, max_val, (min_val, max_val))

            nb_players = st.slider("Number of players to display", 3, 1800, 10) # Choice of the number of players to display

            # Inject CSS to center all buttons
            st.markdown(
                """
                <style>
                div.stButton > button {
                    display: block;
                    margin-left: auto;
                    margin-right: auto;
                }
                </style>
                """,
                unsafe_allow_html=True
            )

            # And here's the real functional button
            search = st.button("üîç Search")


            # We want that 1 criterias to start the search
            nb_filled = sum([
                bool(country), bool(position), bool(contract_year), bool(leagues),
                bool(club), len(selected_base_stats) > 0, len(selected_adv_stats) > 0
            ])

            if search:
                if nb_filled < 1:
                    st.error("Please fill at least 1 criteria to start the search.")
                else:
                    # We recovering the data
                    df_filtered = df.copy()
                    if country: df_filtered = df_filtered[df_filtered["nationality"].isin(country)]
                    if position: df_filtered = df_filtered[df_filtered["position"].isin(position)]
                    if contract_year: df_filtered = df_filtered[df_filtered["contract"].str[:4].isin(contract_year)]
                    if leagues: df_filtered = df_filtered[df_filtered["Comp"].isin(leagues)]
                    if club: df_filtered = df_filtered[df_filtered["club_name"].isin(club)]
                    df_filtered = df_filtered[(df_filtered["Age"] >= age_min) & (df_filtered["Age"] <= age_max)]
                    df_filtered = df_filtered[(df_filtered["height"] >= height_min) & (df_filtered["height"] <= height_max)]
                    df_filtered = df_filtered[df_filtered["marketValue"] <= price_max]

                    for stat, (min_v, max_v) in base_stat_limits.items():
                        df_filtered = df_filtered[df_filtered[stat].between(min_v, max_v)]
                    for stat, (min_v, max_v) in adv_stat_limits.items():
                        if stat in df_filtered.columns:
                            df_filtered = df_filtered[df_filtered[stat].between(min_v, max_v)]

                    # Thresholds made to not over-reward a player which have a low number realised on a statistic but a high percentage
                    thresholds = {
                        'Cmp%': ('Cmp', 50),
                        'Tkl%': ('Tkl', 7),
                        'Won%': ('Won', 6),
                        'Succ%': ('Succ', 6)
                    }

                    for stat in selected_adv_stats:
                        if stat in thresholds:
                            col, min_val = thresholds[stat]
                            if col in df_filtered.columns:
                                df_filtered = df_filtered[df_filtered[col] >= min_val]

                    # Some specifics parameters for the goalkeepers
                    goalkeeper_advanced_stats = ['Saves_per90', 'Save%', '/90', 'PSxG+/-', 'AvgLen', 'Launch%', 'Stp%', '#OPA_per90', 'CS%', 'GA_per90']
                    if any(stat in selected_adv_stats for stat in goalkeeper_advanced_stats):
                        df_filtered = df_filtered[df_filtered["position"] == "Goalkeeper"]
                    if any(stat in ['Won%', 'Tkl%', 'Succ%'] for stat in selected_adv_stats):
                        df_filtered = df_filtered[df_filtered["position"] != "Goalkeeper"]

                    goalkeeper_stats = [
                        "goal_scoring_conceded", "efficiency", "error_fouls",
                        "short_clearance", "long_clearance", "positioning", "aerial_defense"
                    ]
                    selected_goalkeeper_stats = [stat for stat in selected_base_stats if stat in [f"score_{s}" for s in goalkeeper_stats]]
                    
                    if selected_goalkeeper_stats:
                        df_filtered = df_filtered[df_filtered["position"] == "Goalkeeper"]
                    elif selected_base_stats:
                        df_filtered = df_filtered[df_filtered["position"] != "Goalkeeper"]

                    all_stats = selected_base_stats + selected_adv_stats
                    display_columns = ["player_name", "imageUrl", "Age", "nationality", "club_name",
                                    "position", "marketValue", "contract", "rating"] + all_stats # We choose the list of informations collected

                    df_stat = df_filtered.dropna(subset=["rating"]).sort_values("rating", ascending=False)
                    df_stat = df_stat[display_columns].head(nb_players).reset_index(drop=True)

                    df_stat["marketValue"] = df_stat["marketValue"].apply(format_market_value) # Format market value

                    # We display a podium
                    top3 = df_stat.head(3)
                    podium_order = [0, 1, 2]
                    medals = ["ü•á", "ü•à", "ü•â"]

                    podium_html = (
                        "<div style='overflow-x: auto; margin-bottom: 2rem; padding-bottom: 1rem; "
                        "border-bottom: 1px solid #e0e0e0; width: 100%;'>"
                        "<div style='display: inline-flex; gap: 2rem; white-space: nowrap;'>"
                    )

                    for display_index, i in enumerate(podium_order):
                        if i < len(top3):
                            player = top3.loc[i]
                            name = player['player_name']
                            rating = round(player['rating'], 2) if pd.notna(player['rating']) else "-"
                            image_url = player['imageUrl']
                            
                            image_html = (
                                f"<img src='{image_url}' style='width: 100%; max-width: 120px; "
                                "border-radius: 10px; margin-bottom: 0.5rem;'>"
                                if pd.notna(image_url) else ""
                            )

                            player_block = (
                                "<div style='display: inline-block; min-width: 200px; max-width: 220px; text-align: center;'>"
                                f"<div style='font-size: 30px;'>{medals[display_index]}</div>"
                                f"<div style='font-weight: bold; font-size: 18px; margin: 0.5rem 0;'>{name}</div>"
                                f"{image_html}"
                                f"<div style='font-size: 16px;'><strong>Rating :</strong> {rating}</div>"
                                "</div>"
                            )

                            podium_html += player_block

                    podium_html += "</div></div>"

                    st.markdown(podium_html, unsafe_allow_html=True)

                    final_df = df_stat.drop(columns=["imageUrl"])
                    st.dataframe(final_df, use_container_width=True) # We didsplay the entire list of players asked

            # Sidebar summary
            with st.sidebar:
                st.markdown("### üßæ Selected Filters")
                if country:
                    st.markdown(f"- **Country:** {', '.join(country)}")
                if position:
                    st.markdown(f"- **Positions:** {', '.join(position)}")
                st.markdown(f"- **Age:** {age_min} - {age_max} years")
                st.markdown(f"- **Height:** {height_min} - {height_max} cm")
                st.markdown(f"- **Max value:** {format_market_value(price_max)}")
                if contract_year:
                    st.markdown(f"- **Contract:** {', '.join(contract_year)}")
                if leagues:
                    st.markdown(f"- **League:** {', '.join(leagues)}")
                if club:
                    st.markdown(f"- **Club:** {', '.join(club)}")

                if selected_base_stats_display:
                    st.markdown("**Aggregate Stats by category:**")
                    for disp_label in selected_base_stats_display:
                        raw_stat = stat_name_mapping.get(disp_label)
                        if raw_stat in base_stat_limits:
                            st.markdown(f"- {disp_label}: {base_stat_limits[raw_stat]}")

                if selected_adv_stats:
                    st.markdown("**Raw Stats:**")
                    for stat in selected_adv_stats:
                        if stat in adv_stat_limits:
                            st.markdown(f"- {stat}: {adv_stat_limits[stat]}")

            # Gloassary in the sidebar
            with st.sidebar.expander("Glossary of statistics"):
                st.markdown("""
                ### General statistics
                - **MP** : Number of matches played
                - **Starts** : Number of matches played at starter
                - **Min** : Number of minutes played
                - **90s** : Number of minutes played divided by 90

                ### Goalkeeper :
                - **GA_per90** : Goals conceded per 90 minutes  
                - **SoTA_per90** : Number of shot on target conceded per 90 minutes 
                - **Save_per90** : Number of saves made per 90 minutes
                - **PSxG_per90**: Post-Shot Expected Goals per 90 minutes  
                - **PSxG+/-** : Difference between PSxG and goals conceded 
                - **/90 (PSxG-GA/90)**: Difference between PSxG and goals conceded per 90 minutes             
                - **PKm_per90** : Number of penaltys non-save by the keeper per 90 minutes
                - **PKsv_per90** : Number of penaltys save by the keeper per 90 minutes
                - **Thr_per90** : Number of throws made by the keeper per 90 minutes
                - **Stp_per90** : Number of cross stopped into penalty area by the keeper
                - **Save%** : Save percentage  
                - **CS%** : Percentage og clean sheat (matches without conceded a goal)
                - **AvgLen** :  Average pass length (in yards)   
                - **Launch%** : Percentage of long passes
                - **Stp%** : Percentage of crosses stopped inside the box  
                - **#OPA_per90** : Defensive actions outside the penalty area per 90 minutes

                ### Field player :
                - **Gls_per90** : Goals per 90 minutes
                - **Ast_per90** : Assists per 90 minutes
                - **G+A_per90** : Goals + Assists per 90 minutes  
                - **G-PK** : Goals - penaltys scored
                - **G-PK_per90** : Goals scored minus penalties per 90 minutes
                - **G-xG_per90** : Buts minus Expected Goals per 90 minutes
                - **PK_per90** : Penaltys per 90 minutes
                - **npxG** : Non-penalty Expected Goals
                - **npxG_per90** : Non-penalty Expected Goals per 90 minutes 
                - **xAG_per90** : Expected Assisted Goals per 90 minutes  
                - **PrgC_per90** : Progressive carries per 90 minutes 
                - **A-xAG** : Number of assists - Expected Assisted Goals
                - **Sh_per90** : Shots attempted per 90 minutes
                - **SoT_per90** : Shot on target per 90 minutes
                - **G/Sh** : Goals per shot  
                - **SoT%** : Percentage of Shot on target
                - **PrgP_per90** : Progressive passes per 90 minutes 
                - **PrgR_per90** : Progressive passes received per 90 minutes 
                - **Cmp** : Number of passes achieved
                - **Cmp_per90** : Number of passes achieved par 90 minutes
                - **Cmp%** : Pass completion percentage
                - **AvgDist**: Average pass distance (in yards)  
                - **1/3_per90** : Number of passes achieved into last third area per 90 minutes
                - **PPA_per90** : Number of passes achieved into penalty area par 90 minutes
                - **CrsPA_per90** : Number of crosses achieved into penalty area par 90 minutes
                - **Sw_per90** : Number of long passes completed per 90 minutes
                - **Crs_per90** : Number of crosses completed per 90 minutes
                - **Tkl** : Number of tackes made
                - **Tkl_per90** : Tackles per 90 minutes 
                - **Int_per90** : Interceptions per 90 minutes 
                - **Clr_per90** : Number of clearances made per 90 minutes
                - **Err_per90** : Errors leading to a shot per 90 minutes  
                - **Fld_per90** : Fouls drawn per 90 minutes 
                - **Touches_per90** : Number of touches of the ball per 90 minutes
                - **Succ_per90** : Successful dribbles per 90 minutes  
                - **Carries_per90** : Number of carries per 90 minutes
                - **Mis_per90** : Number of times a player failed when attempting to gain control of a ball
                - **Dis_per90** : Dispossessions per 90 minutes
                - **Fls_per90** : Number of faults provoked per 90 minutes
                - **PKwon_per90** : Number of penaltys obtained per 90 minutes
                - **PKcon_per90** : Number of penaltys conceded par 90 minutes
                - **Recov_per90** : Number of recovery made per 90 minutes
                - **Tkl%** : Tackle success rate 
                - **Succ%** : Dribble success rate  
                - **Won_per90** : Aerial duels won per 90 minutes  
                - **Won%** : Aerial duel success rate 
                - **CrdY_per90** : Yellow cards per 90 minutes  
                - **CrdR_per90** : Red cards per 90 minutes  
                """)
        
        else:
            # P√°gina en espa√±ol
            st.markdown("<h4 style='text-align: center;'> üîé Scouting </h4>", unsafe_allow_html=True)
            df = pd.read_csv("../data/player/database_player.csv")  # Cargar datos

            # Caracter√≠sticas generales (con traducciones cuando es necesario)
            pais_options_raw = sorted(df["nationality"].dropna().unique())
            pais_options_es = [translate_country(p, lang="es") for p in pais_options_raw]
            pais_es = st.multiselect("Pa√≠s", pais_options_es, placeholder="")
            es_to_en_country = dict(zip(pais_options_es, pais_options_raw))
            pais_en = [es_to_en_country[p] for p in pais_es] if pais_es else []

            age_min, age_max = st.slider("Edad", 17, 42, (17, 42))
            height_min, height_max = st.slider("Altura (cm)", 163, 206, (163, 206))

            poste_options_raw = sorted(df["position"].dropna().unique())
            poste_options_es = [translate_position(p, lang="es") for p in poste_options_raw]
            poste_es = st.multiselect("Posici√≥n", poste_options_es, placeholder="")
            poste_en = [k for k, v in position_translation.get("es", {}).items() if v in poste_es] if poste_es else []

            contract_years = sorted(df["contract"].dropna().apply(lambda x: str(x)[:4]).unique())
            contract_year = st.multiselect("A√±o de fin de contrato", contract_years, placeholder="")

            campeonato = st.multiselect("Liga", sorted(df["Comp"].dropna().unique()), placeholder="")

            # Actualizaci√≥n din√°mica de clubes seg√∫n ligas
            if campeonato:
                clubs_filtered = df[df["Comp"].isin(campeonato)]["club_name"].dropna().unique()
                club = st.multiselect("Club", sorted(clubs_filtered), placeholder="")
            else:
                club = st.multiselect("Club", sorted(df["club_name"].dropna().unique()), placeholder="")

            price_max = st.slider("Valor de mercado m√°ximo (‚Ç¨)", 0, int(df["marketValue"].max()), 200000000, step=100000)

            # Estad√≠sticas de base con traducci√≥n
            all_stats_raw = [col for col in df.columns if col.startswith("score_")]
            if "rating" in df.columns:
                all_stats_raw.append("rating")

            es_map = base_stat_translation.get("es", {})
            translated_stats = [
                "Nota" if col == "rating"
                else es_map.get(col.replace("score_", ""), col)
                for col in all_stats_raw
            ]
            stat_name_mapping = dict(zip(translated_stats, all_stats_raw))

            selected_base_stats_display = st.multiselect("Estad√≠sticas agregadas por categor√≠a", translated_stats, placeholder="")
            selected_base_stats = [stat_name_mapping[disp] for disp in selected_base_stats_display if disp in stat_name_mapping]

            base_stat_limits = {}
            for display_name in selected_base_stats_display:
                stat = stat_name_mapping[display_name]
                min_val, max_val = int(df[stat].min()), int(df[stat].max())
                base_stat_limits[stat] = st.slider(
                    f"{display_name} (m√≠n / m√°x)",
                    min_val, max_val,
                    (min_val, max_val),
                    step=1
                )

            # Estad√≠sticas avanzadas (a partir de la columna 30)
            selected_adv_stats, adv_stat_limits = [], {}
            adv_columns = df.columns[30:]
            selected_adv_stats = st.multiselect("Estad√≠sticas brutas", list(adv_columns), placeholder="")
            for stat in selected_adv_stats:
                if stat in df.columns:
                    min_val, max_val = float(df[stat].min()), float(df[stat].max())
                    adv_stat_limits[stat] = st.slider(f"{stat} (m√≠n / m√°x)", min_val, max_val, (min_val, max_val))

            nb_players = st.slider("N√∫mero de jugadores a mostrar", 3, 1800, 10)

            # CSS para centrar botones
            st.markdown(
                """
                <style>
                div.stButton > button {
                    display: block;
                    margin-left: auto;
                    margin-right: auto;
                }
                </style>
                """,
                unsafe_allow_html=True
            )

            # Bot√≥n
            recherche = st.button("üîç Buscar")

            # M√≠nimo de informaci√≥n rellenada
            nb_filled = sum([
                bool(pais_es), bool(poste_es), bool(contract_year), bool(campeonato),
                bool(club), len(selected_base_stats) > 0, len(selected_adv_stats) > 0
            ])

            if recherche:
                if nb_filled < 1:
                    st.error("Por favor, rellena al menos 1 criterio para lanzar la b√∫squeda.")
                else:
                    # Datos filtrados
                    df_filtered = df.copy()
                    if pais_en: df_filtered = df_filtered[df_filtered["nationality"].isin(pais_en)]
                    if poste_en: df_filtered = df_filtered[df_filtered["position"].isin(poste_en)]
                    if contract_year: df_filtered = df_filtered[df_filtered["contract"].str[:4].isin(contract_year)]
                    if campeonato: df_filtered = df_filtered[df_filtered["Comp"].isin(campeonato)]
                    if club: df_filtered = df_filtered[df_filtered["club_name"].isin(club)]
                    df_filtered = df_filtered[(df_filtered["Age"] >= age_min) & (df_filtered["Age"] <= age_max)]
                    df_filtered = df_filtered[(df_filtered["height"] >= height_min) & (df_filtered["height"] <= height_max)]
                    df_filtered = df_filtered[df_filtered["marketValue"] <= price_max]

                    for stat, (min_v, max_v) in base_stat_limits.items():
                        df_filtered = df_filtered[df_filtered[stat].between(min_v, max_v)]
                    for stat, (min_v, max_v) in adv_stat_limits.items():
                        if stat in df_filtered.columns:
                            df_filtered = df_filtered[df_filtered[stat].between(min_v, max_v)]

                    # Filtro avanzado especial: umbrales m√≠nimos para ciertas stats
                    thresholds = {
                        'Cmp%': ('Cmp', 50),
                        'Tkl%': ('Tkl', 7),
                        'Won%': ('Won', 6),
                        'Succ%': ('Succ', 6)
                    }
                    for stat in selected_adv_stats:
                        if stat in thresholds:
                            col, min_value = thresholds[stat]
                            if col in df_filtered.columns:
                                df_filtered = df_filtered[df_filtered[col] >= min_value]

                    # Filtrado porteros / jugadores de campo seg√∫n stats avanzadas
                    goalkeeper_advanced_stats = ['Saves_per90', 'Save%', '/90', 'PSxG+/-', 'AvgLen', 'Launch%', 'Stp%', '#OPA_per90', 'CS%', 'GA_per90']
                    if any(stat in selected_adv_stats for stat in goalkeeper_advanced_stats):
                        df_filtered = df_filtered[df_filtered["position"] == "Goalkeeper"]

                    # Exclusi√≥n de porteros para ciertas stats
                    if any(stat in ['Won%', 'Tkl%', 'Succ%'] for stat in selected_adv_stats):
                        df_filtered = df_filtered[df_filtered["position"] != "Goalkeeper"]

                    all_stats = selected_base_stats + selected_adv_stats
                    display_columns = ["player_name", "imageUrl", "Age", "nationality", "club_name",
                                    "position", "marketValue", "contract", "rating"] + all_stats

                    df_stat = df_filtered.dropna(subset=["rating"]).sort_values("rating", ascending=False)

                    # Filtrado portero / jugadores de campo seg√∫n la base seleccionada
                    goalkeeper_stats = ["goal_scoring_conceded", "efficiency", "error_fouls", "short_clearance", "long_clearance", "positioning", "aerial_defense"]
                    selected_goalkeeper_stats = [stat for stat in selected_base_stats if stat in [f"score_{s}" for s in goalkeeper_stats]]
                    if selected_goalkeeper_stats:
                        df_stat = df_stat[df_stat["position"] == "Goalkeeper"]
                    elif selected_base_stats:
                        df_stat = df_stat[df_stat["position"] != "Goalkeeper"]

                    df_stat = df_stat[display_columns].head(nb_players).reset_index(drop=True)

                    # Traducciones (posici√≥n, pa√≠s) y formato de valor de mercado
                    df_stat['position'] = df_stat['position'].apply(lambda x: translate_position(x, lang="es"))
                    df_stat["nationality"] = df_stat["nationality"].apply(lambda x: translate_country(x, lang="es"))
                    df_stat["marketValue"] = df_stat["marketValue"].apply(format_market_value)

                    # Podio
                    top3 = df_stat.head(3)
                    podium_order = [0, 1, 2]
                    medals = ["ü•á", "ü•à", "ü•â"]

                    podium_html = (
                        "<div style='overflow-x: auto; margin-bottom: 2rem; padding-bottom: 1rem; "
                        "border-bottom: 1px solid #e0e0e0; width: 100%;'>"
                        "<div style='display: inline-flex; gap: 2rem; white-space: nowrap;'>"
                    )

                    for display_index, i in enumerate(podium_order):
                        if i < len(top3):
                            player = top3.loc[i]
                            name = player['player_name']
                            rating = round(player['rating'], 2) if pd.notna(player['rating']) else "-"
                            image_url = player['imageUrl']

                            image_html = (
                                f"<img src='{image_url}' style='width: 100%; max-width: 120px; "
                                "border-radius: 10px; margin-bottom: 0.5rem;'>"
                                if pd.notna(image_url) else ""
                            )

                            player_block = (
                                "<div style='display: inline-block; min-width: 200px; max-width: 220px; text-align: center;'>"
                                f"<div style='font-size: 30px;'>{medals[display_index]}</div>"
                                f"<div style='font-weight: bold; font-size: 18px; margin: 0.5rem 0;'>{name}</div>"
                                f"{image_html}"
                                f"<div style='font-size: 16px;'><strong>Nota:</strong> {rating}</div>"
                                "</div>"
                            )

                            podium_html += player_block

                    podium_html += "</div></div>"
                    st.markdown(podium_html, unsafe_allow_html=True)

                    final_df = df_stat.drop(columns=["imageUrl"])  # Quitar image_url de la tabla
                    st.dataframe(final_df, use_container_width=True)

            # Resumen en la barra lateral
            with st.sidebar:
                st.markdown("### üßæ Filtros seleccionados")
                if pais_es:
                    st.markdown(f"- **Pa√≠s:** {', '.join(pais_es)}")
                if poste_es:
                    st.markdown(f"- **Posiciones:** {', '.join(poste_es)}")
                st.markdown(f"- **Edad:** {age_min} - {age_max} a√±os")
                st.markdown(f"- **Altura:** {height_min} - {height_max} cm")
                st.markdown(f"- **Valor m√°x.:** {format_market_value(price_max)}")
                if contract_year:
                    st.markdown(f"- **Contrato:** {', '.join(contract_year)}")
                if campeonato:
                    st.markdown(f"- **Liga:** {', '.join(campeonato)}")
                if club:
                    st.markdown(f"- **Clubs:** {', '.join(club)}")

                if selected_base_stats_display:
                    st.markdown("**Estad√≠sticas agregadas por categor√≠a:**")
                    for disp_label in selected_base_stats_display:
                        raw_stat = stat_name_mapping.get(disp_label)
                        if raw_stat in base_stat_limits:
                            st.markdown(f"- {disp_label}: {base_stat_limits[raw_stat]}")

                if selected_adv_stats:
                    st.markdown("**Estad√≠sticas brutas:**")
                    for stat in selected_adv_stats:
                        if stat in adv_stat_limits:
                            st.markdown(f"- {stat}: {adv_stat_limits[stat]}")

            # Glosario en la barra lateral
            with st.sidebar.expander("Glosario de estad√≠sticas"):
                st.markdown("""
                ### Estad√≠sticas generales
                - **MP**: Partidos jugados
                - **Starts**: Partidos como titular
                - **Min**: Minutos jugados
                - **90s**: Minutos jugados dividido entre 90

                ### Portero:
                - **GA_per90**: Goles encajados por 90 minutos
                - **SoTA_per90**: Tiros a puerta recibidos por 90 minutos
                - **Save_per90**: Paradas por 90 minutos
                - **PSxG_per90**: Post-Shot Expected Goals por 90 minutos
                - **PSxG+/-**: Diferencia entre PSxG (xG post-tiro) y goles encajados
                - **/90 /PSxG-GA/90**: Diferencia entre PSxG y goles encajados por 90 minutos
                - **PKm_per90**: Penaltis no detenidos por 90 minutos
                - **PKsv_per90**: Penaltis detenidos por 90 minutos
                - **Thr_per90**: Saques/Envios del portero por 90 minutos
                - **Stp_per90**: Centros detenidos en el √°rea por 90 minutos
                - **Save%**: Porcentaje de paradas
                - **CS%**: Porcentaje de porter√≠as a cero
                - **AvgLen**: Longitud media de pase (yardas)
                - **Launch%**: Porcentaje de pases largos
                - **Stp%**: Porcentaje de centros detenidos en el √°rea
                - **#OPA_per90**: Acciones defensivas fuera del √°rea por 90 minutos

                ### Jugadores de campo:
                - **Gls_per90**: Goles por 90 minutos
                - **Ast_per90**: Asistencias por 90 minutos
                - **G+A_per90**: Goles + asistencias por 90 minutos
                - **G-PK**: Goles menos penaltis
                - **G-PK_per90**: Goles menos penaltis por 90 minutos
                - **G-xG_per90**: Goles menos xG por 90 minutos
                - **PK_per90**: Penaltis por 90 minutos
                - **npxG**: xG sin penaltis
                - **npxG_per90**: xG sin penaltis por 90 minutos
                - **xAG_per90**: Asistencias esperadas (xAG) por 90 minutos
                - **PrgC_per90**: Conducciones progresivas por 90 minutos
                - **A-xAG**: Asistencias - xAG
                - **Sh_per90**: Tiros por 90 minutos
                - **SoT_per90**: Tiros a puerta por 90 minutos
                - **G/Sh**: Goles por tiro
                - **SoT%**: Porcentaje de tiros a puerta
                - **PrgP_per90**: Pases progresivos por 90 minutos
                - **PrgR_per90**: Recepciones progresivas por 90 minutos
                - **Cmp**: Pases completados
                - **Cmp_per90**: Pases completados por 90 minutos
                - **Cmp%**: Porcentaje de pases completados
                - **AvgDist**: Distancia media de pase (yardas)
                - **1/3_per90**: Pases completados al √∫ltimo tercio por 90 minutos
                - **PPA_per90**: Pases completados al √°rea rival por 90 minutos
                - **CrsPA_per90**: Centros completados al √°rea rival por 90 minutos
                - **Sw_per90**: Cambios de juego completados por 90 minutos
                - **Crs_per90**: Centros completados por 90 minutos
                - **Tkl**: Entradas
                - **Tkl_per90**: Entradas por 90 minutos
                - **Int_per90**: Intercepciones por 90 minutos
                - **Clr_per90**: Despejes por 90 minutos
                - **Err_per90**: Errores que conducen a tiro por 90 minutos
                - **Fld_per90**: Faltas recibidas por 90 minutos
                - **Touches_per90**: Toques por 90 minutos
                - **Succ_per90**: Regates exitosos por 90 minutos
                - **Carries_per90**: Conducciones por 90 minutos
                - **Mis_per90**: Controles fallidos por 90 minutos
                - **Dis_per90**: Balones perdidos por 90 minutos
                - **Fls_per90**: Faltas cometidas por 90 minutos
                - **PKwon_per90**: Penaltis provocados por 90 minutos
                - **PKcon_per90**: Penaltis concedidos por 90 minutos
                - **Recov_per90**: Recuperaciones por 90 minutos
                - **Tkl%**: Porcentaje de √©xito en entradas
                - **Succ%**: Porcentaje de regates exitosos
                - **Won_per90**: Duelos a√©reos ganados por 90 minutos
                - **Won%**: Porcentaje de duelos a√©reos ganados
                - **CrdY_per90**: Tarjetas amarillas por 90 minutos
                - **CrdR_per90**: Tarjetas rojas por 90 minutos
                """)
